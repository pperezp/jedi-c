/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package cl.principal;

import cl.bd.Conexion;
import cl.bd.DatosConexion;
import cl.estadistica.Estadistica;
import cl.grafico.Grafico;
import cl.historial.Historial;
import cl.modelo.*;
import cl.modelo.listModel.LMAdmin;
import cl.modelo.listModel.LMAlumno;
import cl.modelo.listModel.LMDirector;
import cl.modelo.listModel.LMProfesor;
import datechooser.model.multiple.PeriodSet;
import java.awt.Desktop;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ListModel;
import javax.xml.parsers.ParserConfigurationException;
import org.xml.sax.SAXException;
import xml.analizador.dom.JespXML;
import xml.analizador.dom.modelo.Tag;

/**
 *
 * @author Pato Pérez
 */
public class Aplicacion extends javax.swing.JFrame {

    private Calendar calInicio;
    private Calendar calFin;
    private SimpleDateFormat formatoDateMysql;
    private SimpleDateFormat formatoFechaLinda;
    private Conexion c;
    private List<RegistroHistorial> historial;

    /**
     * Creates new form Aplicacion
     */
    public Aplicacion() throws IOException,ParserConfigurationException, SAXException, IOException{
        initComponents();
        dateChooser.setEnabled(false);
        formatoDateMysql = new SimpleDateFormat("y-MM-d H:m:s");
        formatoFechaLinda = new SimpleDateFormat("d 'de' MMMM 'de' y 'a las' HH:mm:ss");
        calInicio = Calendar.getInstance();
        calFin = Calendar.getInstance();
        conectar();
        Historial.conectar();
        setHorasCorrespondientes();
        llenarComboAdmin();
        llenarComboSedes();
        llenarComboTipoGrafico();
        llenarComboFiltro();
        this.setBounds(0, 0, 953, 601);
        this.setLocationRelativeTo(null);
        this.setIconImage(ImageIO.read(getClass().getResource("/imagenes/iconoArriba.png")));
        formGrafico.setIconImage(ImageIO.read(getClass().getResource("/imagenes/iconoArriba.png")));
        formGrafico.setBounds(0, 0, 617, 339);
//        formGrafico.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        formGrafico = new javax.swing.JFrame();
        pnlGrafico = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        cboFiltroGrafico = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        cboTipoGra = new javax.swing.JComboBox();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        btnVerHistorial = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        cboSedes = new javax.swing.JComboBox();
        cboDirector = new javax.swing.JComboBox();
        cboDocente = new javax.swing.JComboBox();
        cboAlumno = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        cboAdmin = new javax.swing.JComboBox();
        jPanel3 = new javax.swing.JPanel();
        cboFiltro = new javax.swing.JComboBox();
        dateChooser = new datechooser.beans.DateChooserCombo();
        anioSpinner = new javax.swing.JSpinner();
        chkHisto = new javax.swing.JCheckBox();
        chkGrafi = new javax.swing.JCheckBox();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        cboHistorial = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        listaObj = new javax.swing.JList();
        filtroObjetos = new javax.swing.JCheckBox();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        formGrafico.setTitle("Gráfico");

        pnlGrafico.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pnlGrafico.setLayout(new java.awt.BorderLayout());

        jLabel9.setText("Filtro gráfico:");

        jLabel8.setText("Tipo gráfico:");

        cboTipoGra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboTipoGraActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout formGraficoLayout = new javax.swing.GroupLayout(formGrafico.getContentPane());
        formGrafico.getContentPane().setLayout(formGraficoLayout);
        formGraficoLayout.setHorizontalGroup(
            formGraficoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(formGraficoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(formGraficoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(formGraficoLayout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cboFiltroGrafico, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 190, Short.MAX_VALUE)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cboTipoGra, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(pnlGrafico, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        formGraficoLayout.setVerticalGroup(
            formGraficoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(formGraficoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(formGraficoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(formGraficoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cboTipoGra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cboFiltroGrafico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlGrafico, javax.swing.GroupLayout.DEFAULT_SIZE, 289, Short.MAX_VALUE)
                .addContainerGap())
        );

        formGraficoLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {cboFiltroGrafico, jLabel9});

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("JEDI-C Historial");
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        btnVerHistorial.setText("Procesar");
        btnVerHistorial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerHistorialActionPerformed(evt);
            }
        });

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/logo_200.png"))); // NOI18N

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel5.setText("JEDI-C Alumno:");

        jLabel4.setText("JEDI-C Docente:");

        jLabel3.setText("JEDI-C Director:");

        jLabel6.setText("Sede:");

        cboSedes.setEnabled(false);
        cboSedes.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboSedesItemStateChanged(evt);
            }
        });
        cboSedes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboSedesActionPerformed(evt);
            }
        });

        cboDirector.setEnabled(false);

        cboDocente.setEnabled(false);
        cboDocente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboDocenteActionPerformed(evt);
            }
        });

        cboAlumno.setEnabled(false);

        jLabel1.setText("JEDI-C Administrador:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cboAdmin, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cboSedes, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cboDirector, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cboDocente, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cboAlumno, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel1, jLabel3, jLabel4, jLabel5, jLabel6});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboAdmin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboSedes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboDirector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboDocente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboAlumno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Filtro"));

        cboFiltro.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Hoy", "Última semana", "Último mes", "Último año", "Último semestre", "Año específico", "Siempre", "Rango de fechas" }));
        cboFiltro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboFiltroActionPerformed(evt);
            }
        });

        dateChooser.setCalendarPreferredSize(new java.awt.Dimension(353, 205));
        dateChooser.setFormat(2);
        dateChooser.setWeekStyle(datechooser.view.WeekDaysStyle.FULL);
        dateChooser.setBehavior(datechooser.model.multiple.MultyModelBehavior.SELECT_PERIOD);

        anioSpinner.setModel(new javax.swing.SpinnerNumberModel(2011, 2011, 2100, 1));
        anioSpinner.setEnabled(false);

        chkHisto.setText("Desplegar historial");

        chkGrafi.setText("Gráfico");
        chkGrafi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkGrafiActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dateChooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cboFiltro, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(anioSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 313, Short.MAX_VALUE)
                        .addComponent(chkGrafi)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkHisto)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cboFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(anioSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chkHisto)
                    .addComponent(chkGrafi))
                .addContainerGap())
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {anioSpinner, chkGrafi, chkHisto});

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel2.setText("Historial:");

        cboHistorial.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "JEDI-C Administrador", "JEDI-C Director", "JEDI-C Docente", "JEDI-C Alumno" }));
        cboHistorial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboHistorialActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cboHistorial, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboHistorial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jScrollPane1.setViewportView(listaObj);

        filtroObjetos.setText("Filtro de objetos");

        jButton1.setText("-->");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("<--");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnVerHistorial, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1)
                            .addComponent(jButton2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 330, Short.MAX_VALUE))
                            .addComponent(filtroObjetos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnVerHistorial)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addComponent(jLabel7))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(115, 115, 115)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filtroObjetos)
                .addGap(130, 130, 130))
        );

        jTabbedPane1.addTab("JEDI-C Historial", jPanel1);

        getContentPane().add(jTabbedPane1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cboFiltroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboFiltroActionPerformed
        String ele = cboFiltro.getSelectedItem().toString();

        calInicio = Calendar.getInstance();
        calFin = Calendar.getInstance();

        setHorasCorrespondientes();
        anioSpinner.setEnabled(ele.equalsIgnoreCase("Año específico"));

        switch (ele) {
            case "Última semana": {
                calInicio.add(Calendar.DAY_OF_MONTH, -7);
                break;
            }
            case "Último mes": {
                calInicio.add(Calendar.MONTH, -1);
                break;
            }
            case "Último año": {
                calInicio.add(Calendar.YEAR, -1);
                break;
            }
            case "Siempre": {
                calInicio.set(Calendar.YEAR, 2011);
                calInicio.set(Calendar.MONTH, 0);
                calInicio.set(Calendar.DAY_OF_MONTH, 1);
            }
            case "Rango de fechas": {
                dateChooser.setEnabled(true);
                break;
            }
            case "Último semestre": {
                calInicio.add(Calendar.MONTH, -6);
                break;
            }

        }

        if (!ele.equalsIgnoreCase("Rango de fechas")) {
            dateChooser.setEnabled(false);
        }
    }//GEN-LAST:event_cboFiltroActionPerformed

    private void btnVerHistorialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerHistorialActionPerformed
        final Thread tHis = new Thread(new Runnable() {

            @Override
            public void run() {
                try {
                    String eleccion = cboFiltro.getSelectedItem().toString();
                    if (eleccion.equalsIgnoreCase("Rango de fechas")) {
                        PeriodSet ps = dateChooser.getSelectedPeriodSet();
                        calInicio = ps.getFirstPeriod().getStartDate();
                        calFin = ps.getFirstPeriod().getEndDate();
                        setHorasCorrespondientes();
                    } else if (eleccion.equalsIgnoreCase("Año específico")) {
                        String anio = anioSpinner.getValue().toString();
                        calInicio.set(Calendar.YEAR, Integer.parseInt(anio));
                        calInicio.set(Calendar.MONTH, 0);
                        calInicio.set(Calendar.DAY_OF_MONTH, 1);

                        calFin.set(Calendar.YEAR, Integer.parseInt(anio));
                        calFin.set(Calendar.MONTH, 11);
                        calFin.set(Calendar.DAY_OF_MONTH, 31);
                    }

                    /*
                     * ACA TENGO QUE VER QUE OBJETO MANDAR PA QUE REVISE EL HISTORIAL
                     */
                    Object ob = null;//
                    List<Object> obs = null;
                    if (!filtroObjetos.isSelected()) {
                        ob = getObjectoSeleccionado();
                    } else {
                        obs = getObjetosFiltro();
                    }

                    /*
                     * (ob != null?ob:obs) esto quiere decir que si ob != null,
                     * obtengo el historial de una sola persona, pero si es ==
                     * null, quiere decir que quiero ver el historial de una
                     * lista de objetos, la cual se llama
                     obs
                     */
                    historial = Historial.getHistorial((ob != null ? ob : obs), formatoDateMysql.format(calInicio.getTime()), formatoDateMysql.format(calFin.getTime()));

                    if (chkHisto.isSelected()) {
                        generarHtml(historial, (ob != null ? ob : obs));
                    }

                    /*
                     * GRÁFICO
                     */
                    if (chkGrafi.isSelected()) {
                        Filtro filtro = (Filtro) cboFiltroGrafico.getSelectedItem();
                        Estadistica est = new Estadistica(historial);
                        Grafico gr = new Grafico(est.getDatos2(filtro.getFiltro()), filtro.getNombre(), "Meses", filtro.getNombre(), (Grafico.Tipo) cboTipoGra.getSelectedItem());

                        pnlGrafico.removeAll();
                        pnlGrafico.add(gr.getGraficoComoPanel());
                        pnlGrafico.updateUI();
                    }








                } catch (IOException ex) {
                    Logger.getLogger(Aplicacion.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException | SQLException ex) {
                    Logger.getLogger(Aplicacion.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            private void generarHtml(List<RegistroHistorial> historial, Object ente) {

                final String NOMBRE_HTML = "webHistorial/historial.html";
                final String NOMBRE_CSS = "css/estilos.css";
                FileWriter archivo = null;
                try {
                    archivo = new FileWriter(NOMBRE_HTML);
                    PrintWriter es = new PrintWriter(archivo);
                    es.println("<!DOCTYPE html PUBLIC '-//W3C//DTD XHTML 1.0 Transitional//EN' "
                            + "'http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd'>");
                    es.println("<html xmlns='http://www.w3.org/1999/xhtml'>");
                    es.println("<head>");
                    es.println("<meta http-equiv='Content-Type' content='text/html; charset=utf-8' />");
                    es.println("<title>Historial</title>");
                    es.println("<link href='" + NOMBRE_CSS + "' rel='stylesheet' type='text/css' />");
                    es.println("</head>");
                    /*
                     * background='images/fondo.png' bgproperties='fixed'
                     */
                    es.println("<body>");
                    es.println("<div class='centrado'><img src='images/logo.png' width='200' height='42' /></div>");
                    /*
                     * BODY
                     */
                    if (ente instanceof Administrador) {
                        Administrador a = (Administrador) ente;
                        es.println("<br><div class='titulo'>Historial del administrador " + a.getNombreReal() + "</div>");
                    } else {
                        es.println("<br><div class='titulo'>Historial de " + ente.toString() + "</div>");
                    }


                    /*
                     * Filtro
                     */
                    es.println("<div class='subTitulo'>Filtro: ");
                    if (cboFiltro.getSelectedItem().toString().equalsIgnoreCase("Rango de fechas")) {
                        PeriodSet ps = dateChooser.getSelectedPeriodSet();
                        calInicio = ps.getFirstPeriod().getStartDate();
                        calFin = ps.getFirstPeriod().getEndDate();
                        es.println("Del <span class='resaltar'>" + formatoFechaLinda.format(calInicio.getTime()) + "</span> al <span class='resaltar'>" + formatoFechaLinda.format(calFin.getTime()) + "</span>");
                    } else {
                        es.println(cboFiltro.getSelectedItem().toString());
                    }
                    es.println("</div>");
                    /*
                     * tabla
                     */
                    es.println("<table border='1'>");
                    es.println("<tr>");
                    es.println("<td width='10%' class='tituloArriba'>Fecha</td>");
                    es.println("<td width='80%'class='tituloArriba'>Detalles</td>");
                    es.println("<td width='10%'class='tituloArriba'>Usuario</td>");
                    es.println("</tr>");
                    for (RegistroHistorial rh : historial) {
                        es.println("<tr >");
                        es.append("<td class='dato'>").append(rh.getFechaFormateada()).append("</td>");
                        es.append("<td class='datoDetalles'>").append(rh.getAccion()).append("</td>");
                        es.append("<td class='dato'>").append(rh.getNombreResponsable()).append("</td>");
//                        System.out.println(rh);
                        es.println("</tr>");
                    }
                    es.println("</table>");
                    /*
                     * BODY
                     */

                    es.println("</body>");
                    es.println("</html>");


                } catch (IOException ex) {
                    Logger.getLogger(Aplicacion.class.getName()).log(Level.SEVERE, null, ex);
                } finally {
                    try {
                        archivo.close();
                        File f = new File("webHistorial/historial.html");
                        Desktop.getDesktop().browse(f.toURI());
                    } catch (IOException ex) {
                        Logger.getLogger(Aplicacion.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }

            }

            private Object getObjectoSeleccionado() {
                Object o = null;
                switch (cboHistorial.getSelectedItem().toString()) {
                    case "JEDI-C Administrador": {
                        o = cboAdmin.getSelectedItem();
                        break;
                    }
                    case "JEDI-C Director": {
                        o = cboDirector.getSelectedItem();
                        break;
                    }
                    case "JEDI-C Docente": {
                        o = cboDocente.getSelectedItem();
                        break;
                    }
                    case "JEDI-C Alumno": {
                        o = cboAlumno.getSelectedItem();
                        break;
                    }
                }
                return o;
            }

            private List<Object> getObjetosFiltro() {
                ListModel model = listaObj.getModel();
                List<Object> lista = new ArrayList<>();
                for (int i = 0; i < model.getSize(); i++) {
                    lista.add(model.getElementAt(i));
                }
                return lista;
            }
        });
        tHis.start();

        new Thread(new Runnable() {

            @Override
            public void run() {
                btnVerHistorial.setEnabled(false);
                btnVerHistorial.setText("cargando...");
                while (tHis.isAlive()) {
                    try {
                        Thread.sleep(500);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Aplicacion.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                btnVerHistorial.setText("Ver historial");
                btnVerHistorial.setEnabled(true);
            }
        }).start();
    }//GEN-LAST:event_btnVerHistorialActionPerformed

    private void cboHistorialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboHistorialActionPerformed
        Object o = cboHistorial.getSelectedItem();

        switch (o.toString()) {
            case "JEDI-C Administrador": {
                cboAdmin.setEnabled(true);
                cboDirector.setEnabled(false);
                cboDocente.setEnabled(false);
                cboAlumno.setEnabled(false);
                cboSedes.setEnabled(false);
                break;
            }
            case "JEDI-C Director": {
                cboAdmin.setEnabled(false);
                cboDirector.setEnabled(true);
                cboDocente.setEnabled(false);
                cboAlumno.setEnabled(false);
                cboSedes.setEnabled(true);
                break;
            }
            case "JEDI-C Docente": {
                cboAdmin.setEnabled(false);
                cboDirector.setEnabled(false);
                cboDocente.setEnabled(true);
                cboAlumno.setEnabled(false);
                cboSedes.setEnabled(true);
                break;
            }
            case "JEDI-C Alumno": {
                cboAdmin.setEnabled(false);
                cboDirector.setEnabled(false);
                cboDocente.setEnabled(true);
                cboAlumno.setEnabled(true);
                cboSedes.setEnabled(true);
                break;
            }
        }
    }//GEN-LAST:event_cboHistorialActionPerformed

    private void cboSedesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboSedesItemStateChanged
    }//GEN-LAST:event_cboSedesItemStateChanged

    private void cboSedesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboSedesActionPerformed
        llenarComboDirectores(cboSedes.getSelectedItem());
        llenarComboDocentes(cboSedes.getSelectedItem());
        llenarComboAlumnos(cboSedes.getSelectedItem());
    }//GEN-LAST:event_cboSedesActionPerformed

    private void cboDocenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboDocenteActionPerformed
        llenarComboAlumnos(cboSedes.getSelectedItem(), cboDocente.getSelectedItem());
    }//GEN-LAST:event_cboDocenteActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (cboDocente.isEnabled() && !cboAlumno.isEnabled()) { // solo docentes
            Object o = cboDocente.getSelectedItem();
            if (o instanceof Profesor) {
                Profesor p = (Profesor) o;
                if (isCompatible(p)) {
                    LMProfesor lm = (LMProfesor) listaObj.getModel();
                    lm.addProfe(p);
                    listaObj.updateUI();
                }
            }
            if(!filtroObjetos.isSelected()){
                filtroObjetos.setSelected(true);
            }
        } else if (cboAlumno.isEnabled()) { // alumno
            Object o = cboAlumno.getSelectedItem();
            if (o instanceof Alumno) {
                Alumno alum = (Alumno) o;
                if (isCompatible(alum)) {
                    LMAlumno lm = (LMAlumno) listaObj.getModel();
                    lm.addAlumno(alum);
                    listaObj.updateUI();
                }
            }
            if(!filtroObjetos.isSelected()){
                filtroObjetos.setSelected(true);
            }
        } else if (cboAdmin.isEnabled()) {//admin
            Object o = cboAdmin.getSelectedItem();
            if (o instanceof Administrador) {
                Administrador admin = (Administrador) o;
                if (isCompatible(admin)) {
                    LMAdmin lm = (LMAdmin) listaObj.getModel();
                    lm.addAdmin(admin);
                    listaObj.updateUI();
                }
            }
            if(!filtroObjetos.isSelected()){
                filtroObjetos.setSelected(true);
            }
        } else if (cboDirector.isEnabled()) {//director
            Object o = cboDirector.getSelectedItem();
            if (o instanceof Director) {
                Director p = (Director) o;
                if (isCompatible(p)) {
                    LMDirector lm = (LMDirector) listaObj.getModel();
                    lm.addDirector(p);
                    listaObj.updateUI();
                }
            }
            if(!filtroObjetos.isSelected()){
                filtroObjetos.setSelected(true);
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        
        try {
            List selectedValuesList = listaObj.getSelectedValuesList();
            if (cboDocente.isEnabled() && !cboAlumno.isEnabled()) { // solo docentes
                LMProfesor lm = (LMProfesor) listaObj.getModel();
                
                for(Object o : selectedValuesList){
                    lm.removeProfe((Profesor) o);
                }
                
                listaObj.updateUI();
            } else if (cboAlumno.isEnabled()) { // alumno
                LMAlumno lm = (LMAlumno) listaObj.getModel();
                
                for(Object o : selectedValuesList){
                    lm.removeAlumno((Alumno) o);
                }
                
//                lm.removeAlumno((Alumno) listaObj.getSelectedValue());
                listaObj.updateUI();
            } else if (cboAdmin.isEnabled()) {//admin
                LMAdmin lm = (LMAdmin) listaObj.getModel();
//                lm.removeAdmin((Administrador) listaObj.getSelectedValue());
                for(Object o : selectedValuesList){
                    lm.removeAdmin((Administrador) o);
                }
                listaObj.updateUI();
            } else if (cboDirector.isEnabled()) {//director
                LMDirector lm = (LMDirector) listaObj.getModel();
//                lm.removeDirector((Director) listaObj.getSelectedValue());
                for(Object o : selectedValuesList){
                    lm.removeDirector((Director) o);
                }
                listaObj.updateUI();
            }
            if(listaObj.getModel().getSize() == 0){
               filtroObjetos.setSelected(false);
            }
        } catch (Exception e) {
            System.out.println("Exception. probablemente por no seleccionar algo que quiere borrar");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void chkGrafiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkGrafiActionPerformed
        formGrafico.setVisible(chkGrafi.isSelected());
    }//GEN-LAST:event_chkGrafiActionPerformed

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
//        System.out.println("w:"+this.getWidth());
//        System.out.println("h:"+this.getHeight());
//        System.out.println();
    }//GEN-LAST:event_formComponentResized

    private void cboTipoGraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboTipoGraActionPerformed
        if (chkGrafi.isSelected() && historial != null) {
            try {
                Filtro filtro = (Filtro) cboFiltroGrafico.getSelectedItem();
                Estadistica est = new Estadistica(historial);
                Grafico gr = new Grafico(est.getDatos2(filtro.getFiltro()), filtro.getNombre(), "Meses", filtro.getNombre(), (Grafico.Tipo) cboTipoGra.getSelectedItem());

                pnlGrafico.removeAll();
                pnlGrafico.add(gr.getGraficoComoPanel());
                pnlGrafico.updateUI();
            } catch (IOException ex) {
                Logger.getLogger(Aplicacion.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_cboTipoGraActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Aplicacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                try {
                        new Aplicacion().setVisible(true);
                    
                }   catch (ParserConfigurationException ex) {
                        Logger.getLogger(Aplicacion.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (SAXException ex) {
                        Logger.getLogger(Aplicacion.class.getName()).log(Level.SEVERE, null, ex);
                    }catch (IOException ex) {
                    Logger.getLogger(Aplicacion.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSpinner anioSpinner;
    private javax.swing.JButton btnVerHistorial;
    private javax.swing.JComboBox cboAdmin;
    private javax.swing.JComboBox cboAlumno;
    private javax.swing.JComboBox cboDirector;
    private javax.swing.JComboBox cboDocente;
    private javax.swing.JComboBox cboFiltro;
    private javax.swing.JComboBox cboFiltroGrafico;
    private javax.swing.JComboBox cboHistorial;
    private javax.swing.JComboBox cboSedes;
    private javax.swing.JComboBox cboTipoGra;
    private javax.swing.JCheckBox chkGrafi;
    private javax.swing.JCheckBox chkHisto;
    private datechooser.beans.DateChooserCombo dateChooser;
    private javax.swing.JCheckBox filtroObjetos;
    private javax.swing.JFrame formGrafico;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JList listaObj;
    private javax.swing.JPanel pnlGrafico;
    // End of variables declaration//GEN-END:variables

    private void setHorasCorrespondientes() {
        calInicio.set(Calendar.HOUR_OF_DAY, 0);
        calInicio.set(Calendar.MINUTE, 0);
        calInicio.set(Calendar.SECOND, 0);
        calInicio.set(Calendar.MILLISECOND, 0);

        calFin.set(Calendar.HOUR, 23);
        calFin.set(Calendar.MINUTE, 59);
        calFin.set(Calendar.SECOND, 59);
    }

    private void llenarComboAdmin() {
        try {
            cboAdmin.removeAllItems();
            cboAdmin.addItem("Todos los administradores");
            String query = "select * from administrador";
            c.sentencia = c.con.createStatement();
            c.rs = c.sentencia.executeQuery(query);

            while (c.rs.next()) {
                cboAdmin.addItem(new Administrador(
                        c.rs.getString("cod_adm"),
                        c.rs.getString("nom_adm"),
                        c.rs.getString("usu_adm")));
            }
            cboAdmin.addItem("Historial JEDI-C administrador");
            c.sentencia.close();
        } catch (SQLException ex) {
            Logger.getLogger(Aplicacion.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void llenarComboSedes() {
        try {
            cboSedes.removeAllItems();
            cboSedes.addItem("Todas las sedes");
            String query = "select * from sede ORDER BY nom_sed ASC";
            c.sentencia = c.con.createStatement();
            c.rs = c.sentencia.executeQuery(query);

            while (c.rs.next()) {
                cboSedes.addItem(new Sede(c.rs.getString("cod_sed"), c.rs.getString("nom_sed")));
            }
            c.sentencia.close();
        } catch (SQLException ex) {
            Logger.getLogger(Aplicacion.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void llenarComboDirectores(Object sede) {
        try {
            String query;
            cboDirector.removeAllItems();


            if (sede instanceof Sede) {
                Sede s = (Sede) sede;
                query = "select * from director where cod_sed = '" + s.getCodigo() + "'";
            } else {
                query = "select * from director";
                cboDirector.addItem("Todos los directores");
            }

            query += " ORDER BY nom_dir ASC";

            c.sentencia = c.con.createStatement();
            c.rs = c.sentencia.executeQuery(query);

            while (c.rs.next()) {
                cboDirector.addItem(new Director(
                        c.rs.getString("cod_sed"),
                        c.rs.getString("est_dir"),
                        c.rs.getString("ema_dir"),
                        c.rs.getString("cod_dir"),
                        c.rs.getString("nom_dir"),
                        c.rs.getString("usu_dir")));
            }
            c.sentencia.close();
        } catch (SQLException ex) {
            Logger.getLogger(Aplicacion.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void llenarComboDocentes(Object sede) {
        try {
            String query;
            cboDocente.removeAllItems();
            cboDocente.addItem("Todos los docentes");

            if (sede instanceof Sede) {
                Sede s = (Sede) sede;
                query = "select "
                        + "profesor.cod_dir, profesor.est_pro, profesor.ema_pro, "
                        + "profesor.cod_pro, profesor.nom_pro, profesor.usu_pro "
                        + "from profesor, director "
                        + "where profesor.cod_dir = director.cod_dir and "
                        + "director.cod_sed = '" + s.getCodigo() + "'";
            } else {
                query = "select * from profesor";
            }

            query += " ORDER BY profesor.nom_pro ASC";

            c.sentencia = c.con.createStatement();
            c.rs = c.sentencia.executeQuery(query);

            String nomPro;
            while (c.rs.next()) {
                nomPro = c.rs.getString("nom_pro");
                if (!nomPro.equalsIgnoreCase("Sin Profesor")) {
                    cboDocente.addItem(new Profesor(
                            c.rs.getString("cod_dir"),
                            c.rs.getString("est_pro"),
                            c.rs.getString("ema_pro"),
                            c.rs.getString("cod_pro"),
                            nomPro,
                            c.rs.getString("usu_pro")));
                }
            }
            c.sentencia.close();
        } catch (SQLException ex) {
            Logger.getLogger(Aplicacion.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void llenarComboAlumnos(Object sede) {
        try {
            String query;
            cboAlumno.removeAllItems();
            cboAlumno.addItem("Todos los alumnos");

            if (sede instanceof Sede) {
                Sede s = (Sede) sede;
                query = "select "
                        + "seccion.cod_sec, seccion.num_sec, alumno.ema_alu, "
                        + "alumno.cod_alu, alumno.nom_alu, alumno.usu_alu "
                        + "from seccion, alumno, profesor, director, sede "
                        + "where alumno.cod_sec = seccion.cod_sec and "
                        + "seccion.cod_pro = profesor.cod_pro and "
                        + "profesor.cod_dir = director.cod_dir and "
                        + "director.cod_sed = '" + s.getCodigo() + "' and "
                        + "director.cod_sed = sede.cod_sed";
            } else {
                query = "select "
                        + "seccion.cod_sec, seccion.num_sec, alumno.ema_alu, "
                        + "alumno.cod_alu, alumno.nom_alu, alumno.usu_alu "
                        + "from seccion, alumno "
                        + "where alumno.cod_sec = seccion.cod_sec";
            }

            query += " ORDER BY alumno.nom_alu ASC";

            c.sentencia = c.con.createStatement();
            c.rs = c.sentencia.executeQuery(query);

            Seccion sec;
            while (c.rs.next()) {
                sec = new Seccion(c.rs.getString("cod_sec"), c.rs.getString("num_sec"));
                cboAlumno.addItem(new Alumno(
                        sec,
                        c.rs.getString("ema_alu"),
                        c.rs.getString("cod_alu"),
                        c.rs.getString("nom_alu"),
                        c.rs.getString("usu_alu")));
            }
            c.sentencia.close();
        } catch (SQLException ex) {
            Logger.getLogger(Aplicacion.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void llenarComboAlumnos(Object sede, Object docente) {
        try {
            String query;


            if (docente instanceof Profesor) {
                cboAlumno.removeAllItems();
                cboAlumno.addItem("Todos los alumnos");
                Profesor p = (Profesor) docente;
                query = "select "
                        + "seccion.cod_sec, seccion.num_sec, alumno.ema_alu, "
                        + "alumno.cod_alu, alumno.nom_alu, alumno.usu_alu "
                        + "from seccion, alumno, profesor "
                        + "where alumno.cod_sec = seccion.cod_sec and "
                        + "seccion.cod_pro = profesor.cod_pro and "
                        + "profesor.cod_pro = '" + p.getCodigo() + "' ORDER BY alumno.nom_alu ASC";


                c.sentencia = c.con.createStatement();
                c.rs = c.sentencia.executeQuery(query);

                Seccion sec;
                while (c.rs.next()) {
                    sec = new Seccion(c.rs.getString("cod_sec"), c.rs.getString("num_sec"));
                    cboAlumno.addItem(new Alumno(
                            sec,
                            c.rs.getString("ema_alu"),
                            c.rs.getString("cod_alu"),
                            c.rs.getString("nom_alu"),
                            c.rs.getString("usu_alu")));
                }
                c.sentencia.close();
            } else {
                llenarComboAlumnos(sede);
            }


        } catch (SQLException ex) {
            Logger.getLogger(Aplicacion.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void conectar() throws ParserConfigurationException, SAXException, IOException {
        JespXML con = new JespXML("config/conexion.xml");
        final Tag raiz = con.leerXML();
        final Tag server = raiz.getTagHijo("server", Tag.Cantidad.primeraOcurrencia).get(0);
        final Tag bd = raiz.getTagHijo("baseDeDatos", Tag.Cantidad.primeraOcurrencia).get(0);
        
        
        try {
            c = new Conexion(new DatosConexion() {

                @Override
                public String getServer() {
                    return server.getContenido();
                }

                @Override
                public String getUser() {
                    return raiz.getValorDeAtributo("user");
                }

                @Override
                public String getPass() {
                    return raiz.getValorDeAtributo("pass");
                }

                @Override
                public String getBaseDeDatos() {
                    return bd.getContenido();
                }
            });

            c.conectar();
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(Aplicacion.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void llenarComboTipoGrafico() {
        for (Grafico.Tipo t : Grafico.Tipo.values()) {
            cboTipoGra.addItem(t);
        }
    }

    private void llenarComboFiltro() {
        cboFiltroGrafico.addItem(new Filtro("Inicios de sesión", "Inició sesión"));
        cboFiltroGrafico.addItem(new Filtro("Ejercicios docente", "Ha subido un ejercicio"));
        cboFiltroGrafico.addItem(new Filtro("Ejercicios alumno", "Envió un ejercicio"));
    }

    private boolean isCompatible(Object o) {
        if (o instanceof Profesor && listaObj.getModel() instanceof LMProfesor) {
            return true;
        } else if (o instanceof Director && listaObj.getModel() instanceof LMDirector) {
            return true;
        } else if (o instanceof Alumno && listaObj.getModel() instanceof LMAlumno) {
            return true;
        } else if (o instanceof Administrador && listaObj.getModel() instanceof LMAdmin) {
            return true;
        } else if (o instanceof Profesor) {
            listaObj.setModel(new LMProfesor());
            return true;
        } else if (o instanceof Director) {
            listaObj.setModel(new LMDirector());
            return true;
        } else if (o instanceof Alumno) {
            listaObj.setModel(new LMAlumno());
            return true;
        } else if (o instanceof Administrador) {
            listaObj.setModel(new LMAdmin());
            return true;
        } else {
            return false;
        }
    }
}
