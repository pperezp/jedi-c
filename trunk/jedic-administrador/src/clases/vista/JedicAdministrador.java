/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Aplicacion.java
 *
 * Created on 02-07-2011, 07:58:00 PM
 */
package clases.vista;

import clases.BD.Conexion;
import clases.BD.DatosConexion;
import clases.excel.Excel;
import clases.excel.modelo.HojaExcel;
import clases.modelo.Administrador;
import clases.modelo.Causal;
import clases.modelo.Director;
import clases.modelo.idioma.Idioma;
import clases.modelo.idioma.K;
import clases.modelo.listas.listModel.ModeloListaDirector;
import clases.modelo.listas.listModel.ModeloListaRespaldos;
import clases.modelo.reporte.*;
import clases.recuperarClave.HiloGif;
import clases.recuperarClave.HiloRecuperarClave;
import clases.reporte.HiloReporte;
import clases.utilidades.*;
import clases.utilidades.archivo.Abrir;
import clases.utilidades.fechaYHora.Fecha;
import clases.utilidades.fechaYHora.Hora;
import clases.vista.listas.cellrenderer.CRBaseDeDatos;
import clases.vista.listas.cellrenderer.CRDirectorNoVigente;
import clases.vista.listas.cellrenderer.CRDirectorVigente;
import clases.vista.mensajes.HiloMensajeCondicion;
import clases.vista.mensajes.MensajeHilo;
import clases.vista.mensajes.Mensajes;
import clases.vista.util.Cambiar;
import clases.vista.util.Controlar;
import clases.vista.util.Utilidades;
import clases.vista.util.Validar;
import clases.xml.dom.analizador.DOM;
import clases.xml.dom.analizador.modelo.Atributo;
import clases.xml.dom.analizador.modelo.Tag;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.math.BigInteger;
import java.sql.SQLException;
import java.util.List;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.text.JTextComponent;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import org.xml.sax.SAXException;

/**
 *
 * @author Administrador
 */
public class JedicAdministrador extends javax.swing.JFrame {

    private String[] encTabSed = new String[1];
    private String[] encTabDir = new String[3];
    private Thread hiloRestaurar;
    private Thread hiloRespaldo;
    private HiloRecuperarClave hp;
    private HiloGif hb;

    /**
     * Creates new form Aplicacion
     *
     * @throws ParserConfigurationException
     * @throws ClassNotFoundException
     * @throws IOException
     * @throws SAXException
     * @throws OpcionDeProcesamientoException
     * @throws SQLException
     */
    @SuppressWarnings("LeakingThisInConstructor")
    public JedicAdministrador() throws ParserConfigurationException, SAXException, IOException, ClassNotFoundException, SQLException {
        initComponents();
        conectarBD();
        Idioma.cargarConfiguracionDeIdioma();
        cargarIdiomaEnComponentes();
//        Redimensionar.redimensionarFormulario(this, false, Idioma.palabras.get(K.TITULO_PRINCIPAL));
        this.setLocationRelativeTo(null);
        this.setTitle(Idioma.palabras.get(K.TITULO_PRINCIPAL));
        Cambiar.cambiarIcono(this, Rutas.ICONO_ARRIBA);
        Cambiar.cambiarIcono(this.form_inicio_sesion, Rutas.ICONO_ARRIBA);
        this.form_inicio_sesion.setBounds(new Rectangle(737, 369));
        this.form_inicio_sesion.setLocationRelativeTo(null);
        this.form_inicio_sesion.setTitle("Inicie sesión");
        this.form_inicio_sesion.setVisible(true);
        formCausal.setIconImage(this.getIconImage());
        Historial.setNombreTabla("administrador");
        Historial.addHistorialGeneral("Se inició la ejecución del sistema JEDIC Administrador");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        formCausal = new javax.swing.JFrame();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jTextField2 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        form_inicio_sesion = new javax.swing.JFrame();
        jPanel9 = new javax.swing.JPanel(){

            public void paintComponent(Graphics g){
                Dimension tamanio = getSize();
                ImageIcon imagenFondo = new ImageIcon(getClass().getResource("/imagenes/fondo.png"));
                g.drawImage(imagenFondo.getImage(), 0, 0, tamanio.width, tamanio.height, null);
                setOpaque(false);
                super.paintComponent(g);
            }
        };
        jPanel10 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        usuAdm = new javax.swing.JTextField();
        passAdm = new javax.swing.JPasswordField();
        jLabel7 = new javax.swing.JLabel();
        lblRecuperar = new javax.swing.JLabel();
        inicioSesionBoton = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        lblMenSesion = new javax.swing.JLabel();
        formBarra = new javax.swing.JFrame();
        jPanel11 = new javax.swing.JPanel();
        jLabel27 = new javax.swing.JLabel();
        lblMen = new javax.swing.JLabel();
        jButton8 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        panelTabPrincipal = new javax.swing.JTabbedPane();
        panel_crear_sede = new javax.swing.JPanel(){

            public void paintComponent(Graphics g){
                Dimension tamanio = getSize();
                ImageIcon imagenFondo = new ImageIcon(getClass().getResource("/imagenes/fondoClaro.png"));
                g.drawImage(imagenFondo.getImage(), 0, 0, tamanio.width, tamanio.height, null);
                setOpaque(false);
                super.paintComponent(g);
            }
        };
        jScrollPane1 = new javax.swing.JScrollPane();
        tabSed = new javax.swing.JTable();
        lblNomSed = new javax.swing.JLabel();
        nomSed = new javax.swing.JTextField();
        btnCreSed = new javax.swing.JButton();
        lblLisSed = new javax.swing.JLabel();
        lblMsn = new javax.swing.JLabel();
        lblNomDir = new javax.swing.JLabel();
        nomDir = new javax.swing.JTextField();
        lblUser = new javax.swing.JLabel();
        lblSed = new javax.swing.JLabel();
        lblMail = new javax.swing.JLabel();
        emaDir = new javax.swing.JTextField();
        sedDir = new javax.swing.JComboBox();
        usuDir = new javax.swing.JLabel();
        creDir = new javax.swing.JButton();
        lblLisDir = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabDir = new javax.swing.JTable();
        lblMenDir3 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel(){

            public void paintComponent(Graphics g){
                Dimension tamanio = getSize();
                ImageIcon imagenFondo = new ImageIcon(getClass().getResource("/imagenes/fondoClaro.png"));
                g.drawImage(imagenFondo.getImage(), 0, 0, tamanio.width, tamanio.height, null);
                setOpaque(false);
                super.paintComponent(g);
            }
        };
        jScrollPane4 = new javax.swing.JScrollPane();
        listaNoVigentes = new javax.swing.JList();
        jScrollPane5 = new javax.swing.JScrollPane();
        listaVigentes = new javax.swing.JList();
        btnVig1 = new javax.swing.JButton();
        btnVig2 = new javax.swing.JButton();
        btnVig3 = new javax.swing.JButton();
        lblMenDir2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        nomDir1 = new javax.swing.JTextField();
        emaDir1 = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        usuDir1 = new javax.swing.JLabel();
        sedDir1 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        listaEliminados = new javax.swing.JList();
        jButton5 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel(){

            public void paintComponent(Graphics g){
                Dimension tamanio = getSize();
                ImageIcon imagenFondo = new ImageIcon(getClass().getResource("/imagenes/fondoClaro.png"));
                g.drawImage(imagenFondo.getImage(), 0, 0, tamanio.width, tamanio.height, null);
                setOpaque(false);
                super.paintComponent(g);
            }
        };
        jLabel35 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        btnRespaldar = new javax.swing.JButton();
        lblMenRespaldo1 = new javax.swing.JLabel();
        lblMenRespaldo = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        btnRestaurar = new javax.swing.JButton();
        lblMenRestaurar = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        listaRespaldos = new javax.swing.JList();
        btnRestaurar2 = new javax.swing.JButton();
        lblMenRestaurar2 = new javax.swing.JLabel();
        lblMenRestaurar1 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jLabel28 = new javax.swing.JLabel();
        fecIni = new datechooser.beans.DateChooserCombo();
        jLabel29 = new javax.swing.JLabel();
        fecFin = new datechooser.beans.DateChooserCombo();
        lblMenRep = new javax.swing.JLabel();
        jSplitPane1 = new javax.swing.JSplitPane();
        btnReportes2 = new javax.swing.JButton();
        btnReportes1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        menuIdioma = new javax.swing.JMenu();

        formCausal.setTitle("Causal Inhabilitación");
        formCausal.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formCausalComponentResized(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Causal de Inhabilitación"));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setText("Causal:");
        jPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 110, 60, 20));

        jLabel3.setText("Director: ");
        jPanel2.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 40, -1, 20));

        jLabel4.setText("Fecha de Inhabilitación:");
        jPanel2.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 70, -1, 20));

        jTextArea1.setColumns(20);
        jTextArea1.setEditable(false);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setWrapStyleWord(true);
        jScrollPane6.setViewportView(jTextArea1);

        jPanel2.add(jScrollPane6, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 140, 290, 130));

        jTextField2.setEditable(false);
        jPanel2.add(jTextField2, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 40, 120, -1));

        jButton2.setText("Cerrar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 280, 80, -1));

        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        jPanel2.add(jComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 70, 120, -1));

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/inhabilitado.png"))); // NOI18N
        jPanel2.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 70, -1));

        formCausal.getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        form_inicio_sesion.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                form_inicio_sesionWindowClosing(evt);
            }
        });
        form_inicio_sesion.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                form_inicio_sesionComponentResized(evt);
            }
        });

        jPanel9.setBackground(new java.awt.Color(255, 255, 255));

        jPanel10.setBackground(new java.awt.Color(255, 255, 255));
        jPanel10.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.white, null));
        jPanel10.setOpaque(false);

        jLabel6.setFont(new java.awt.Font("Courier New", 0, 11)); // NOI18N
        jLabel6.setText("Usuario:");

        usuAdm.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                usuAdmKeyReleased(evt);
            }
        });

        passAdm.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                passAdmKeyReleased(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Courier New", 0, 11)); // NOI18N
        jLabel7.setText("Contraseña:");

        lblRecuperar.setFont(new java.awt.Font("Courier New", 1, 11)); // NOI18N
        lblRecuperar.setForeground(new java.awt.Color(0, 51, 204));
        lblRecuperar.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblRecuperar.setText("<html><u>Recuperar Contraseña</u></html>");
        lblRecuperar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblRecuperarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblRecuperarMouseExited(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                lblRecuperarMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblRecuperar, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel10Layout.createSequentialGroup()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(34, 34, 34)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(passAdm)
                            .addComponent(usuAdm))))
                .addGap(24, 24, 24))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(usuAdm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(passAdm))
                .addGap(10, 10, 10)
                .addComponent(lblRecuperar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        inicioSesionBoton.setFont(new java.awt.Font("Courier New", 0, 11)); // NOI18N
        inicioSesionBoton.setText("Iniciar Sesón");
        inicioSesionBoton.setOpaque(false);
        inicioSesionBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inicioSesionBotonActionPerformed(evt);
            }
        });

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/logo_200.png"))); // NOI18N

        lblMenSesion.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblMenSesion.setForeground(new java.awt.Color(0, 153, 0));
        lblMenSesion.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMenSesion.setAutoscrolls(true);

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblMenSesion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(inicioSesionBoton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel10, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 409, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addComponent(lblMenSesion, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(inicioSesionBoton)
                        .addGap(3, 3, 3))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(72, 72, 72)))
                .addContainerGap(124, Short.MAX_VALUE))
        );

        form_inicio_sesion.getContentPane().add(jPanel9, java.awt.BorderLayout.CENTER);

        formBarra.setFocusableWindowState(false);
        formBarra.setMinimumSize(new java.awt.Dimension(348, 143));
        formBarra.setUndecorated(true);

        jPanel11.setBackground(new java.awt.Color(255, 255, 255));
        jPanel11.setPreferredSize(new java.awt.Dimension(357, 167));
        jPanel11.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel27.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/procesando.gif"))); // NOI18N
        jPanel11.add(jLabel27, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 20, -1, -1));

        lblMen.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        lblMen.setText("Procesando");
        jPanel11.add(lblMen, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 20, 200, 70));

        jButton8.setText("Cancelar");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        jPanel11.add(jButton8, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 90, -1, -1));

        formBarra.getContentPane().add(jPanel11, java.awt.BorderLayout.CENTER);

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setBackground(new java.awt.Color(254, 254, 254));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBackground(Color.white);

        panelTabPrincipal.setBackground(new java.awt.Color(255, 255, 255));

        panel_crear_sede.setBackground(new java.awt.Color(255, 255, 255));
        panel_crear_sede.setOpaque(false);

        tabSed.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tabSed.setOpaque(false);
        jScrollPane1.setViewportView(tabSed);

        lblNomSed.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblNomSed.setText("Nombre de Sede:");

        nomSed.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                nomSedKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                nomSedKeyReleased(evt);
            }
        });

        btnCreSed.setText("Crear Sede");
        btnCreSed.setBorderPainted(false);
        btnCreSed.setOpaque(false);
        btnCreSed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreSedActionPerformed(evt);
            }
        });

        lblLisSed.setText("Listado de Sedes:");

        lblMsn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblMsn.setForeground(new java.awt.Color(0, 153, 0));

        lblNomDir.setText("Nombre Director:");

        nomDir.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                nomDirKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                nomDirKeyReleased(evt);
            }
        });

        lblUser.setText("Usuario:");

        lblSed.setText("Sede:");

        lblMail.setText("E-Mail:");

        emaDir.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                emaDirKeyReleased(evt);
            }
        });

        sedDir.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        sedDir.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                sedDirKeyReleased(evt);
            }
        });

        usuDir.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        creDir.setText("Crear Director");
        creDir.setBorderPainted(false);
        creDir.setOpaque(false);
        creDir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                creDirActionPerformed(evt);
            }
        });

        lblLisDir.setText("Listado de Directores de Carrera");

        tabDir.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tabDir.setOpaque(false);
        jScrollPane2.setViewportView(tabDir);

        lblMenDir3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblMenDir3.setForeground(new java.awt.Color(0, 153, 0));

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jButton3.setText("Rescatar sedes desde BD CENTRAL");
        jButton3.setBorderPainted(false);
        jButton3.setOpaque(false);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Rescatar directores de área desde BD CENTRAL");
        jButton4.setOpaque(false);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panel_crear_sedeLayout = new javax.swing.GroupLayout(panel_crear_sede);
        panel_crear_sede.setLayout(panel_crear_sedeLayout);
        panel_crear_sedeLayout.setHorizontalGroup(
            panel_crear_sedeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_crear_sedeLayout.createSequentialGroup()
                .addGroup(panel_crear_sedeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_crear_sedeLayout.createSequentialGroup()
                        .addGroup(panel_crear_sedeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panel_crear_sedeLayout.createSequentialGroup()
                                .addComponent(lblNomSed, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(nomSed))
                            .addGroup(panel_crear_sedeLayout.createSequentialGroup()
                                .addGap(60, 60, 60)
                                .addComponent(btnCreSed, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(20, 20, 20))
                    .addGroup(panel_crear_sedeLayout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addGroup(panel_crear_sedeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblLisSed)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 370, Short.MAX_VALUE))))
                .addGap(30, 30, 30)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(panel_crear_sedeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblLisDir)
                    .addGroup(panel_crear_sedeLayout.createSequentialGroup()
                        .addComponent(jScrollPane2)
                        .addGap(3, 3, 3))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_crear_sedeLayout.createSequentialGroup()
                        .addGap(300, 300, 300)
                        .addComponent(jButton4))
                    .addGroup(panel_crear_sedeLayout.createSequentialGroup()
                        .addGroup(panel_crear_sedeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panel_crear_sedeLayout.createSequentialGroup()
                                .addGap(130, 130, 130)
                                .addComponent(creDir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(panel_crear_sedeLayout.createSequentialGroup()
                                .addGap(134, 134, 134)
                                .addGroup(panel_crear_sedeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(panel_crear_sedeLayout.createSequentialGroup()
                                        .addComponent(lblMail, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(10, 10, 10)
                                        .addComponent(emaDir))
                                    .addGroup(panel_crear_sedeLayout.createSequentialGroup()
                                        .addComponent(lblSed, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(10, 10, 10)
                                        .addComponent(sedDir, 0, 268, Short.MAX_VALUE))
                                    .addGroup(panel_crear_sedeLayout.createSequentialGroup()
                                        .addComponent(lblNomDir, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(10, 10, 10)
                                        .addComponent(nomDir))
                                    .addGroup(panel_crear_sedeLayout.createSequentialGroup()
                                        .addComponent(lblUser, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(10, 10, 10)
                                        .addComponent(usuDir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                        .addGap(153, 153, 153)))
                .addGap(12, 12, 12))
            .addGroup(panel_crear_sedeLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(panel_crear_sedeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblMsn, javax.swing.GroupLayout.PREFERRED_SIZE, 880, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMenDir3, javax.swing.GroupLayout.PREFERRED_SIZE, 870, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        panel_crear_sedeLayout.setVerticalGroup(
            panel_crear_sedeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_crear_sedeLayout.createSequentialGroup()
                .addGroup(panel_crear_sedeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_crear_sedeLayout.createSequentialGroup()
                        .addComponent(jSeparator1)
                        .addGap(3, 3, 3))
                    .addGroup(panel_crear_sedeLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(panel_crear_sedeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panel_crear_sedeLayout.createSequentialGroup()
                                .addGroup(panel_crear_sedeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblNomDir, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(nomDir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(10, 10, 10)
                                .addGroup(panel_crear_sedeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblUser, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(usuDir, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(10, 10, 10)
                                .addGroup(panel_crear_sedeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblSed, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(sedDir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(10, 10, 10)
                                .addGroup(panel_crear_sedeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblMail, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(emaDir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(10, 10, 10)
                                .addComponent(creDir, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(lblLisDir, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 207, Short.MAX_VALUE)
                                .addGap(10, 10, 10)
                                .addComponent(jButton4))
                            .addGroup(panel_crear_sedeLayout.createSequentialGroup()
                                .addGroup(panel_crear_sedeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblNomSed, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(nomSed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(10, 10, 10)
                                .addComponent(btnCreSed)
                                .addGap(17, 17, 17)
                                .addComponent(lblLisSed)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton3)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblMsn, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(lblMenDir3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        panelTabPrincipal.addTab("Crear Sede", panel_crear_sede);

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        listaNoVigentes.setBorder(javax.swing.BorderFactory.createTitledBorder("Directores No Vigentes"));
        listaNoVigentes.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        listaNoVigentes.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listaNoVigentes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                listaNoVigentesMouseReleased(evt);
            }
        });
        jScrollPane4.setViewportView(listaNoVigentes);

        listaVigentes.setBorder(javax.swing.BorderFactory.createTitledBorder("Directores Vigentes"));
        listaVigentes.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        listaVigentes.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane5.setViewportView(listaVigentes);

        btnVig1.setText(">");
        btnVig1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVig1ActionPerformed(evt);
            }
        });

        btnVig2.setText("<");
        btnVig2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVig2ActionPerformed(evt);
            }
        });

        btnVig3.setText("Reemplazar Director");
        btnVig3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVig3ActionPerformed(evt);
            }
        });

        lblMenDir2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblMenDir2.setForeground(new java.awt.Color(0, 153, 0));

        jButton1.setText("Ver causal de Inhabilitación");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel5.setOpaque(false);

        jLabel9.setText("Nombre Director:");

        nomDir1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nomDir1ActionPerformed(evt);
            }
        });
        nomDir1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                nomDir1KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                nomDir1KeyReleased(evt);
            }
        });

        emaDir1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                emaDir1KeyReleased(evt);
            }
        });

        jLabel10.setText("Usuario:");

        usuDir1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        sedDir1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        jLabel12.setText("E-Mail:");

        jLabel13.setText("Sede:");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(sedDir1, javax.swing.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE)
                        .addGap(10, 10, 10))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(emaDir1))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(nomDir1))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(usuDir1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nomDir1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(usuDir1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sedDir1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(emaDir1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        listaEliminados.setBorder(javax.swing.BorderFactory.createTitledBorder("Directores eliminados"));
        listaEliminados.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        listaEliminados.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listaEliminados.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                listaEliminadosMouseReleased(evt);
            }
        });
        jScrollPane7.setViewportView(listaEliminados);

        jButton5.setText("Ver causal de Inhabilitación");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnVig1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnVig2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(jScrollPane4))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 312, Short.MAX_VALUE)
                            .addComponent(jScrollPane7)
                            .addComponent(jButton5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE))
                        .addGap(2, 2, 2)))
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnVig3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(lblMenDir2, javax.swing.GroupLayout.PREFERRED_SIZE, 880, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE)
                        .addGap(10, 10, 10)
                        .addComponent(jButton1)
                        .addGap(17, 17, 17)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton5)
                        .addGap(1, 1, 1))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(147, 147, 147)
                                .addComponent(btnVig1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnVig2))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnVig3)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(40, 40, 40)
                .addComponent(lblMenDir2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10))
        );

        panelTabPrincipal.addTab("Modificar Director", jPanel4);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setOpaque(false);

        jLabel35.setFont(new java.awt.Font("Tahoma", 3, 24)); // NOI18N
        jLabel35.setText("Respaldo");

        jPanel7.setBackground(new java.awt.Color(255, 255, 255));
        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Respaldar Base de Datos"));
        jPanel7.setOpaque(false);
        jPanel7.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnRespaldar.setText("Respaldar BD");
        btnRespaldar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRespaldarActionPerformed(evt);
            }
        });
        jPanel7.add(btnRespaldar, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 40, 200, 30));

        lblMenRespaldo1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblMenRespaldo1.setForeground(new java.awt.Color(255, 0, 0));
        lblMenRespaldo1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMenRespaldo1.setText("Mensaje");
        jPanel7.add(lblMenRespaldo1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 70, 260, 20));

        lblMenRespaldo.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblMenRespaldo.setForeground(new java.awt.Color(255, 0, 0));
        lblMenRespaldo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMenRespaldo.setText("RESPALDANDO LA BASE DE DATOS");
        jPanel7.add(lblMenRespaldo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 20, 260, 20));

        jLabel36.setFont(new java.awt.Font("Tahoma", 3, 24)); // NOI18N
        jLabel36.setText("Restaurar");

        jPanel8.setBackground(new java.awt.Color(255, 255, 255));
        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("Restaurar la BD a un punto específico"));
        jPanel8.setOpaque(false);
        jPanel8.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnRestaurar.setText("Restaurar desde...");
        btnRestaurar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRestaurarActionPerformed(evt);
            }
        });
        jPanel8.add(btnRestaurar, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 40, 200, 30));

        lblMenRestaurar.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblMenRestaurar.setForeground(new java.awt.Color(255, 0, 0));
        lblMenRestaurar.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMenRestaurar.setText("RESTAURANDO LA BASE DE DATOS");
        jPanel8.add(lblMenRestaurar, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 70, 260, 20));

        listaRespaldos.setBorder(javax.swing.BorderFactory.createTitledBorder("Respaldos"));
        jScrollPane3.setViewportView(listaRespaldos);

        btnRestaurar2.setText("Restaurar Respaldo Seleccionado");
        btnRestaurar2.setOpaque(false);
        btnRestaurar2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRestaurar2ActionPerformed(evt);
            }
        });

        lblMenRestaurar2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblMenRestaurar2.setForeground(new java.awt.Color(255, 0, 0));
        lblMenRestaurar2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMenRestaurar2.setText("Mensaje");

        lblMenRestaurar1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblMenRestaurar1.setForeground(new java.awt.Color(255, 0, 0));
        lblMenRestaurar1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblMenRestaurar1.setText("Mensaje");

        jLabel34.setFont(new java.awt.Font("Tahoma", 3, 24)); // NOI18N
        jLabel34.setText("Sedes");

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));
        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Sedes que utilizan más la aplicación"));
        jPanel6.setOpaque(false);
        jPanel6.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel28.setText("Fecha Inicio:");
        jPanel6.add(jLabel28, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 30, -1, 20));

        fecIni.setBehavior(datechooser.model.multiple.MultyModelBehavior.SELECT_SINGLE);
        jPanel6.add(fecIni, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 30, 110, -1));

        jLabel29.setText("Fecha Término:");
        jPanel6.add(jLabel29, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 60, -1, 20));

        fecFin.setBehavior(datechooser.model.multiple.MultyModelBehavior.SELECT_SINGLE);
        jPanel6.add(fecFin, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 60, 110, -1));

        lblMenRep.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblMenRep.setForeground(new java.awt.Color(255, 0, 0));
        lblMenRep.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMenRep.setText("GENERANDO REPORTE!");
        jPanel6.add(lblMenRep, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 300, -1));

        btnReportes2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/impresora.png"))); // NOI18N
        btnReportes2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReportes2ActionPerformed(evt);
            }
        });
        jSplitPane1.setRightComponent(btnReportes2);

        btnReportes1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/grafico.png"))); // NOI18N
        btnReportes1.setToolTipText("Generar Reporte");
        btnReportes1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReportes1ActionPerformed(evt);
            }
        });
        jSplitPane1.setLeftComponent(btnReportes1);

        jPanel6.add(jSplitPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 30, -1, -1));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel35, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(jLabel36, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(lblMenRestaurar2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(20, 20, 20)
                                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jLabel34, javax.swing.GroupLayout.PREFERRED_SIZE, 520, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, 540, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 572, Short.MAX_VALUE)
                            .addComponent(btnRestaurar2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(lblMenRestaurar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(15, 15, 15))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel35)
                    .addComponent(jLabel36)
                    .addComponent(lblMenRestaurar2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(1, 1, 1)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26)
                        .addComponent(jLabel34)
                        .addGap(1, 1, 1)
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 338, Short.MAX_VALUE)
                        .addGap(10, 10, 10)
                        .addComponent(btnRestaurar2)
                        .addGap(7, 7, 7)))
                .addGap(10, 10, 10)
                .addComponent(lblMenRestaurar1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
        );

        panelTabPrincipal.addTab("Respaldar y Restaurar", jPanel3);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/logo_200.png"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addContainerGap())
            .addComponent(panelTabPrincipal, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(panelTabPrincipal))
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jMenuBar1.setBackground(new java.awt.Color(255, 255, 255));
        jMenuBar1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        jMenu1.setText("Ayuda");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        jMenuItem1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/ayuda.png"))); // NOI18N
        jMenuItem1.setText("Ayuda de Contenidos");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        menuIdioma.setText("Idioma");
        jMenuBar1.add(menuIdioma);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void creDirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_creDirActionPerformed
        crearDirector();
}//GEN-LAST:event_creDirActionPerformed

    private void nomDirKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nomDirKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            sedDir.requestFocus();
        } else {
            usuDir.setText(Generar.nombreUsuario(nomDir.getText()));
        }
}//GEN-LAST:event_nomDirKeyReleased

    private void btnCreSedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreSedActionPerformed
        crearSede();
}//GEN-LAST:event_btnCreSedActionPerformed

    private void nomSedKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nomSedKeyPressed
        Controlar.largoDeTexto(nomSed, 29);
    }//GEN-LAST:event_nomSedKeyPressed

    private void nomDirKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nomDirKeyPressed
        Controlar.largoDeTexto(nomDir, 49);
    }//GEN-LAST:event_nomDirKeyPressed

    private void nomSedKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nomSedKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            crearSede();
        }
    }//GEN-LAST:event_nomSedKeyReleased

    private void sedDirKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sedDirKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            emaDir.requestFocus();
        }
    }//GEN-LAST:event_sedDirKeyReleased

    private void emaDirKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_emaDirKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            crearDirector();
        }
    }//GEN-LAST:event_emaDirKeyReleased

private void btnReportes1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReportes1ActionPerformed
    if (Validar.isFechaCorrecta(fecIni.getSelectedDate(), fecFin.getSelectedDate())) {
        try {
            String fechaInicio, fechaFinal;
            //año/mes/dia
            Calendar fIni = fecIni.getSelectedDate();
            Calendar fFin = fecFin.getSelectedDate();

            fechaInicio = fIni.get(Calendar.YEAR) + "/" + (fIni.get(Calendar.MONTH) + 1) + "/" + fIni.get(Calendar.DAY_OF_MONTH);
            fechaFinal = fFin.get(Calendar.YEAR) + "/" + (fFin.get(Calendar.MONTH) + 1) + "/" + fFin.get(Calendar.DAY_OF_MONTH);

            List<Sede> sedes;
            List<EjercicioProfesor> ejerciciosProfesor = new ArrayList<>();
            List<EjercicioAlumno> ejerciciosAlumnos = new ArrayList<>();

            /*
             * OBTENGO TODAS LAS SEDES DE LA BD
             */
            sedes = getTodasLasSecciones();
            Sede sede;

            /*
             * RECORRO TODAS LAS SEDES
             */
            for (Sede s : sedes) {
                //cantidad de ejercicios profesor segun sede
                    /*
                 * ES UNA LISTA DE EJERCICIOS DEL PROFESOR POR SEDE
                 */
                ejerciciosProfesor.add(getCantidadDeEjerciciosProfesor(s, fechaInicio, fechaFinal));
                //cantidad de ejercicios alumnos segun sede
                    /*
                 * ES UNA LISTA DE EJERCICIOS DE ALUMNO POR SEDE
                 */
                ejerciciosAlumnos.add(getCantidadDeEjerciciosAlumnos(s, fechaInicio, fechaFinal));
            }

            /*
             * SI NO HAY EJERCICIOS DE PROFESOR Y DE ALUMNO, no hay datos PARA
             * HACER EL REPORTE
             */
            if (ejerciciosProfesor.isEmpty() && ejerciciosAlumnos.isEmpty()) {
                MensajeHilo.setMensaje(lblMenRep, Idioma.palabras.get(K.NO_HAY_EJER_RAN_FEC), Color.red, 5);
            } else {
                /*
                 * BUSCO LA MAYOR SEDE, ESTO ES LA SEDE QUE TIENE MAS
                 * EJERCICIOS, DE PROFESOR Y DE ALUMNO SUMADOS
                 */
                EjercicioSede mayorSede = getMayorSede(ejerciciosProfesor, ejerciciosAlumnos);

                /*
                 * OBTENGO UNA LISTA DE TODAS LAS SEDES, CON LA CANTIDAD DE
                 * EJERCICIOS DE CADA SEDE
                 */
                List<EjercicioSede> listaEjercicios = getListaEjerciciosTodasLasSedes(ejerciciosProfesor, ejerciciosAlumnos);

                /*
                 * ACA TRASNFORMO LA LISTA, PARA QUE JASPER LA PUEDA LEER Y
                 * HACER UN GRAFICO CON ELLA
                 */
                listaEjercicios = trasnformarLista(listaEjercicios);

                /*
                 * SI LA LISTA PARA HACER EL GRAFICO ESTA VACIA, NO HAY QUE
                 * HACER EL REPORTE
                 */
                if (listaEjercicios.isEmpty()) {
                    MensajeHilo.setMensaje(lblMenRep, Idioma.palabras.get(K.NO_HAY_EJER_RAN_FEC), Color.red, 5);
                } else {
                    if (mayorSede != null && listaEjercicios != null) {

                        Object[] items = {"pdf", "html", "xls"};
                        JComboBox combo = new JComboBox(items);
                        Object[] obj = {"Formato del Reporte:\n", combo};
                        Object stringArray[] = {"Generar Reporte", "Cancelar"};
                        int op;

                        op = JOptionPane.showOptionDialog(null, obj, "Reportes",
                                JOptionPane.YES_NO_OPTION, JOptionPane.PLAIN_MESSAGE,
                                null, stringArray, obj);

                        if (op == JOptionPane.YES_OPTION) {
                            //                            if (Guardar.guardarComo("Reporte Sedes " + Fecha.getFecha(true, false) + " [" + Hora.getHora() + "-" + Hora.getMinuto() + "]", "pdf, html, xls", "Guardar Reporte", "/")) {
                            final String rutaDelRespaldo = "reportes/visualizar";
                            if (!new File(rutaDelRespaldo).exists()) {
                                new File(rutaDelRespaldo).mkdirs();
                            }
                            KReportes.rutaReporte = new File(rutaDelRespaldo).getAbsolutePath() + "/" + Fecha.getAño() + Fecha.getNumeroDeMes() + Fecha.getDia() + Hora.getHora() + Hora.getMinuto() + "_REPORTE_SEDES." + combo.getSelectedItem().toString();
                            KReportes.extension = combo.getSelectedItem().toString();

                            lblMenRep.setText(Idioma.palabras.get(K.GENERANDO_REPORTE));
                            Map<String, String> parametros = new HashMap<>();
                            parametros.put("fecIni", fechaInicio);
                            parametros.put("fecFin", fechaFinal);
                            parametros.put("sede", mayorSede.getNombre());
                            parametros.put("porcentaje", Integer.toString(mayorSede.getCantidad()));
                            HiloReporte h = new HiloReporte(listaEjercicios, parametros, lblMenRep, "reportes" + P.SEPARADOR + "reporteSedes.jasper", false);
                            h.start();
                            Historial.addHistorial("Se realizó un reporte: Nombre reporte: Sedes que utilizan más la aplicación. "
                                    + "Extensión del reporte: " + KReportes.extension + ". Rango de fechas del reporte: " + fechaInicio + '-' + fechaFinal);
//                            }
                        }
                    } else {
                        MensajeHilo.setMensaje(lblMenRep, Idioma.palabras.get(K.NO_HAY_EJER_RAN_FEC), Color.red, 5);
                    }
                }
            }
        } catch (Exception e) {
            MensajeHilo.setMensaje(lblMenRep, Idioma.palabras.get(K.NO_HAY_EJER_RAN_FEC), Color.red, 5);
        }
    } else {
        MensajeHilo.setMensaje(lblMenRep, Idioma.palabras.get(K.RANGO_DE_FECHAS_INCORRECTO), Color.red, 5);
    }
}//GEN-LAST:event_btnReportes1ActionPerformed

private void btnReportes2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReportes2ActionPerformed
    if (Validar.isFechaCorrecta(fecIni.getSelectedDate(), fecFin.getSelectedDate())) {
        try {
            String fechaInicio, fechaFinal;
            //año/mes/dia
            Calendar fIni = fecIni.getSelectedDate();
            Calendar fFin = fecFin.getSelectedDate();

            fechaInicio = fIni.get(Calendar.YEAR) + "/" + (fIni.get(Calendar.MONTH) + 1) + "/" + fIni.get(Calendar.DAY_OF_MONTH);
            fechaFinal = fFin.get(Calendar.YEAR) + "/" + (fFin.get(Calendar.MONTH) + 1) + "/" + fFin.get(Calendar.DAY_OF_MONTH);

            List<Sede> sedes;
            List<EjercicioProfesor> ejerciciosProfesor = new ArrayList<>();
            List<EjercicioAlumno> ejerciciosAlumnos = new ArrayList<>();

            /*
             * OBTENGO TODAS LAS SEDES DE LA BD
             */
            sedes = getTodasLasSecciones();
            Sede sede;

            /*
             * RECORRO TODAS LAS SEDES
             */
            for (int i = 0; i < sedes.size(); i++) {
                sede = sedes.get(i);
                //cantidad de ejercicios profesor segun sede
                /*
                 * ES UNA LISTA DE EJERCICIOS DEL PROFESOR POR SEDE
                 */
                ejerciciosProfesor.add(getCantidadDeEjerciciosProfesor(sede, fechaInicio, fechaFinal));
                //cantidad de ejercicios alumnos segun sede
                /*
                 * ES UNA LISTA DE EJERCICIOS DE ALUMNO POR SEDE
                 */
                ejerciciosAlumnos.add(getCantidadDeEjerciciosAlumnos(sede, fechaInicio, fechaFinal));
            }

            /*
             * SI NO HAY EJERCICIOS DE PROFESOR Y DE ALUMNO, no hay datos PARA
             * HACER EL REPORTE
             */
            if (ejerciciosProfesor.isEmpty() && ejerciciosAlumnos.isEmpty()) {
                MensajeHilo.setMensaje(lblMenRep, Idioma.palabras.get(K.NO_HAY_EJER_RAN_FEC), Color.red, 5);
            } else {
                /*
                 * BUSCO LA MAYOR SEDE, ESTO ES LA SEDE QUE TIENE MAS
                 * EJERCICIOS, DE PROFESOR Y DE ALUMNO SUMADOS
                 */
                EjercicioSede mayorSede = getMayorSede(ejerciciosProfesor, ejerciciosAlumnos);

                /*
                 * OBTENGO UNA LISTA DE TODAS LAS SEDES, CON LA CANTIDAD DE
                 * EJERCICIOS DE CADA SEDE
                 */
                List<EjercicioSede> listaEjercicios = getListaEjerciciosTodasLasSedes(ejerciciosProfesor, ejerciciosAlumnos);

                /*
                 * ACA TRASNFORMO LA LISTA, PARA QUE JASPER LA PUEDA LEER Y
                 * HACER UN GRAFICO CON ELLA
                 */
                listaEjercicios = trasnformarLista(listaEjercicios);

                /*
                 * SI LA LISTA PARA HACER EL GRAFICO ESTA VACIA, NO HAY QUE
                 * HACER EL REPORTE
                 */
                if (listaEjercicios.isEmpty()) {
                    MensajeHilo.setMensaje(lblMenRep, Idioma.palabras.get(K.NO_HAY_EJER_RAN_FEC), Color.red, 5);
                } else {
                    if (mayorSede != null && listaEjercicios != null) {
                        lblMenRep.setText(Idioma.palabras.get(K.GENERANDO_REPORTE));
                        Map<String, String> parametros = new HashMap<>();
                        parametros.put("fecIni", fechaInicio);
                        parametros.put("fecFin", fechaFinal);
                        parametros.put("sede", mayorSede.getNombre());
                        parametros.put("porcentaje", Integer.toString(mayorSede.getCantidad()));
                        HiloReporte h = new HiloReporte(listaEjercicios, parametros, lblMenRep, "reportes" + P.SEPARADOR + "reporteSedes.jasper", true);
                        h.start();
                        Historial.addHistorial("Se envió la orden de impresión de un reporte: Nombre reporte: Sedes que utilizan más la aplicación. "
                                + "Rango de fechas del reporte: " + fechaInicio + '-' + fechaFinal);
                    } else {
                        MensajeHilo.setMensaje(lblMenRep, Idioma.palabras.get(K.NO_HAY_EJER_RAN_FEC), Color.red, 5);
                    }
                }
            }
        } catch (Exception e) {
            MensajeHilo.setMensaje(lblMenRep, Idioma.palabras.get(K.NO_HAY_EJER_RAN_FEC), Color.red, 5);
        }
    } else {
        MensajeHilo.setMensaje(lblMenRep, Idioma.palabras.get(K.RANGO_DE_FECHAS_INCORRECTO), Color.red, 5);
    }
}//GEN-LAST:event_btnReportes2ActionPerformed

private void btnRespaldarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRespaldarActionPerformed
    try {
        DatosConexion datos = getDatosConexion();
        final String rutaDelRespaldo = "respaldos";
        final String bd = datos.getBaseDeDatos();
        final String user = datos.getUser();
        final String pass = datos.getPass();
        final String server = datos.getServer();
        final File respaldo = new File(rutaDelRespaldo);

        if (!respaldo.exists()) {
            respaldo.mkdir();
        }

        hiloRespaldo = new Thread(new Runnable() {

            @Override
            public void run() {
                try {
                    estadoBotones(false);
//                    Conexion.sentencia = Conexion.con.createStatement();
//                    Conexion.sentencia.execute("BACKUP DATABASE [" + baseDeDatosARespaldar + "] TO  DISK = N'" + new File(rutaDelRespaldo).getAbsolutePath() + "/" + Fecha.getAño() + Fecha.getNumeroDeMes() + Fecha.getDia() + Hora.getHora() + Hora.getMinuto() + "_localhost_" + baseDeDatosARespaldar + ".bak' WITH NOFORMAT, NOINIT,  NAME = N'Base de datos-Copia de seguridad-" + Fecha.getFecha(true, false) + "', SKIP, NOREWIND, NOUNLOAD,  STATS = 10");
//                    Conexion.sentencia.close();
                    System.out.println("mysqldump -h " + server + " -u " + user + (!pass.equalsIgnoreCase("") ? " -p" + pass + " " : " ") + bd + " > \"" + respaldo.getAbsolutePath() + File.separator + Fecha.getAño() + Fecha.getNumeroDeMes() + Fecha.getDia() + Hora.getHora() + Hora.getMinuto() + "_" + server + "_" + bd + ".mysqlback\"");
                    Ejecutar.ejecutarComando("mysqldump -h " + server + " -u " + user + (!pass.equalsIgnoreCase("") ? " -p" + pass + " " : " ") + bd + " > \"" + respaldo.getAbsolutePath() + File.separator + Fecha.getAño() + Fecha.getNumeroDeMes() + Fecha.getDia() + Hora.getHora() + Hora.getMinuto() + "_" + server + "_" + bd + ".mysqlback\"");
                    MensajeHilo.setMensaje(lblMenRespaldo1, Idioma.palabras.get(K.RESPALDO_CREADO), Color.blue, 5);
                    estadoBotones(true);
                    actualizarListaDeRespaldos();
                    Historial.addHistorial("Se realizó un respaldo completo de la base de datos");
                } /*
                 * catch (SQLException ex) {
                 * MensajeHilo.setMensaje(lblMenRespaldo1, "No se ha podido
                 * Respaldar", Color.red, 5);
                }
                 */ finally {
                    estadoBotones(true);
                }
            }
        });
        hiloRespaldo.start();
        HiloMensajeCondicion hmc = new HiloMensajeCondicion(hiloRespaldo, lblMenRespaldo);
        hmc.start();
    } catch (ParserConfigurationException | SAXException | IOException ex) {
        Logger.getLogger(JedicAdministrador.class.getName()).log(Level.SEVERE, null, ex);
    }

}//GEN-LAST:event_btnRespaldarActionPerformed

private void btnRestaurarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRestaurarActionPerformed

    String rutaDelRespaldo = "respaldos";
    if (Abrir.abrir("mysqlback", "Restaurar BD Seleccionada", new File(rutaDelRespaldo).getAbsolutePath())) {
        final String ruta = Abrir.getRuta();
        if (Mensajes.mensajePreguntaSiNoCancelar(
                Idioma.palabras.get(K.REAL_DESEA_RESTAURAR)
                + " \n(" + this.getNombreDeArchivoBkn(new File(ruta).getName()) + ")") == Mensajes.SI) {
            try {
                restaurarDesde(ruta);
            } catch (ParserConfigurationException | SAXException | IOException ex) {
                Logger.getLogger(JedicAdministrador.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }
}//GEN-LAST:event_btnRestaurarActionPerformed

private void btnRestaurar2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRestaurar2ActionPerformed
    try {
        ModeloListaRespaldos model = (ModeloListaRespaldos) listaRespaldos.getModel();
        if (Mensajes.mensajePreguntaSiNoCancelar(Idioma.palabras.get(K.REAL_DESEA_RESTAURAR)
                + " \n(" + model.getElementAt(listaRespaldos.getSelectedIndex()) + ")") == Mensajes.SI) {
            restaurarDesde(model.getRutaDeRespaldo(listaRespaldos.getSelectedIndex()));
        }
    } catch (ParserConfigurationException | SAXException | IOException e) {
        MensajeHilo.setMensaje(lblMenRestaurar2, Idioma.palabras.get(K.SELEC_ALGUN_RESPALDO), Color.red, 5);
    }
}//GEN-LAST:event_btnRestaurar2ActionPerformed

private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
    new Thread(new Runnable() {

        @Override
        public void run() {
            Ejecutar.ejecutarComando("\"ayuda\\administrador.CHM\"");
        }
    }).start();
    Historial.addHistorial("Se consultó la ayuda del sistema");
}//GEN-LAST:event_jMenuItem1ActionPerformed

private void btnVig1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVig1ActionPerformed
    if (listaVigentes.getSelectedIndex() != -1) {
        desplegarCausalInhabilitacion("", 300);
    }
}//GEN-LAST:event_btnVig1ActionPerformed

private void btnVig2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVig2ActionPerformed
    try {
        ModeloListaDirector m = (ModeloListaDirector) listaNoVigentes.getModel();
        Director d = m.getDirectorAt(listaNoVigentes.getSelectedIndex());
        Conexion.sentencia = Conexion.con.createStatement();
        Conexion.sentencia.execute("update director set est_dir = 'vigente' where cod_dir = '" + d.getCodigo() + "'");
        Conexion.sentencia.close();
        this.llenarListaDirectores();
        limpiarDatosVigente();
        llenarTablaDirectores();
        Historial.addHistorial("Cambió a " + d + " al listado de directores vigentes");
    } catch (Exception e) {
        System.out.println(e.getMessage());
    }
}//GEN-LAST:event_btnVig2ActionPerformed

private void nomDir1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nomDir1KeyPressed
// TODO add your handling code here:
}//GEN-LAST:event_nomDir1KeyPressed

private void nomDir1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nomDir1KeyReleased
    if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
        emaDir1.requestFocus();
    } else {
        usuDir1.setText(Generar.nombreUsuario(nomDir1.getText()));
    }
}//GEN-LAST:event_nomDir1KeyReleased

private void emaDir1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_emaDir1KeyReleased
// TODO add your handling code here:
}//GEN-LAST:event_emaDir1KeyReleased

private void nomDir1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nomDir1ActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_nomDir1ActionPerformed

private void listaNoVigentesMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listaNoVigentesMouseReleased
    try {
        ModeloListaDirector m = (ModeloListaDirector) listaNoVigentes.getModel();
        Director d = m.getDirectorAt(listaNoVigentes.getSelectedIndex());
        nomDir1.setText(d.getNombre());
        usuDir1.setText(Generar.nombreUsuario(nomDir1.getText()));
//        emaDir1.setText(d.getEmail());
//        pasDir1.setText(d.getPass());
        sedDir1.setText(d.getSede());
        nomDir1.requestFocus();
        nomDir1.selectAll();
    } catch (Exception e) {
    }
}//GEN-LAST:event_listaNoVigentesMouseReleased

private void btnVig3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVig3ActionPerformed
    try {
        ModeloListaDirector m = (ModeloListaDirector) listaNoVigentes.getModel();
        Director d = m.getDirectorAt(listaNoVigentes.getSelectedIndex());
        String usuario = usuDir1.getText().trim();
        String nombreDirectorNuevo = nomDir1.getText().trim();
        //Eliminar al director seleccionado
        Conexion.sentencia = Conexion.con.createStatement();
        Conexion.sentencia.execute("update director set est_dir = 'eliminado' where cod_dir = '" + d.getCodigo() + "'");
        Conexion.sentencia.close();

        if (Buscar.isDirector(usuario)) {
            int numeroSiguiente = Buscar.getNextContador("director", "usu_dir", usuario);
            usuario = usuario + numeroSiguiente;
        }
        //inserto el director nuevo
        insertar("director", "nom_dir, usu_dir, pas_dir, cod_sed, ema_dir, est_dir", "('" + nombreDirectorNuevo + "','" + usuario + "','" + Generar.codigoRandom(12) + "'," + d.getCodSede() + ", '" + emaDir1.getText().trim() + "', 'vigente');");

        String cod = null;
        Conexion.sentencia = Conexion.con.createStatement();
        Conexion.rs = Conexion.sentencia.executeQuery("select cod_dir from director where usu_dir = '" + usuario + "'");
        if (Conexion.rs.next()) {
            cod = Conexion.rs.getString("cod_dir");
        }
        Conexion.sentencia.close();

        //Aca borro el codDir en la tabla de los profes, y pongo el del director nuevo
        Conexion.sentencia = Conexion.con.createStatement();
        Conexion.sentencia.execute("update profesor set cod_dir = " + cod + " where cod_dir = '" + d.getCodigo() + "'");
        Conexion.sentencia.close();

        llenarTablaDirectores();
        //crear al nuevo director

        this.llenarListaDirectores();
        MensajeHilo.setMensaje(lblMenDir2, Idioma.palabras.get(K.SE_HA_ASIG_EL_DIR_SED) + '\"' + d.getSede() + "\" Director: \"" + nombreDirectorNuevo + "\" ", Color.blue, 10);
        limpiarDatosVigente();

        Historial.addHistorial("Se realizó un reemplazo de director: " + d + " fue reemplazado por [director=" + nombreDirectorNuevo + ", usuario=" + usuario + ", sede=" + d.getSede() + ']');
    } catch (Exception e) {
        System.out.println(e.getMessage());
    }
}//GEN-LAST:event_btnVig3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (listaNoVigentes.getSelectedIndex() != -1) {
            ModeloListaDirector m = (ModeloListaDirector) listaNoVigentes.getModel();
            Director d = m.getDirectorAt(listaNoVigentes.getSelectedIndex());
            List<Causal> causales = getCausales(d);
            if (causales != null) {
                limpiarFormularioCausales();
                for (Causal c : causales) {
                    jComboBox1.addItem(c);
                }
                desplegarCausal(causales.get(0));
                formCausal.setBounds(0, 0, 369, 347);
                formCausal.setLocationRelativeTo(null);
                formCausal.setVisible(true);
                formCausal.setResizable(false);
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        try {
            Causal c = (Causal) jComboBox1.getSelectedItem();
            desplegarCausal(c);
        } catch (Exception e) {
        }
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void formCausalComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formCausalComponentResized
        System.out.println(formCausal.getWidth() + " " + formCausal.getHeight());
    }//GEN-LAST:event_formCausalComponentResized

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        if (Mensajes.mensajePreguntaSiNo("¿Realmente desea rescatar las sedes desde la base de datos central?") == Mensajes.SI) {
            Thread h = new Thread(new Runnable() {

                @Override
                public void run() {
                    insertar("sede", "nom_sed", "('Arica');");
                    insertar("sede", "nom_sed", "('Iquique');");
                    insertar("sede", "nom_sed", "('Calama');");
                    insertar("sede", "nom_sed", "('Antofagasta');");
                    insertar("sede", "nom_sed", "('Copiapo');");
                    insertar("sede", "nom_sed", "('La Serena');");
                    insertar("sede", "nom_sed", "('Valparaiso');");
                    insertar("sede", "nom_sed", "('Apoquindo');");
                    insertar("sede", "nom_sed", "('Maipu');");
                    insertar("sede", "nom_sed", "('Renca');");
                    insertar("sede", "nom_sed", "('Perez Rosales');");
                    insertar("sede", "nom_sed", "('Santiago centro');");
                    insertar("sede", "nom_sed", "('Santiago sur');");
                    insertar("sede", "nom_sed", "('Rancagua');");
                    insertar("sede", "nom_sed", "('Curico');");
                    insertar("sede", "nom_sed", "('Talca');");
                    insertar("sede", "nom_sed", "('Chillan');");
                    insertar("sede", "nom_sed", "('Concepcion-Talcahuano');");
                    insertar("sede", "nom_sed", "('Los Angeles');");
                    insertar("sede", "nom_sed", "('Temuco');");
                    insertar("sede", "nom_sed", "('Valdivia');");
                    insertar("sede", "nom_sed", "('Osorno');");
                    insertar("sede", "nom_sed", "('Puerto Montt');");
                    insertar("sede", "nom_sed", "('Coyhaique');");
                    insertar("sede", "nom_sed", "('Punta Arenas');");

                    llenarTablaSedes();
                    llenarComboSedes();

                    MensajeHilo.setMensaje(lblMsn, "Sedes cargadas correctamente. Cantidad: 25", Color.blue, 7);
                    Historial.addHistorial("Se rescató sedes desde BD Central");
                }
            });
            cargarHilo(h, jButton3);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        if (Mensajes.mensajePreguntaSiNo("¿Realmente desea cargar a los directores desde la BD CENTRAL?") == Mensajes.SI) {
            Thread h = new Thread(new Runnable() {

                @Override
                public void run() {
                    List<Director> directores = new ArrayList();

                    HojaExcel h = Excel.leerArchivo("directores.xls", 0);
                    String[][] contenido = h.getContenido();
                    for (int i = 0; i < contenido.length; i++) {
                        Director d = new Director();
                        for (int j = 0; j < contenido[i].length; j++) {
                            switch (j) {
                                case 0: {//nombre
                                    d.setNombre(contenido[i][j]);
                                    break;
                                }
                                case 1: {//user
                                    d.setUsuario(contenido[i][j]);
                                    break;
                                }
                                case 2: {//sede
                                    d.setSede(contenido[i][j]);
                                    break;
                                }
                                case 3: {//mail
                                    d.setEmail(contenido[i][j]);
                                    break;
                                }
                            }
                        }
                        directores.add(d);
                    }

                    for (Director dir : directores) {
                        dir.setPass(Generar.codigoRandom(12));
                        dir.setSede(Integer.toString(Utilidades.obtenerIdentificador("sede", "cod_sed", "nom_sed", "'" + dir.getSede() + "'")));
                        if (Buscar.isDirector(dir.getUsuario())) {
                            int numeroSiguiente = Buscar.getNextContador("director", "usu_dir", dir.getUsuario());
                            dir.setUsuario(dir.getUsuario() + numeroSiguiente);
                        }
                        insertar("director", "nom_dir, usu_dir, pas_dir, cod_sed, ema_dir, est_dir",
                                "('" + dir.getNombre() + "','" + dir.getUsuario() + "','" + dir.getPass() + "'," + dir.getSede() + ", '" + dir.getEmail() + "', 'vigente');");
                        //                System.out.println("('" + dir.getNombre() + "','" + dir.getUsuario() + "','" + dir.getPass() + "'," + dir.getSede() + ", '" + dir.getEmail() + "', 'vigente');");
                    }
                    llenarTablaDirectores();
                    llenarListaDirectores();
                    MensajeHilo.setMensaje(lblMsn, "Carga de directores completa.", Color.blue, 5);
                    Historial.addHistorial("Rescató directores desde BD Central");
                }
            });
            cargarHilo(h, jButton4);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void usuAdmKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_usuAdmKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            passAdm.requestFocus();
        }
    }//GEN-LAST:event_usuAdmKeyReleased

    private void passAdmKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_passAdmKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            iniciarSesion();
        }
    }//GEN-LAST:event_passAdmKeyReleased

    private void lblRecuperarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblRecuperarMouseEntered
        this.form_inicio_sesion.setCursor(Cursor.HAND_CURSOR);
    }//GEN-LAST:event_lblRecuperarMouseEntered

    private void lblRecuperarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblRecuperarMouseExited
        this.form_inicio_sesion.setCursor(Cursor.DEFAULT_CURSOR);
    }//GEN-LAST:event_lblRecuperarMouseExited

    private void lblRecuperarMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblRecuperarMouseReleased
        String usuAdmin = usuAdm.getText().trim();

        if (usuAdmin.equalsIgnoreCase("")) {
            MensajeHilo.setMensaje(lblMenSesion, "Debe escribir el nombre de usuario primero", Color.red, 7);
        } else if (!Conectividad.isConectado()) {
            MensajeHilo.setMensaje(lblMenSesion, "Al parecer no posee una conexión a internet", Color.red, 7);
        } else {
            hp = new HiloRecuperarClave(lblMenSesion, lblMen);
            hp.setDatos("SELECT nom_adm, pas_adm, ema_adm, sysdate() as 'fecha' FROM administrador WHERE usu_adm = '" + usuAdmin + "'", "ema_adm", "nom_adm", "pas_adm", "administrador", usuAdmin);
            hp.start();
            hb = new HiloGif(hp, formBarra, lblMen);
            hb.start();
        }
    }//GEN-LAST:event_lblRecuperarMouseReleased

    private void inicioSesionBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inicioSesionBotonActionPerformed
        iniciarSesion();
    }//GEN-LAST:event_inicioSesionBotonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        this.setVisible(false);
        usuAdm.requestFocus();
        Historial.addHistorial("Cerró sesión");
        this.form_inicio_sesion.setVisible(true);
    }//GEN-LAST:event_formWindowClosing

    private void form_inicio_sesionWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_form_inicio_sesionWindowClosing
        Historial.addHistorialGeneral("Se terminó la ejecución del sistema JEDIC Administrador");
        System.exit(0);
    }//GEN-LAST:event_form_inicio_sesionWindowClosing

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        this.formCausal.setVisible(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void form_inicio_sesionComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_form_inicio_sesionComponentResized
        System.out.println(form_inicio_sesion.getWidth() + "-" + form_inicio_sesion.getHeight());
    }//GEN-LAST:event_form_inicio_sesionComponentResized

    private void listaEliminadosMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listaEliminadosMouseReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_listaEliminadosMouseReleased

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        if (listaEliminados.getSelectedIndex() != -1) {
            ModeloListaDirector m = (ModeloListaDirector) listaEliminados.getModel();
            Director d = m.getDirectorAt(listaEliminados.getSelectedIndex());
            List<Causal> causales = getCausales(d);
            if (causales != null) {
                limpiarFormularioCausales();
                for (Causal c : causales) {
                    jComboBox1.addItem(c);
                }
                desplegarCausal(causales.get(0));
                formCausal.setBounds(0, 0, 369, 347);
                formCausal.setLocationRelativeTo(null);
                formCausal.setVisible(true);
                formCausal.setResizable(false);
            }
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        hp.interrupt();
        hb.interrupt();
        formBarra.setVisible(false);
    }//GEN-LAST:event_jButton8ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            Logger.getLogger(JedicAdministrador.class.getName()).log(Level.SEVERE, null, ex);
        }

        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                try {
                    new JedicAdministrador().setVisible(false);
                } catch (ParserConfigurationException | SAXException | IOException | ClassNotFoundException | SQLException ex) {
                    Logger.getLogger(JedicAdministrador.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCreSed;
    private javax.swing.JButton btnReportes1;
    private javax.swing.JButton btnReportes2;
    private javax.swing.JButton btnRespaldar;
    private javax.swing.JButton btnRestaurar;
    private javax.swing.JButton btnRestaurar2;
    private javax.swing.JButton btnVig1;
    private javax.swing.JButton btnVig2;
    private javax.swing.JButton btnVig3;
    private javax.swing.JButton creDir;
    private javax.swing.JTextField emaDir;
    private javax.swing.JTextField emaDir1;
    private datechooser.beans.DateChooserCombo fecFin;
    private datechooser.beans.DateChooserCombo fecIni;
    private javax.swing.JFrame formBarra;
    private javax.swing.JFrame formCausal;
    private javax.swing.JFrame form_inicio_sesion;
    private javax.swing.JButton inicioSesionBoton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton8;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JLabel lblLisDir;
    private javax.swing.JLabel lblLisSed;
    private javax.swing.JLabel lblMail;
    private javax.swing.JLabel lblMen;
    private javax.swing.JLabel lblMenDir2;
    private javax.swing.JLabel lblMenDir3;
    private javax.swing.JLabel lblMenRep;
    private javax.swing.JLabel lblMenRespaldo;
    private javax.swing.JLabel lblMenRespaldo1;
    private javax.swing.JLabel lblMenRestaurar;
    private javax.swing.JLabel lblMenRestaurar1;
    private javax.swing.JLabel lblMenRestaurar2;
    private javax.swing.JLabel lblMenSesion;
    private javax.swing.JLabel lblMsn;
    private javax.swing.JLabel lblNomDir;
    private javax.swing.JLabel lblNomSed;
    private javax.swing.JLabel lblRecuperar;
    private javax.swing.JLabel lblSed;
    private javax.swing.JLabel lblUser;
    private javax.swing.JList listaEliminados;
    private javax.swing.JList listaNoVigentes;
    private javax.swing.JList listaRespaldos;
    private javax.swing.JList listaVigentes;
    private javax.swing.JMenu menuIdioma;
    private javax.swing.JTextField nomDir;
    private javax.swing.JTextField nomDir1;
    private javax.swing.JTextField nomSed;
    private javax.swing.JTabbedPane panelTabPrincipal;
    private javax.swing.JPanel panel_crear_sede;
    private javax.swing.JPasswordField passAdm;
    private javax.swing.JComboBox sedDir;
    private javax.swing.JLabel sedDir1;
    private javax.swing.JTable tabDir;
    private javax.swing.JTable tabSed;
    private javax.swing.JTextField usuAdm;
    private javax.swing.JLabel usuDir;
    private javax.swing.JLabel usuDir1;
    // End of variables declaration//GEN-END:variables

    /**
     *
     * @param tabla
     * @param values se debe pasar los valores con parentesis
     *
     */
    private boolean insertar(final String tabla, final String insertarEn, final String values) {
        try {
            Conexion.sentencia = Conexion.con.createStatement();
            Conexion.sentencia.execute("insert into " + tabla + "(" + insertarEn + ") values" + values);
            return true;
        } catch (SQLException ex) {
            Logger.getLogger(JedicAdministrador.class.getName()).log(Level.SEVERE, null, ex);
            return false;
        }
    }

    private void llenarTablaDirectores() {
        Utilidades.dibujarTabla(tabDir, encTabDir,
                "director.nom_dir, sede.nom_sed, director.usu_dir", "sede, director "
                + "WHERE sede.cod_sed = director.cod_sed and director.est_dir = 'vigente' ORDER BY `nom_sed` ASC");
//        tabDir.setEnabled(false);
    }

    private void llenarTablaSedes() {
        Utilidades.dibujarTabla(tabSed, encTabSed, "nom_sed", "sede order by nom_sed asc");
        tabSed.setEnabled(false);
    }

    private void llenarComboSedes() {
        Utilidades.llenarCombo(sedDir, "sede order by nom_sed asc", "nom_sed");
    }

    private void crearSede() {
        if (!Buscar.isSede(nomSed.getText())) {
            if (!Validar.isJTextComponentVacio(nomSed)) {
                if (!Validar.isJTextComponentConSimbolos(nomSed)) {
                    if (insertar("sede", "nom_sed", "('" + nomSed.getText().trim() + "');")) {
                        llenarTablaSedes();
                        llenarComboSedes();

                        MensajeHilo.setMensaje(lblMsn, Idioma.palabras.get(K.SEDE_AGREGADA_EXITOSAMENTE) + ": " + nomSed.getText(), Color.blue, 7);//id=1

                        Historial.addHistorial("Creó una sede: " + nomSed.getText().trim());
                        nomSed.setText("");
                        nomSed.requestFocus();
                    } else {
                        System.out.println("Error de conexion al intentar crear una sede");
                    }
                } else {
                    MensajeHilo.setMensaje(lblMsn, Idioma.palabras.get(K.ESCRIBA_UNA_SEDE_CORRECT), Color.red, 3);//id 1 tag error
                }
            } else {
                MensajeHilo.setMensaje(lblMsn, Idioma.palabras.get(K.ESCRIBA_UNA_SEDE), Color.red, 3); //id 2
            }
        } else {
            MensajeHilo.setMensaje(lblMsn, Idioma.palabras.get(K.SEDE_YA_INGRESADA), Color.red, 3);//id3 
            nomSed.selectAll();
            nomSed.requestFocus();
        }
    }

    private void crearDirector() {
        if (sedDir.getItemCount() != 0) {
            List<JTextComponent> listaComp = new ArrayList<>();
            listaComp.add(nomDir);
            listaComp.add(emaDir);
            if (!Validar.isJTextComponentVacio(listaComp)) {
                if (!Validar.isJTextComponentConSimbolos(nomDir)) {
                    if (Validar.isMailCorrecto(emaDir.getText())) {
                        if (Validar.isNombreDeUsuarioCorrecto(usuDir.getText())) {
                            String nombre, usuario, clave, sede, email;
                            int sedeID;

                            email = emaDir.getText().trim();
                            nombre = nomDir.getText().trim();
                            usuario = usuDir.getText().trim();
                            clave = Generar.codigoRandom(12);
                            sede = sedDir.getSelectedItem().toString().trim();

                            sedeID = Utilidades.obtenerIdentificador("sede", "cod_sed", "nom_sed", "'" + sede + "'");
                            if (Buscar.isDirector(usuario)) {
                                int numeroSiguiente = Buscar.getNextContador("director", "usu_dir", usuario);
                                usuario = usuario + numeroSiguiente;
                                MensajeHilo.setMensaje(lblMenDir3, Idioma.palabras.get(K.EL_USU_YA_SE_ENC_EN_LA_BD) + usuario + "\"", Color.red, 5);
//                                insertar("director","nom_dir, usu_dir, pas_dir, cod_sed, ema_dir, est_dir", "('"+nombre+"','"+usuario+"','"+clave+"',"+sedeID+", '"+email+"', 'vigente');");
                            }
                            if (insertar("director", "nom_dir, usu_dir, pas_dir, cod_sed, ema_dir, est_dir",
                                    "('" + nombre + "','" + usuario + "','" + clave + "'," + sedeID + ", '" + email + "', 'vigente');")) {
                                Historial.addHistorial("Se ha creado un director: [director=" + nombre + ", usuario=" + usuario + ", sede=" + sede + ']');
                            } else {
                                System.out.println("Error al intentar crear director");
                            }
//                            }else{
//                                insertar("director","nom_dir, usu_dir, pas_dir, cod_sed, ema_dir, est_dir", "('"+nombre+"','"+usuario+"','"+clave+"',"+sedeID+", '"+email+"', 'vigente');");
//                            }
                            llenarTablaDirectores();
                            this.llenarListaDirectores();


                            MensajeHilo.setMensaje(lblMsn, Idioma.palabras.get(K.DIR_CRE_EXITO) + ": " + nombre, Color.blue, 5);

                            nomDir.setText("");
                            usuDir.setText("");
                            emaDir.setText("");
                            sedDir.setSelectedIndex(0);
                            nomDir.requestFocus();
                        } else {
                            MensajeHilo.setMensaje(lblMsn, Idioma.palabras.get(K.NOM_DIR_INCORR), Color.red, 3);
                            nomDir.selectAll();
                            nomDir.requestFocus();
                        }
                    } else {
                        MensajeHilo.setMensaje(lblMsn, Idioma.palabras.get(K.MAIL_INCOR), Color.red, 3);
                        emaDir.selectAll();
                        emaDir.requestFocus();
                    }
                } else {
                    MensajeHilo.setMensaje(lblMsn, Idioma.palabras.get(K.NO_SE_PERMITE_NUN_SIM), Color.red, 3);
                }
            } else {
                MensajeHilo.setMensaje(lblMsn, Idioma.palabras.get(K.FALTAN_DATOS), Color.red, 3);
            }
        } else {
            MensajeHilo.setMensaje(lblMsn, Idioma.palabras.get(K.PRIMERO_DEBE_CREAR_SEDE), Color.red, 3);
        }
    }

    private List<Sede> getTodasLasSecciones() {
        List<Sede> sedes = new ArrayList<>();
        try {
            Conexion.sentencia = Conexion.con.createStatement();
            Conexion.rs = Conexion.sentencia.executeQuery("select nom_sed from sede");
            while (Conexion.rs.next()) {
                sedes.add(new Sede(Conexion.rs.getString("nom_sed")));
            }
            Conexion.sentencia.close();
            return sedes;
        } catch (SQLException ex) {
            Logger.getLogger(JedicAdministrador.class.getName()).log(Level.SEVERE, null, ex);
            return null;
        }
    }

    private EjercicioProfesor getCantidadDeEjerciciosProfesor(Sede sede, String fechaInicio, String fechaFinal) {

        int cont = 0;
        EjercicioProfesor ep;

        try {
            Conexion.sentencia = Conexion.con.createStatement();
            String query = "select count(0) as cont "
                    + "from profesor, seccion, ejercicio_profesor, director, sede "
                    + "where profesor.cod_pro = seccion.cod_pro and sede.cod_sed = director.cod_sed "
                    + "and seccion.cod_sec = ejercicio_profesor.cod_sec and "
                    + "profesor.cod_dir = director.cod_dir and sede.nom_sed = '" + sede.getNombre() + "'"
                    + "and ejercicio_profesor.fec_cre >= '" + fechaInicio + "' and ejercicio_profesor.fec_cre <= '" + fechaFinal + "'";
            Conexion.rs = Conexion.sentencia.executeQuery(query);
            System.out.println("Linea 1228: " + query);

            if (Conexion.rs.next()) {
                cont = Conexion.rs.getInt("cont");
            }
            Conexion.sentencia.close();
//            sacar solo los ejercicios para todas las secciones
            String query2 = "select distinct ejercicio_profesor.cod_eje from "
                    + "profesor, seccion, ejercicio_profesor, director, sede "
                    + "where sede.cod_sed = director.cod_sed "
                    + "and director.cod_dir = profesor.cod_dir "
                    + "and profesor.cod_pro = seccion.cod_pro "
                    + "and profesor.cod_pro = ejercicio_profesor.cod_pro "
                    + "and ejercicio_profesor.cod_sec is null "
                    + "and sede.nom_sed = '" + sede.getNombre() + "' "
                    + "and ejercicio_profesor.fec_cre >= '" + fechaInicio + "' "
                    + "and ejercicio_profesor.fec_cre <= '" + fechaFinal + "'";

            Conexion.sentencia = Conexion.con.createStatement();
            Conexion.rs = Conexion.sentencia.executeQuery(query2);
            System.out.println("Linea 1248: " + query2);

            int c2 = 0;
            while (Conexion.rs.next()) {
                c2++;
            }
            cont += c2;
            Conexion.sentencia.close();
            ep = new EjercicioProfesor(cont, sede.getNombre());
            return ep;
        } catch (SQLException ex) {
            Logger.getLogger(JedicAdministrador.class.getName()).log(Level.SEVERE, null, ex);
            return null;
        }
    }

    private EjercicioAlumno getCantidadDeEjerciciosAlumnos(Sede sede, String fechaInicio, String fechaFinal) {
        int cont = 0;
        EjercicioAlumno ea;

        try {
            Conexion.sentencia = Conexion.con.createStatement();
            String query = "select count(0) as cont "
                    + "from sede, director, profesor, seccion, alumno, ejercicio_alumno "
                    + "where sede.cod_sed = director.cod_sed and director.cod_dir = profesor.cod_dir and "
                    + "profesor.cod_pro = seccion.cod_pro and seccion.cod_sec = alumno.cod_sec and "
                    + "alumno.cod_alu = ejercicio_alumno.cod_alu and sede.nom_sed = '" + sede.getNombre() + "' and "
                    + "ejercicio_alumno.fec_eje between '" + fechaInicio + "' and '" + fechaFinal + "'";
            Conexion.rs = Conexion.sentencia.executeQuery(query);

            System.out.println("linea 1256: " + query);
            if (Conexion.rs.next()) {
                cont = Conexion.rs.getInt("cont");
            }
            Conexion.sentencia.close();
            ea = new EjercicioAlumno(cont, sede.getNombre());
            return ea;
        } catch (SQLException ex) {
            Logger.getLogger(JedicAdministrador.class.getName()).log(Level.SEVERE, null, ex);
            return null;
        }
    }

    private EjercicioSede getMayorSede(List<EjercicioProfesor> ejerciciosProfesor, List<EjercicioAlumno> ejerciciosAlumnos) {
        List<EjercicioSede> listaEjercicios = new ArrayList<>();
        int ejercicios;
        EjercicioSede ejerciciosMayor = null;
        for (int i = 0; i < ejerciciosProfesor.size(); i++) {
            ejercicios = ejerciciosProfesor.get(i).getCantidad() + ejerciciosAlumnos.get(i).getCantidad();
            listaEjercicios.add(new EjercicioSede(ejercicios, ejerciciosAlumnos.get(i).getNombre()));
        }

        for (int i = 0; i < listaEjercicios.size(); i++) {
            System.out.println(listaEjercicios.get(i).getNombre());
            System.out.println(listaEjercicios.get(i).getCantidad());
            if (i == 0) {
                ejerciciosMayor = listaEjercicios.get(i);
            } else if (listaEjercicios.get(i).getCantidad() > ejerciciosMayor.getCantidad()) {
                ejerciciosMayor = listaEjercicios.get(i);
            }
        }
        return ejerciciosMayor;
    }

    private List<EjercicioSede> getListaEjerciciosTodasLasSedes(List<EjercicioProfesor> ejerciciosProfesor, List<EjercicioAlumno> ejerciciosAlumnos) {
        List<EjercicioSede> listaEjercicios = new ArrayList<>();
        int ejercicios;
        for (int i = 0; i < ejerciciosProfesor.size(); i++) {
            ejercicios = ejerciciosProfesor.get(i).getCantidad() + ejerciciosAlumnos.get(i).getCantidad();
            listaEjercicios.add(new EjercicioSede(ejercicios, ejerciciosAlumnos.get(i).getNombre()));
        }
        return listaEjercicios;
    }

    /**
     *
     * @param listaEjercicios
     * @return
     */
    private List<EjercicioSede> trasnformarLista(List<EjercicioSede> listaEjercicios) {
        EjercicioSede es;
        List<EjercicioSede> lista = new ArrayList<>();
        for (int i = 0; i < listaEjercicios.size(); i++) {
            es = listaEjercicios.get(i);

            for (int j = 0; j < es.getCantidad(); j++) {
                lista.add(new EjercicioSede(0, es.getNombre()));
            }
        }
        return lista;
    }

    private void estadoBotones(boolean e) {
        nomSed.setEditable(e);
        btnCreSed.setEnabled(e);
        creDir.setEnabled(e);
        btnReportes1.setEnabled(e);
        btnReportes2.setEnabled(e);
        btnRespaldar.setEnabled(e);
        btnRestaurar.setEnabled(e);
        btnRestaurar2.setEnabled(e);
        btnVig1.setEnabled(e);
        btnVig2.setEnabled(e);
        btnVig3.setEnabled(e);
    }

    private String getNombreDeArchivoBkn(String nombreArchivo) {
        try{
            String[] st = nombreArchivo.split("_");
            String st2 = st[0];
            String hora, minutos, ano, mes, dia;
            //el substring es con indices del array
            //pones el indice que quieres que se corte lo incluye, y el otro parametros
            //es el indice final mas 1
            ano = st2.substring(0, 4);
            mes = st2.substring(4, 6);
            dia = st2.substring(6, 8);
            hora = st2.substring(8, 10);
            minutos = st2.substring(10, 12);
            return "Respaldo del " + dia + " de " + Fecha.getNombreDeMes(Integer.parseInt(mes)) + " de " + ano + " (" + hora + ":" + minutos + " hrs.)";
        }catch(Exception e){
            return nombreArchivo;
        }
    }

    private void actualizarListaDeRespaldos() {
        listaRespaldos.setCellRenderer(new CRBaseDeDatos());
        if (new File("respaldos").exists()) {
            listaRespaldos.setModel(new ModeloListaRespaldos(new File("respaldos").listFiles()));
        } else {
            listaRespaldos.setModel(new DefaultListModel());
        }
    }

    private void restaurarDesde(final String ruta) throws ParserConfigurationException, SAXException, IOException {
        DatosConexion datos = getDatosConexion();
        final String bd = datos.getBaseDeDatos();
        final String user = datos.getUser();
        final String pass = datos.getPass();
        final String server = datos.getServer();

        hiloRestaurar = new Thread(new Runnable() {

            @Override
            public void run() {
                try {
                    estadoBotones(false);
                    Ejecutar.ejecutarComando("mysql -h " + server + " -u " + user + (!pass.equalsIgnoreCase("") ? " -p" + pass + " " : " ") + bd + " < \"" + ruta + "\"");
                    llenarTablaSedes();
                    llenarComboSedes();
                    llenarTablaDirectores();
                    llenarListaDirectores();
                    MensajeHilo.setMensaje(lblMenRestaurar1, Idioma.palabras.get(K.RESTAUR_REALIZADA) + ". (" + getNombreDeArchivoBkn(new File(ruta).getName()) + ")", Color.blue, 5);
                    Historial.addHistorial("Se restauró la base de datos completa. Archivo de restauración: " + ruta);
                } finally {
                    estadoBotones(true);
                }
            }
        });
        hiloRestaurar.start();
        HiloMensajeCondicion hmc = new HiloMensajeCondicion(hiloRestaurar, lblMenRestaurar);
        hmc.start();
    }

    private void llenarListaDirectores() {
        List<Director> vigentes, noVigentes, eliminado;
        vigentes = new ArrayList<>();
        noVigentes = new ArrayList<>();
        eliminado = new ArrayList<>();
        String cod, nom, usu, pas, sed, ema, est, codSed;

        try {
            Conexion.sentencia = Conexion.con.createStatement();
            Conexion.rs = Conexion.sentencia.executeQuery(
                    "select cod_dir, nom_dir, usu_dir, pas_dir, director.cod_sed ,nom_sed, ema_dir, est_dir "
                    + "from director, sede where director.cod_sed = sede.cod_sed ORDER BY `nom_sed` ASC");
            while (Conexion.rs.next()) {
                cod = Conexion.rs.getString("cod_dir");
                nom = Conexion.rs.getString("nom_dir");
                usu = Conexion.rs.getString("usu_dir");
                pas = Conexion.rs.getString("pas_dir");
                codSed = Conexion.rs.getString("cod_sed");
                sed = Conexion.rs.getString("nom_sed");
                ema = Conexion.rs.getString("ema_dir");
                est = Conexion.rs.getString("est_dir");
                Director d = new Director(cod, nom, usu, pas, codSed, sed, ema, est);

                if (d.getEstado().equalsIgnoreCase("vigente")) {
                    vigentes.add(d);
                } else if (d.getEstado().equalsIgnoreCase("no-vigente") ) {
                    noVigentes.add(d);
                } else if(d.getEstado().equalsIgnoreCase("eliminado")){
                    eliminado.add(d);
                }
            }   
            Conexion.sentencia.close();
            listaVigentes.setModel(new ModeloListaDirector(vigentes));
            listaNoVigentes.setModel(new ModeloListaDirector(noVigentes));
            listaEliminados.setModel(new ModeloListaDirector(eliminado));
        } catch (SQLException ex) {
            Logger.getLogger(JedicAdministrador.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void limpiarDatosVigente() {
        nomDir1.setText("");
        usuDir1.setText("");
        emaDir1.setText("");
//        pasDir1.setText("");
        sedDir1.setText("");
    }

    private void conectarBD() throws ParserConfigurationException, SAXException, IOException, ClassNotFoundException, SQLException {
        Conexion.conectar(getDatosConexion());
    }

    private DatosConexion getDatosConexion() throws ParserConfigurationException, SAXException, IOException {

        final Tag conexion = DOM.procesarArchivoXMLDom(new File(Rutas.RUTA_CONFIG_BD));

        return new DatosConexion() {

            @Override
            public String getServer() {
                Tag server = getTag("server");
                return server.getContenido();
            }

            @Override
            public String getUser() {
                return getAtributo("user", conexion).getValor();
            }

            @Override
            public String getPass() {
                return getAtributo("pass", conexion).getValor();
            }

            @Override
            public String getBaseDeDatos() {
                Tag bd = getTag("baseDeDatos");
                return bd.getContenido();
            }

            private Tag getTag(String nomTag) {
                for (Tag t : conexion.getTagsHijos()) {
                    if (t.getNombre().equalsIgnoreCase(nomTag)) {
                        return t;
                    }
                }
                return null;
            }

            private Atributo getAtributo(String nomAtributo, Tag tag) {
                for (Atributo a : tag.getAtributos()) {
                    if (a.getNombre().equalsIgnoreCase(nomAtributo)) {
                        return a;
                    }
                }
                return null;
            }
        };
    }

    private void cargarIdiomaEnComponentes() {
        this.setTitle(Idioma.palabras.get(K.TITULO_PRINCIPAL));

        //Tablas
        encTabSed[0] = Idioma.palabras.get(K.SEDES);

        encTabDir[0] = Idioma.palabras.get(K.DIRECTOR);
        encTabDir[1] = Idioma.palabras.get(K.SEDE);
        encTabDir[2] = Idioma.palabras.get(K.USUARIO);
//        encTabDir[3] = Idioma.palabras.get(K.CONTRASENA);

        llenarTablaSedes();
        llenarTablaDirectores();

        //PANEL CREAR SEDE
        panelTabPrincipal.setTitleAt(0, Idioma.palabras.get(K.CREAR_SEDE));
        lblNomSed.setText(Idioma.palabras.get(K.NOMBRE_SEDE));
        btnCreSed.setText(Idioma.palabras.get(K.CREAR_SEDE).split("/")[0]);
        lblLisSed.setText(Idioma.palabras.get(K.LISTADO_SEDES));

        //PANEL CREAR DIRECTOR
//        panelTabPrincipal.setTitleAt(1, Idioma.palabras.get(K.CREAR_DIRECTOR));
        lblNomDir.setText(Idioma.palabras.get(K.NOMBRE_DIRECTOR));
        lblUser.setText(Idioma.palabras.get(K.USUARIO));
        lblSed.setText(Idioma.palabras.get(K.SEDE));
        lblMail.setText(Idioma.palabras.get(K.MAIL));
        creDir.setText(Idioma.palabras.get(K.CREAR_DIRECTOR));
        lblLisDir.setText(Idioma.palabras.get(K.LISTADO_DIR_CARR));

        //PANEL MODIFICAR DIRECTOR
        panelTabPrincipal.setTitleAt(1, Idioma.palabras.get(K.MODIFICAR_DIRECTOR));
        listaVigentes.setBorder(javax.swing.BorderFactory.createTitledBorder(Idioma.palabras.get(K.DIRECTORES_VIGENTES)));
        listaNoVigentes.setBorder(javax.swing.BorderFactory.createTitledBorder(Idioma.palabras.get(K.DIRECTORES_NO_VIGENTES)));
        jLabel9.setText(Idioma.palabras.get(K.NOMBRE_DIRECTOR));
        jLabel10.setText(Idioma.palabras.get(K.USUARIO));
        jLabel13.setText(Idioma.palabras.get(K.SEDE));
        jLabel12.setText(Idioma.palabras.get(K.MAIL));
//        jLabel11.setText(Idioma.palabras.get(K.CONTRASENA));
        btnVig3.setText(Idioma.palabras.get(K.REEMPLAZAR_DIRECTOR));

        //PANEL REPORTES
        jLabel34.setText(Idioma.palabras.get(K.SEDES) + " (" + Idioma.palabras.get(K.REPORTES) + ")");
        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(Idioma.palabras.get(K.SEDES_UTIL_MAS_APLI)));
        jLabel28.setText(Idioma.palabras.get(K.FECHA_INICIO));
        jLabel29.setText(Idioma.palabras.get(K.FECHA_TERMINO));

        //PANEL RESTAURAR Y RESPALDAR
        panelTabPrincipal.setTitleAt(2, Idioma.palabras.get(K.HERRAMIENTAS));
        jLabel35.setText(Idioma.palabras.get(K.RESPALDO));
        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(Idioma.palabras.get(K.RESPALDAR_BD)));
        btnRespaldar.setText(Idioma.palabras.get(K.RESPALDAR_BD));
        jLabel36.setText(Idioma.palabras.get(K.RESTAURAR));
        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(Idioma.palabras.get(K.RESTAURAR_BD_PUNTO_ESPECIFICO)));
        btnRestaurar.setText(Idioma.palabras.get(K.RESTAURAR_DESDE));
        listaRespaldos.setBorder(javax.swing.BorderFactory.createTitledBorder(Idioma.palabras.get(K.RESPALDOS)));
        btnRestaurar2.setText(Idioma.palabras.get(K.RESTAURAR_RESPALDO_SELECCIONADO));
        lblMenRespaldo.setText(Idioma.palabras.get(K.RESPALDANDO_BD));
        lblMenRestaurar.setText(Idioma.palabras.get(K.RESTAURANDO_BD));

        //MENUBAR
        jMenu1.setText(Idioma.palabras.get(K.AYUDA));
        jMenuItem1.setText(Idioma.palabras.get(K.AYUDA_DE_CONTENIDOS));

        //idiomas
        cargarMenuIdioma();

    }

    private void cargarMenuIdioma() {
        menuIdioma.setText(Idioma.palabras.get(K.IDIOMA));
        System.out.println(Idioma.palabras.get(K.IDIOMA));
        File ar = new File(Rutas.CARPETA_IDIOMAS);
        menuIdioma.removeAll();
        for (File f : ar.listFiles()) {
            if (!f.getName().contains("idioma") && !f.getName().contains("svn")) {
                try {
                    Tag root = DOM.procesarArchivoXMLDom(f);
                    final String ruta = f.getPath();


                    javax.swing.JCheckBoxMenuItem item = new javax.swing.JCheckBoxMenuItem(root.getValorDeAtributo("idioma"));
                    item.addActionListener(new ActionListener() {

                        @Override
                        public void actionPerformed(ActionEvent e) {
                            try {
                                Tag root = DOM.procesarArchivoXMLDom(new File(Rutas.CARPETA_IDIOMAS + Rutas.ARCHIVO_IDIOMA));
                                root.actualizarValorAtributo("ruta", ruta);
                                DOM.crearArchivoXML(root, new File(Rutas.CARPETA_IDIOMAS + Rutas.ARCHIVO_IDIOMA));
                                Idioma.cargarConfiguracionDeIdioma();
                                cargarIdiomaEnComponentes();
                            } catch (TransformerConfigurationException ex) {
                                Logger.getLogger(JedicAdministrador.class.getName()).log(Level.SEVERE, null, ex);
                            } catch (FileNotFoundException ex) {
                                Logger.getLogger(JedicAdministrador.class.getName()).log(Level.SEVERE, null, ex);
                            } catch (TransformerException ex) {
                                Logger.getLogger(JedicAdministrador.class.getName()).log(Level.SEVERE, null, ex);
                            } catch (ParserConfigurationException | SAXException | IOException ex) {
                                Logger.getLogger(JedicAdministrador.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    });

                    if (Idioma.idiomaSeleccionado.getPath().equalsIgnoreCase(ruta)) {
                        item.setSelected(true);
                    }
                    menuIdioma.add(item);

                } catch (ParserConfigurationException | SAXException | IOException ex) {
                    Logger.getLogger(JedicAdministrador.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }

    private void desvincularDirector(Director d, String causal) {
        try {
            Conexion.sentencia = Conexion.con.createStatement();
            Conexion.sentencia.execute("update director set est_dir = 'no-vigente' where cod_dir = '" + d.getCodigo() + "'");
            Conexion.sentencia.close();
            this.llenarListaDirectores();
            limpiarDatosVigente();
            llenarTablaDirectores();
            Historial.addHistorial("Cambió a " + d + " al listado de directores NO vigentes. Causal: " + causal);
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }

    private void desplegarCausalInhabilitacion(String texto, int largo) {
        Historial.addHistorial("Intentando inabilitar a director...");
        final JTextArea causal = new JTextArea(15, 20);
        causal.setText(texto);
        final JLabel cont = new JLabel();
        causal.addKeyListener(new KeyListener() {

            @Override
            public void keyTyped(KeyEvent e) {
//                throw new UnsupportedOperationException("Not supported yet.");
            }

            @Override
            public void keyPressed(KeyEvent e) {
                cont.setText(String.valueOf(300 - causal.getText().length()));
                if (300 - causal.getText().length() < 0) {
                    cont.setForeground(Color.red);
                } else {
                    cont.setForeground(Color.black);
                }
            }

            @Override
            public void keyReleased(KeyEvent e) {
                cont.setText(String.valueOf(300 - causal.getText().length()));
                if (300 - causal.getText().length() < 0) {
                    cont.setForeground(Color.red);
                } else {
                    cont.setForeground(Color.black);
                }
            }
        });

        cont.setText(Integer.toString(largo));
        causal.setWrapStyleWord(true);
        causal.setLineWrap(true);
        Object[] obj = {"Causal de inhabilitación:\n", causal, cont};
        Object stringArray[] = {"Inhabilitar", "Cancelar"};
        int op;

        op = JOptionPane.showOptionDialog(null, obj, "Inhabilitar director",
                JOptionPane.YES_NO_OPTION, JOptionPane.PLAIN_MESSAGE,
                null, stringArray, obj);

        if (op == JOptionPane.OK_OPTION) {
            if (Integer.parseInt(cont.getText()) < 0) {
                Mensajes.mensajeWarning("La causal no debe superar los 300 caracteres");
                desplegarCausalInhabilitacion(causal.getText(), Integer.parseInt(cont.getText()));
            }
            ModeloListaDirector m = (ModeloListaDirector) listaVigentes.getModel();
            Director d = m.getDirectorAt(listaVigentes.getSelectedIndex());
            if (!setCausalDeDesvinculacion(d, causal.getText())) {
                Mensajes.mensajeError("Error al intentar inhabilitar director. Inténtelo más tarde");
            } else {
                desvincularDirector(d, causal.getText());
            }

        } else {
            Historial.addHistorial("Canceló inabilitar a director");
        }

    }

    private boolean setCausalDeDesvinculacion(Director d, String causal) {
        try {
            Conexion.sentencia = Conexion.con.createStatement();
            String cod_dir = d.getCodigo();
            Conexion.sentencia.execute("insert into desvinculacion_director(cod_adm, cod_dir, cau_des, fec_des) values('" + Administrador.CODIGO + "', '" + cod_dir + "','" + causal + "', NOW())");
            Conexion.sentencia.close();
            return true;
        } catch (SQLException ex) {
            Logger.getLogger(JedicAdministrador.class.getName()).log(Level.SEVERE, null, ex);
            return false;
        }
    }

    private List<Causal> getCausales(Director d) {
        List<Causal> causales = new ArrayList();
        try {
            Conexion.sentencia = Conexion.con.createStatement();
            String query = "select director.nom_dir, desvinculacion_director.fec_des, "
                    + "desvinculacion_director.cau_des from desvinculacion_director, "
                    + "director where desvinculacion_director.cod_dir = '" + d.getCodigo() + "' and "
                    + "desvinculacion_director.cod_dir = director.cod_dir order by desvinculacion_director.fec_des desc;";
            Conexion.rs = Conexion.sentencia.executeQuery(query);

            Causal c;
            while (Conexion.rs.next()) {
                c = new Causal(Conexion.rs.getString("nom_dir"), Conexion.rs.getString("fec_des"), Conexion.rs.getString("cau_des"));
                causales.add(c);
            }
            Conexion.sentencia.close();
        } catch (SQLException ex) {
            Logger.getLogger(JedicAdministrador.class.getName()).log(Level.SEVERE, null, ex);

        } finally {
            return causales;
        }
    }

    private void limpiarFormularioCausales() {
        jTextField2.setText("");
        jComboBox1.removeAllItems();
        jTextArea1.setText("");
    }

    private void desplegarCausal(Causal c) {
        jTextField2.setText(c.getNombre());
        jTextArea1.setText(c.getCausal());
    }

    //método para cargar un hilo, y dejar el boton btn inhabilitado mientras ese hilo este vivo
    private void cargarHilo(final Thread h, final JButton btn) {
        h.start();
        new Thread(new Runnable() {

            @Override
            public void run() {
                String txt = btn.getText();
                btn.setText("CARGANDO DESDE BD CENTRAL...");
                btn.setEnabled(false);
                while (h.isAlive()) {
                    try {
                        Thread.sleep(500);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(JedicAdministrador.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                btn.setText(txt);
                btn.setEnabled(true);
            }
        }).start();
    }

    private void iniciarSesion() {

        String usu, cla;
        usu = usuAdm.getText();
        cla = passAdm.getText();
        try {
            Conexion.sentencia = Conexion.con.createStatement();
            Conexion.rs = Conexion.sentencia.executeQuery(
                    "SELECT cod_adm, nom_adm, usu_adm, pas_adm "
                    + "FROM administrador "
                    + "WHERE usu_adm = '" + usu + "' and pas_adm = '" + cla + "' ");
            System.out.println("SELECT cod_adm, nom_adm, usu_adm, pas_adm "
                    + "FROM administrador "
                    + "WHERE usu_adm = '" + usu + "' and pas_adm = '" + cla + "' ");
            if (Conexion.rs.next()) {
                Administrador.CODIGO = new BigInteger(Conexion.rs.getString("cod_adm"));
                Administrador.NOMBRE = Conexion.rs.getString("nom_adm");
                Administrador.USER = Conexion.rs.getString("usu_adm");
                Administrador.PASS = Conexion.rs.getString("usu_adm");


                lblMenRep.setVisible(false);
                lblMenRespaldo.setVisible(false);
                lblMenRespaldo1.setVisible(false);
                lblMenRestaurar.setVisible(false);
                lblMenRestaurar1.setVisible(false);
                lblMenRestaurar2.setVisible(false);
                tabSed.setEnabled(false);
                actualizarListaDeRespaldos();
                llenarListaDirectores();
                llenarTablaDirectores();
                listaVigentes.setCellRenderer(new CRDirectorVigente());
                listaNoVigentes.setCellRenderer(new CRDirectorNoVigente());
                listaEliminados.setCellRenderer(new CRDirectorNoVigente());
                llenarComboSedes();
                this.form_inicio_sesion.setVisible(false);
                usuAdm.setText("");
                passAdm.setText("");

                this.setVisible(true);

                Historial.addHistorial("Inició sesión");
            } else {
                MensajeHilo.setMensaje(lblMenSesion, "Error al iniciar sesión. Compruebe nombre de usuario o contraseña", Color.red, 5);
                Historial.addHistorialGeneral("Alguien intentó ingresar al sistema como administrador. [user=" + usu + "]");
                usuAdm.selectAll();
                usuAdm.requestFocus();
            }
            Conexion.sentencia.close();
        } catch (SQLException ex) {
            Logger.getLogger(JedicAdministrador.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
