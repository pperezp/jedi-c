/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JedicDirector.java
 *
 * Created on 03-07-2011, 01:05:47 AM
 */
package clases.principal;

import clases.recuperarClave.HiloGif;
import clases.BD.mysql.Conexion;
import clases.BD.mysql.DatosConexion;
import clases.configuraciones.Ejecutar;
import clases.excel.Excel;
import clases.excel.modelo.HojaExcel;
import clases.mensajes.MensajeHilo;
import clases.mensajes.Mensajes;
import clases.modelo.*;
import clases.modelo.idioma.Idioma;
import clases.modelo.idioma.K;
import clases.recuperarClave.HiloRecuperarClave;
import clases.reporte.hilo.HiloReporte;
import clases.reporte.modelo.Profesor;
import clases.reporte.modelo.*;
import clases.utilidades.*;
import clases.xml.dom.analizador.DOM;
import clases.xml.dom.analizador.modelo.Atributo;
import clases.xml.dom.analizador.modelo.Tag;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.SQLException;
import java.util.*;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.text.JTextComponent;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import org.xml.sax.SAXException;

/**
 *
 * @author Administrador
 */
public class JedicDirector extends javax.swing.JFrame {

    private String[] encPro;
    private String[] encSec;
    private String[] encAlu;
    private HiloRecuperarClave hp;
    private HiloGif hb;

    /**
     * Creates new form JedicDirector
     */
    public JedicDirector() throws ParserConfigurationException, SAXException, IOException, ClassNotFoundException, SQLException {
        initComponents();
        conectarBD();
        Idioma.cargarConfiguracionDeIdioma();


//        Redimensionar.redimensionarFormulario(this, true, Idioma.palabras.get(K.PLATAFORMA_DIRECTOR));
        this.setBounds(new Rectangle(737, 369));
        this.setLocationRelativeTo(null);
        this.setTitle(Idioma.palabras.get(K.PLATAFORMA_DIRECTOR));
        Cambiar.cambiarIcono(this, Rutas.ICONO_ARRIBA);

        encPro = new String[3];
        encSec = new String[3];
        encAlu = new String[4];

        encPro[0] = Idioma.palabras.get(K.CODIGO);
        encPro[1] = Idioma.palabras.get(K.NOMBRE);
        encPro[2] = Idioma.palabras.get(K.USUARIO);
//        encPro[3] = Idioma.palabras.get(K.CONTRASENA);

        encSec[0] = Idioma.palabras.get(K.CODIGO);
        encSec[1] = Idioma.palabras.get(K.PROFESOR);
        encSec[2] = Idioma.palabras.get(K.NUM_SECCION);

        encAlu[0] = Idioma.palabras.get(K.CODIGO);
        encAlu[1] = Idioma.palabras.get(K.NOMBRE);
        encAlu[2] = Idioma.palabras.get(K.USUARIO);
        encAlu[3] = Idioma.palabras.get(K.SECCION);
//        encAlu[4] = Idioma.palabras.get(K.CONTRASENA);

        lblMenRepPro.setVisible(false);
        lblMenRepSec.setVisible(false);
        listaProfesores.setCellRenderer(new CellRenderProfesor());
        listaVigentes.setCellRenderer(new CellRendererProfesorVigente());
        listaNoVigentes.setCellRenderer(new CellRendererProfesorNoVigente());

//        llenarTablaConProfesores();
//        llenarTablaSecciones();
//        llenarTablaAlumnos();
//        llenarComboProfesor();
//        llenarComboSecciones();
//        llenarListaProfesores();
        cargarIdiomaEnComponentes();

        Historial.setNombreTabla("director");
        Historial.addHistorialGeneral("Se inició la ejecución del sistema JEDIC Director");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        formMenu = new javax.swing.JFrame();
        jPanel3 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel8 = new javax.swing.JPanel(){

            public void paintComponent(Graphics g){
                Dimension tamanio = getSize();
                ImageIcon imagenFondo = new ImageIcon(getClass().getResource("/imagenes/fondoClaro.png"));
                g.drawImage(imagenFondo.getImage(), 0, 0, tamanio.width, tamanio.height, null);
                setOpaque(false);
                super.paintComponent(g);
            }
        };
        jScrollPane2 = new javax.swing.JScrollPane();
        tabPro = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        lblPro = new javax.swing.JLabel();
        nomPro = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        emaPro = new javax.swing.JTextField();
        jToolBar3 = new javax.swing.JToolBar();
        jButton7 = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel(){

            public void paintComponent(Graphics g){
                Dimension tamanio = getSize();
                ImageIcon imagenFondo = new ImageIcon(getClass().getResource("/imagenes/fondoClaro.png"));
                g.drawImage(imagenFondo.getImage(), 0, 0, tamanio.width, tamanio.height, null);
                setOpaque(false);
                super.paintComponent(g);
            }
        };
        jScrollPane3 = new javax.swing.JScrollPane();
        tabSec = new javax.swing.JTable();
        btnGenerarSeccion = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        jPanel11 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        numSec = new javax.swing.JTextField();
        cboPro = new javax.swing.JComboBox();
        jLabel12 = new javax.swing.JLabel();
        jToolBar1 = new javax.swing.JToolBar();
        jButton4 = new javax.swing.JButton();
        jLabel23 = new javax.swing.JLabel();
        jPanel17 = new javax.swing.JPanel(){

            public void paintComponent(Graphics g){
                Dimension tamanio = getSize();
                ImageIcon imagenFondo = new ImageIcon(getClass().getResource("/imagenes/fondoClaro.png"));
                g.drawImage(imagenFondo.getImage(), 0, 0, tamanio.width, tamanio.height, null);
                setOpaque(false);
                super.paintComponent(g);
            }
        };
        jScrollPane5 = new javax.swing.JScrollPane();
        listaVigentes = new javax.swing.JList();
        btnVig1 = new javax.swing.JButton();
        btnVig2 = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        listaNoVigentes = new javax.swing.JList();
        btnVig3 = new javax.swing.JButton();
        jPanel20 = new javax.swing.JPanel();
        jLabel32 = new javax.swing.JLabel();
        nomPro1 = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        emaPro1 = new javax.swing.JTextField();
        usuPro1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton15 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel(){

            public void paintComponent(Graphics g){
                Dimension tamanio = getSize();
                ImageIcon imagenFondo = new ImageIcon(getClass().getResource("/imagenes/fondoClaro.png"));
                g.drawImage(imagenFondo.getImage(), 0, 0, tamanio.width, tamanio.height, null);
                setOpaque(false);
                super.paintComponent(g);
            }
        };
        jPanel12 = new javax.swing.JPanel(){

            public void paintComponent(Graphics g){
                Dimension tamanio = getSize();
                ImageIcon imagenFondo = new ImageIcon(getClass().getResource("/imagenes/fondoClaro.png"));
                g.drawImage(imagenFondo.getImage(), 0, 0, tamanio.width, tamanio.height, null);
                setOpaque(false);
                super.paintComponent(g);
            }
        };
        jScrollPane4 = new javax.swing.JScrollPane();
        tabAlu = new javax.swing.JTable();
        jLabel17 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jPanel13 = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        nomAlu = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        lblUsuAlu = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        cboSec = new javax.swing.JComboBox();
        jLabel25 = new javax.swing.JLabel();
        emaAlu = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jToolBar2 = new javax.swing.JToolBar();
        jButton6 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel(){

            public void paintComponent(Graphics g){
                Dimension tamanio = getSize();
                ImageIcon imagenFondo = new ImageIcon(getClass().getResource("/imagenes/fondoClaro.png"));
                g.drawImage(imagenFondo.getImage(), 0, 0, tamanio.width, tamanio.height, null);
                setOpaque(false);
                super.paintComponent(g);
            }
        };
        jPanel6 = new javax.swing.JPanel();
        jLabel28 = new javax.swing.JLabel();
        fecIniSec = new datechooser.beans.DateChooserCombo();
        jLabel29 = new javax.swing.JLabel();
        fecFinSec = new datechooser.beans.DateChooserCombo();
        lblMenRepSec = new javax.swing.JLabel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jButton11 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jPanel16 = new javax.swing.JPanel();
        fecIniPro = new datechooser.beans.DateChooserCombo();
        fecFinPro = new datechooser.beans.DateChooserCombo();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        lblMenRepPro = new javax.swing.JLabel();
        jSplitPane2 = new javax.swing.JSplitPane();
        jButton10 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        jPanel18 = new javax.swing.JPanel(){

            public void paintComponent(Graphics g){
                Dimension tamanio = getSize();
                ImageIcon imagenFondo = new ImageIcon(getClass().getResource("/imagenes/fondoClaro.png"));
                g.drawImage(imagenFondo.getImage(), 0, 0, tamanio.width, tamanio.height, null);
                setOpaque(false);
                super.paintComponent(g);
            }
        };
        jScrollPane7 = new javax.swing.JScrollPane();
        listaProfesores = new javax.swing.JList();
        jPanel19 = new javax.swing.JPanel();
        jLabel42 = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        ano1 = new javax.swing.JSpinner();
        jLabel36 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        ano2 = new javax.swing.JSpinner();
        nomPro2 = new javax.swing.JTextField();
        jLabel39 = new javax.swing.JLabel();
        jSplitPane3 = new javax.swing.JSplitPane();
        jButton13 = new javax.swing.JButton();
        jButton14 = new javax.swing.JButton();
        lblMenRepSec1 = new javax.swing.JLabel();
        jPanel14 = new javax.swing.JPanel(){

            public void paintComponent(Graphics g){
                Dimension tamanio = getSize();
                ImageIcon imagenFondo = new ImageIcon(getClass().getResource("/imagenes/fondoClaro.png"));
                g.drawImage(imagenFondo.getImage(), 0, 0, tamanio.width, tamanio.height, null);
                setOpaque(false);
                super.paintComponent(g);
            }
        };
        jLabel9 = new javax.swing.JLabel();
        jPanel15 = new javax.swing.JPanel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        con2 = new javax.swing.JPasswordField();
        con1 = new javax.swing.JPasswordField();
        btnCmbCon = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtErr = new javax.swing.JTextArea();
        lblDirector = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        lblSede = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        lblMenInfo = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        menuIdioma = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        formBarra = new javax.swing.JFrame();
        jPanel7 = new javax.swing.JPanel();
        jLabel27 = new javax.swing.JLabel();
        lblMen = new javax.swing.JLabel();
        jButton8 = new javax.swing.JButton();
        formCausal = new javax.swing.JFrame();
        jPanel21 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        jLabel44 = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jTextField2 = new javax.swing.JTextField();
        jButton16 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel45 = new javax.swing.JLabel();
        jLabel46 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel(){

            public void paintComponent(Graphics g){
                Dimension tamanio = getSize();
                ImageIcon imagenFondo = new ImageIcon(getClass().getResource("/imagenes/fondo.png"));
                g.drawImage(imagenFondo.getImage(), 0, 0, tamanio.width, tamanio.height, null);
                setOpaque(false);
                super.paintComponent(g);
            }
        };
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        usuDir = new javax.swing.JTextField();
        claDir = new javax.swing.JPasswordField();
        jLabel2 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        inicioSesionBoton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        lblMenSesion = new javax.swing.JLabel();

        formMenu.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formMenuWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formMenuWindowClosing(evt);
            }
        });

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        jTabbedPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTabbedPane1MouseReleased(evt);
            }
        });

        jPanel8.setBackground(new java.awt.Color(255, 255, 255));

        tabPro.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tabPro.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabProMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tabProMouseReleased(evt);
            }
        });
        jScrollPane2.setViewportView(tabPro);

        jButton3.setText("Generar Profesor");
        jButton3.setOpaque(false);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel10.setText("Listado de Profesores:");

        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/profesor.png"))); // NOI18N

        jPanel9.setBackground(new java.awt.Color(255, 255, 255));
        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder("Información"));
        jPanel9.setOpaque(false);
        jPanel9.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblPro.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jPanel9.add(lblPro, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 80, 140, 20));

        nomPro.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                nomProKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                nomProKeyReleased(evt);
            }
        });
        jPanel9.add(nomPro, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 50, 140, -1));

        jLabel15.setText("Nombre Profesor:");
        jPanel9.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 50, 160, 20));

        jLabel16.setText("Usuario Profesor:");
        jPanel9.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 80, 160, 20));

        jLabel24.setText("E-Mail:");
        jPanel9.add(jLabel24, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 110, 150, 20));

        emaPro.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                emaProKeyReleased(evt);
            }
        });
        jPanel9.add(emaPro, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 110, 140, -1));

        jToolBar3.setBackground(new java.awt.Color(254, 254, 254));
        jToolBar3.setFloatable(false);
        jToolBar3.setOpaque(false);

        jButton7.setBackground(new java.awt.Color(255, 255, 255));
        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/delete.png"))); // NOI18N
        jButton7.setText("Eliminar");
        jButton7.setFocusable(false);
        jButton7.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jButton7.setOpaque(false);
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        jToolBar3.add(jButton7);

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(260, 260, 260)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel11)))
                .addGap(20, 20, 20)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(210, 210, 210)
                        .addComponent(jToolBar3, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 574, Short.MAX_VALUE))
                .addGap(15, 15, 15))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                        .addComponent(jLabel11))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jToolBar3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Generar Profesor", jPanel8);

        jPanel10.setBackground(new java.awt.Color(255, 255, 255));

        tabSec.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tabSec.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tabSecMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tabSecMouseReleased(evt);
            }
        });
        jScrollPane3.setViewportView(tabSec);

        btnGenerarSeccion.setText("Generar Sección");
        btnGenerarSeccion.setOpaque(false);
        btnGenerarSeccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerarSeccionActionPerformed(evt);
            }
        });

        jLabel13.setText("Listador de Secciones:");

        jPanel11.setBackground(new java.awt.Color(255, 255, 255));
        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder("Información"));
        jPanel11.setOpaque(false);
        jPanel11.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel14.setText("Nº de Sección:");
        jPanel11.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 50, 110, 20));

        numSec.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                numSecKeyReleased(evt);
            }
        });
        jPanel11.add(numSec, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 50, 50, -1));

        cboPro.setOpaque(false);
        cboPro.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cboProKeyReleased(evt);
            }
        });
        jPanel11.add(cboPro, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 80, 150, -1));

        jLabel12.setText("Profesor:");
        jPanel11.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 80, 110, 20));

        jToolBar1.setBackground(new java.awt.Color(255, 255, 255));
        jToolBar1.setFloatable(false);
        jToolBar1.setOpaque(false);

        jButton4.setBackground(new java.awt.Color(255, 255, 255));
        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/delete.png"))); // NOI18N
        jButton4.setText("Eliminar");
        jButton4.setFocusable(false);
        jButton4.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jButton4.setOpaque(false);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton4);

        jLabel23.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/seccion.png"))); // NOI18N

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel23)
                        .addGap(362, 362, 362))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnGenerarSeccion, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)))
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(266, 266, 266)
                        .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 39, Short.MAX_VALUE))
                    .addComponent(jScrollPane3))
                .addContainerGap())
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnGenerarSeccion, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 71, Short.MAX_VALUE)
                        .addComponent(jLabel23)
                        .addGap(0, 11, Short.MAX_VALUE))))
        );

        jTabbedPane1.addTab("Generar o Asignar Sección", jPanel10);

        jPanel17.setBackground(new java.awt.Color(255, 255, 255));

        listaVigentes.setBorder(javax.swing.BorderFactory.createTitledBorder("Profesores Vigentes"));
        listaVigentes.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        listaVigentes.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listaVigentes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                listaVigentesMouseReleased(evt);
            }
        });
        jScrollPane5.setViewportView(listaVigentes);

        btnVig1.setText(">");
        btnVig1.setOpaque(false);
        btnVig1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVig1ActionPerformed(evt);
            }
        });

        btnVig2.setText("<");
        btnVig2.setOpaque(false);
        btnVig2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVig2ActionPerformed(evt);
            }
        });

        listaNoVigentes.setBorder(javax.swing.BorderFactory.createTitledBorder("Profesores No Vigentes"));
        listaNoVigentes.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        listaNoVigentes.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listaNoVigentes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                listaNoVigentesMouseReleased(evt);
            }
        });
        jScrollPane6.setViewportView(listaNoVigentes);

        btnVig3.setText("Reemplazar Profesor");
        btnVig3.setOpaque(false);
        btnVig3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVig3ActionPerformed(evt);
            }
        });

        jPanel20.setBackground(new java.awt.Color(254, 254, 254));
        jPanel20.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del nuevo profesor"));
        jPanel20.setOpaque(false);

        jLabel32.setText("Nombre Profesor:");

        nomPro1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nomPro1ActionPerformed(evt);
            }
        });
        nomPro1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                nomPro1KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                nomPro1KeyReleased(evt);
            }
        });

        jLabel35.setText("Usuario:");

        jLabel37.setText("E-Mail:");

        emaPro1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                emaPro1KeyReleased(evt);
            }
        });

        usuPro1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        jButton1.setText("Generar nueva contraseña");

        javax.swing.GroupLayout jPanel20Layout = new javax.swing.GroupLayout(jPanel20);
        jPanel20.setLayout(jPanel20Layout);
        jPanel20Layout.setHorizontalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel20Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel20Layout.createSequentialGroup()
                        .addComponent(jLabel32, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60)
                        .addComponent(nomPro1, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel20Layout.createSequentialGroup()
                        .addComponent(jLabel37, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60)
                        .addComponent(emaPro1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel20Layout.createSequentialGroup()
                        .addComponent(jLabel35, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60)
                        .addComponent(usuPro1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(23, 23, 23))
        );
        jPanel20Layout.setVerticalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel20Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel32, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nomPro1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel35, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(usuPro1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel37, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(emaPro1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addComponent(jButton1))
        );

        jButton15.setText("Ver causal de Inhabilitación");
        jButton15.setOpaque(false);
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel17Layout = new javax.swing.GroupLayout(jPanel17);
        jPanel17.setLayout(jPanel17Layout);
        jPanel17Layout.setHorizontalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE)
                .addGap(10, 10, 10)
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnVig1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnVig2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 253, Short.MAX_VALUE)
                .addGap(40, 40, 40)
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel20, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnVig3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(15, 15, 15))
        );
        jPanel17Layout.setVerticalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addGap(116, 116, 116)
                .addComponent(btnVig1)
                .addGap(7, 7, 7)
                .addComponent(btnVig2)
                .addGap(151, 151, 151))
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel17Layout.createSequentialGroup()
                        .addComponent(jPanel20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnVig3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton15)
                        .addContainerGap(69, Short.MAX_VALUE))
                    .addGroup(jPanel17Layout.createSequentialGroup()
                        .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane5)
                            .addComponent(jScrollPane6))
                        .addGap(64, 64, 64))))
        );

        jTabbedPane1.addTab("Modificar Profesor", jPanel17);

        jPanel4.setLayout(new java.awt.BorderLayout());

        jPanel12.setBackground(new java.awt.Color(255, 255, 255));

        tabAlu.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tabAlu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tabAluMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tabAluMouseReleased(evt);
            }
        });
        jScrollPane4.setViewportView(tabAlu);

        jLabel17.setText("Listador de Alumnos:");

        jLabel20.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/alumnos.png"))); // NOI18N

        jPanel13.setBackground(new java.awt.Color(255, 255, 255));
        jPanel13.setBorder(javax.swing.BorderFactory.createTitledBorder("Información"));
        jPanel13.setOpaque(false);
        jPanel13.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel18.setText("Nombre:");
        jPanel13.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, 130, 20));

        nomAlu.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                nomAluKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                nomAluKeyReleased(evt);
            }
        });
        jPanel13.add(nomAlu, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 30, 160, -1));

        jLabel19.setText("Usuario:");
        jPanel13.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 60, 130, 20));

        lblUsuAlu.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jPanel13.add(lblUsuAlu, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 60, 160, 20));

        jLabel7.setText("Seccion:");
        jPanel13.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 90, 130, 20));

        cboSec.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cboSec.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cboSecKeyReleased(evt);
            }
        });
        jPanel13.add(cboSec, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 90, 160, -1));

        jLabel25.setText("E-Mail:");
        jPanel13.add(jLabel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 120, 130, 20));

        emaAlu.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                emaAluKeyReleased(evt);
            }
        });
        jPanel13.add(emaAlu, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 120, 160, -1));

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/xls.gif"))); // NOI18N
        jButton5.setText("Importar desde XLS");
        jButton5.setOpaque(false);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton2.setText("Generar Alumno");
        jButton2.setOpaque(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jToolBar2.setBackground(new java.awt.Color(255, 255, 255));
        jToolBar2.setFloatable(false);
        jToolBar2.setOpaque(false);

        jButton6.setBackground(new java.awt.Color(255, 255, 255));
        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/delete.png"))); // NOI18N
        jButton6.setText("Eliminar");
        jButton6.setFocusable(false);
        jButton6.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jButton6.setOpaque(false);
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jToolBar2.add(jButton6);

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel20)))
                .addGap(30, 30, 30)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addComponent(jLabel17)
                        .addGap(330, 330, 330)
                        .addComponent(jToolBar2, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE))
                    .addComponent(jScrollPane4))
                .addGap(15, 15, 15))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jToolBar2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addGap(7, 7, 7)
                        .addComponent(jButton5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                        .addComponent(jLabel20)))
                .addContainerGap())
        );

        jPanel4.add(jPanel12, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Generar Alumnos", jPanel4);

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));
        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Secciones que utilizan más la aplicación"));
        jPanel6.setOpaque(false);

        jLabel28.setText("Fecha Inicio:");

        fecIniSec.setBehavior(datechooser.model.multiple.MultyModelBehavior.SELECT_SINGLE);

        jLabel29.setText("Fecha Término:");

        fecFinSec.setBehavior(datechooser.model.multiple.MultyModelBehavior.SELECT_SINGLE);

        lblMenRepSec.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblMenRepSec.setForeground(new java.awt.Color(255, 0, 0));
        lblMenRepSec.setText("GENERANDO REPORTE!");

        jSplitPane1.setOpaque(false);

        jButton11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/impresora.png"))); // NOI18N
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });
        jSplitPane1.setRightComponent(jButton11);

        jButton9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/grafico.png"))); // NOI18N
        jButton9.setToolTipText("Generar Reporte");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        jSplitPane1.setLeftComponent(jButton9);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(74, 74, 74)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel28)
                    .addComponent(jLabel29))
                .addGap(56, 56, 56)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fecIniSec, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE)
                    .addComponent(fecFinSec, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(10, 10, 10)
                .addComponent(jSplitPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15))
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(lblMenRepSec, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel28, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jLabel29, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(fecIniSec, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(fecFinSec, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jSplitPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addComponent(lblMenRepSec))
        );

        jPanel16.setBackground(new java.awt.Color(255, 255, 255));
        jPanel16.setBorder(javax.swing.BorderFactory.createTitledBorder("Profesores que utilizan más la aplicación"));
        jPanel16.setOpaque(false);

        fecIniPro.setBehavior(datechooser.model.multiple.MultyModelBehavior.SELECT_SINGLE);

        fecFinPro.setBehavior(datechooser.model.multiple.MultyModelBehavior.SELECT_SINGLE);

        jLabel30.setText("Fecha Término:");

        jLabel31.setText("Fecha Inicio:");

        lblMenRepPro.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblMenRepPro.setForeground(new java.awt.Color(255, 0, 0));
        lblMenRepPro.setText("GENERANDO REPORTE!");

        jSplitPane2.setOpaque(false);

        jButton10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/grafico.png"))); // NOI18N
        jButton10.setToolTipText("Generar Reporte");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });
        jSplitPane2.setLeftComponent(jButton10);

        jButton12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/impresora.png"))); // NOI18N
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });
        jSplitPane2.setRightComponent(jButton12);

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addGap(74, 74, 74)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel31)
                    .addComponent(jLabel30))
                .addGap(56, 56, 56)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fecIniPro, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(fecFinPro, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(10, 10, 10)
                .addComponent(jSplitPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15))
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(lblMenRepPro, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel16Layout.createSequentialGroup()
                        .addComponent(jLabel31, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jLabel30, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel16Layout.createSequentialGroup()
                        .addComponent(fecIniPro, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(fecFinPro, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jSplitPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addComponent(lblMenRepPro))
        );

        jLabel33.setFont(new java.awt.Font("Tahoma", 3, 24)); // NOI18N
        jLabel33.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel33.setText("Profesores");

        jLabel34.setFont(new java.awt.Font("Tahoma", 3, 24)); // NOI18N
        jLabel34.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel34.setText("Secciones");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel34, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel33, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(jPanel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(160, 160, 160))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel34)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel33, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel16, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(54, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Reportes", jPanel5);

        jPanel18.setBackground(new java.awt.Color(255, 255, 255));

        listaProfesores.setBorder(javax.swing.BorderFactory.createTitledBorder("Profesores"));
        listaProfesores.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        listaProfesores.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listaProfesores.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                listaProfesoresMouseReleased(evt);
            }
        });
        jScrollPane7.setViewportView(listaProfesores);

        jPanel19.setBackground(new java.awt.Color(255, 255, 255));
        jPanel19.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos Reporte"));
        jPanel19.setOpaque(false);

        jLabel42.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel42.setText("(Año)");

        jLabel40.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel40.setText("Desde:");

        ano1.setModel(new javax.swing.SpinnerNumberModel(2009, 2009, 2020, 1));

        jLabel36.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel36.setText("Hasta:");

        jLabel41.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel41.setText("(Año)");

        ano2.setModel(new javax.swing.SpinnerNumberModel(2009, 2009, 2020, 1));

        nomPro2.setEditable(false);
        nomPro2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nomPro2ActionPerformed(evt);
            }
        });
        nomPro2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                nomPro2KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                nomPro2KeyReleased(evt);
            }
        });

        jLabel39.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel39.setText("Nombre Profesor:");

        jSplitPane3.setOpaque(false);

        jButton13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/grafico.png"))); // NOI18N
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });
        jSplitPane3.setLeftComponent(jButton13);

        jButton14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/impresora.png"))); // NOI18N
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });
        jSplitPane3.setRightComponent(jButton14);

        javax.swing.GroupLayout jPanel19Layout = new javax.swing.GroupLayout(jPanel19);
        jPanel19.setLayout(jPanel19Layout);
        jPanel19Layout.setHorizontalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel19Layout.createSequentialGroup()
                .addGap(104, 104, 104)
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel19Layout.createSequentialGroup()
                        .addComponent(jLabel39, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(nomPro2))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel19Layout.createSequentialGroup()
                        .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel19Layout.createSequentialGroup()
                                .addComponent(jLabel36, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(20, 20, 20)
                                .addComponent(ano2, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel19Layout.createSequentialGroup()
                                .addComponent(jLabel40, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(ano1, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(29, 29, 29)
                        .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel42, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel41, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 12, Short.MAX_VALUE)))
                .addGap(193, 193, 193))
            .addGroup(jPanel19Layout.createSequentialGroup()
                .addGap(284, 284, 284)
                .addComponent(jSplitPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel19Layout.setVerticalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel19Layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel39, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nomPro2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel40, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ano1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel42, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel36, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ano2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel41, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addComponent(jSplitPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42))
        );

        lblMenRepSec1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblMenRepSec1.setForeground(new java.awt.Color(255, 0, 0));

        javax.swing.GroupLayout jPanel18Layout = new javax.swing.GroupLayout(jPanel18);
        jPanel18.setLayout(jPanel18Layout);
        jPanel18Layout.setHorizontalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel18Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel18Layout.createSequentialGroup()
                        .addComponent(lblMenRepSec1, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel18Layout.setVerticalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel18Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel18Layout.createSequentialGroup()
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 315, Short.MAX_VALUE)
                        .addGap(10, 10, 10))
                    .addGroup(jPanel18Layout.createSequentialGroup()
                        .addComponent(jPanel19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblMenRepSec1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        jTabbedPane1.addTab("Reportes Avanzados", jPanel18);

        jPanel14.setBackground(new java.awt.Color(255, 255, 255));

        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/llave_modificada.png"))); // NOI18N

        jPanel15.setBackground(new java.awt.Color(255, 255, 255));
        jPanel15.setBorder(javax.swing.BorderFactory.createTitledBorder("Información"));
        jPanel15.setOpaque(false);
        jPanel15.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel21.setText("Contraseña Nueva:");
        jPanel15.add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 70, -1, 20));

        jLabel22.setText("Repetir Contraseña:");
        jPanel15.add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 100, -1, 20));

        con2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                con2KeyReleased(evt);
            }
        });
        jPanel15.add(con2, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 100, 120, -1));

        con1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                con1KeyReleased(evt);
            }
        });
        jPanel15.add(con1, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 70, 120, -1));

        btnCmbCon.setText("Cambiar Contraseña");
        btnCmbCon.setOpaque(false);
        btnCmbCon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCmbConActionPerformed(evt);
            }
        });

        txtErr.setColumns(20);
        txtErr.setEditable(false);
        txtErr.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        txtErr.setForeground(new java.awt.Color(255, 0, 0));
        txtErr.setLineWrap(true);
        txtErr.setRows(5);
        txtErr.setBorder(javax.swing.BorderFactory.createTitledBorder("Errores"));
        jScrollPane1.setViewportView(txtErr);

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addGap(130, 130, 130)
                        .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel15, javax.swing.GroupLayout.DEFAULT_SIZE, 360, Short.MAX_VALUE)
                            .addComponent(btnCmbCon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel9)))
                .addGap(70, 70, 70)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 434, Short.MAX_VALUE)
                .addGap(15, 15, 15))
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jPanel15, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(btnCmbCon)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                        .addComponent(jLabel9))
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jScrollPane1)))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Cambiar Contraseña", jPanel14);

        lblDirector.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblDirector.setText("xxx");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setText("Director/a:");

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/logo_200.png"))); // NOI18N

        lblSede.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblSede.setText("xxx");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel6.setText("Sede:");

        lblMenInfo.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblMenInfo.setForeground(new java.awt.Color(0, 153, 0));
        lblMenInfo.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                        .addGap(190, 190, 190)
                        .addComponent(lblSede, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                        .addGap(190, 190, 190)
                        .addComponent(lblDirector, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jTabbedPane1)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(690, 690, 690)
                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblMenInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(jLabel6))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(lblSede))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(lblDirector))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jLabel5))
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblMenInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1))
        );

        formMenu.getContentPane().add(jPanel3, java.awt.BorderLayout.CENTER);

        jMenuBar1.setBackground(new java.awt.Color(255, 255, 255));

        jMenu1.setText("Ayuda");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        jMenuItem1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/ayuda.png"))); // NOI18N
        jMenuItem1.setText("Ayuda de Contenidos");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        menuIdioma.setText("Idioma");
        jMenuBar1.add(menuIdioma);

        jMenu2.setText("Cargar");

        jMenuItem2.setText("Cargar datos desde BD CENTRAL");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuBar1.add(jMenu2);

        formMenu.setJMenuBar(jMenuBar1);

        formBarra.setFocusableWindowState(false);
        formBarra.setUndecorated(true);

        jPanel7.setBackground(new java.awt.Color(255, 255, 255));
        jPanel7.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel27.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/procesando.gif"))); // NOI18N
        jPanel7.add(jLabel27, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 20, -1, -1));

        lblMen.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        lblMen.setText("Procesando");
        jPanel7.add(lblMen, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 20, 200, 70));

        jButton8.setText("Cancelar");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        jPanel7.add(jButton8, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 90, -1, -1));

        formBarra.getContentPane().add(jPanel7, java.awt.BorderLayout.CENTER);

        formCausal.setTitle("Causal Inhabilitación");
        formCausal.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formCausalComponentResized(evt);
            }
        });

        jPanel21.setBackground(new java.awt.Color(255, 255, 255));
        jPanel21.setBorder(javax.swing.BorderFactory.createTitledBorder("Causal de Inhabilitación"));
        jPanel21.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel8.setText("Causal:");
        jPanel21.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 130, 60, 20));

        jLabel43.setText("Profesor: ");
        jPanel21.add(jLabel43, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 40, -1, 20));

        jLabel44.setText("Responsable:");
        jPanel21.add(jLabel44, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 100, -1, 20));

        jTextArea1.setColumns(20);
        jTextArea1.setEditable(false);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setWrapStyleWord(true);
        jScrollPane8.setViewportView(jTextArea1);

        jPanel21.add(jScrollPane8, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 160, 290, 130));

        jTextField2.setEditable(false);
        jPanel21.add(jTextField2, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 40, 120, -1));

        jButton16.setText("Cerrar");
        jPanel21.add(jButton16, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 300, 80, -1));

        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        jPanel21.add(jComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 70, 120, -1));

        jLabel45.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/inhabilitado.png"))); // NOI18N
        jPanel21.add(jLabel45, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 70, 70));

        jLabel46.setText("Fecha de Inhabilitación:");
        jPanel21.add(jLabel46, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 70, -1, 20));

        jTextField1.setEditable(false);
        jPanel21.add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 100, 120, -1));

        formCausal.getContentPane().add(jPanel21, java.awt.BorderLayout.CENTER);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setOpaque(false);

        jLabel1.setFont(new java.awt.Font("Courier New", 0, 11)); // NOI18N
        jLabel1.setText("Usuario:");

        usuDir.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                usuDirKeyReleased(evt);
            }
        });

        claDir.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                claDirKeyReleased(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Courier New", 0, 11)); // NOI18N
        jLabel2.setText("Contraseña:");

        jLabel26.setFont(new java.awt.Font("Courier New", 1, 11)); // NOI18N
        jLabel26.setForeground(new java.awt.Color(0, 51, 204));
        jLabel26.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel26.setText("<html><u>Recuperar Contraseña</u></html>");
        jLabel26.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel26MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel26MouseExited(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jLabel26MouseReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel26, javax.swing.GroupLayout.DEFAULT_SIZE, 301, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(40, 40, 40)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(claDir)
                            .addComponent(usuDir))))
                .addGap(18, 18, 18))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(usuDir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(claDir))
                .addGap(10, 10, 10)
                .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        inicioSesionBoton.setFont(new java.awt.Font("Courier New", 0, 11)); // NOI18N
        inicioSesionBoton.setText("Iniciar Sesón");
        inicioSesionBoton.setOpaque(false);
        inicioSesionBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inicioSesionBotonActionPerformed(evt);
            }
        });

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/logo_200.png"))); // NOI18N

        lblMenSesion.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblMenSesion.setForeground(new java.awt.Color(0, 153, 0));
        lblMenSesion.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMenSesion.setAutoscrolls(true);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblMenSesion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(inicioSesionBoton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 454, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addComponent(lblMenSesion, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(inicioSesionBoton))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(143, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void inicioSesionBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inicioSesionBotonActionPerformed
        iniciarSesion();
    }//GEN-LAST:event_inicioSesionBotonActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        crearProfesor();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void btnGenerarSeccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerarSeccionActionPerformed
        crearSeccion();
    }//GEN-LAST:event_btnGenerarSeccionActionPerformed

    private void formMenuWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formMenuWindowClosed
    }//GEN-LAST:event_formMenuWindowClosed

    private void formMenuWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formMenuWindowClosing
        cerrarSesion();
    }//GEN-LAST:event_formMenuWindowClosing

    private void nomProKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nomProKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            emaPro.requestFocus();
        } else {
            lblPro.setText(Generador.nombreUsuario(nomPro.getText()));
        }
    }//GEN-LAST:event_nomProKeyReleased

    private void nomAluKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nomAluKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            cboSec.requestFocus();
        } else {
            lblUsuAlu.setText(Generador.nombreUsuario(nomAlu.getText()));
        }
    }//GEN-LAST:event_nomAluKeyReleased

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        generarAlumno();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void claDirKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_claDirKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            iniciarSesion();
        }
    }//GEN-LAST:event_claDirKeyReleased

    private void usuDirKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_usuDirKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            claDir.requestFocus();
        }
    }//GEN-LAST:event_usuDirKeyReleased

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        int NOMBRE = 0;
        int SECCION = 1;
        int MAIL = 2;
        Abrir a = new Abrir();
        int cont = 0;
        if (a.abrir("xls", "Abrir", "/")) {
            HojaExcel hoja = Excel.leerArchivo(a.getRuta(), 0);
            String[][] contenido = hoja.getContenido();
            Mensajes.mensajeInformacion(Idioma.palabras.get(K.SE_GEN_AUT_LOS_ALUMNOS));
            for (int i = 0; i < contenido.length; i++) {
                try {
                    generarAlumno(contenido[i][NOMBRE], contenido[i][SECCION], contenido[i][MAIL], true);
                    cont++;
                } catch (Exception e) {
                }
            }
            Mensajes.mensajeInformacion(Idioma.palabras.get(K.ALUMNOS_GENERADOS_AUTO) + ": " + cont);
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void tabAluMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabAluMousePressed
        if (evt.getClickCount() == 2) {
//            String codAlu = tabAlu.getValueAt(tabAlu.getSelectedRow(), 0).toString();
//            System.out.println("Codigo Alumno: "+codAlu);
        }
    }//GEN-LAST:event_tabAluMousePressed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        try {
            String codSec = tabSec.getValueAt(tabSec.getSelectedRow(), 0).toString();
            String seccion = tabSec.getValueAt(tabSec.getSelectedRow(), 2).toString();
            if (Mensajes.mensajePreguntaSiNo(Idioma.palabras.get(K.REC_ELI_SEC) + ": " + seccion) == Mensajes.SI) {

//                eliminarMensajesSecciones(codSec);
//                eliminarAlumno(codSec);

                Conexion.sentencia = Conexion.con.createStatement();
                Conexion.sentencia.execute("delete from seccion where cod_sec = " + codSec);
                Conexion.sentencia.close();
                llenarTablaSecciones();
                llenarComboSecciones();
                llenarTablaAlumnos();
                Mensajes.mensajeInformacion(Idioma.palabras.get(K.SECCION_ELIMINADA) + seccion);
                Historial.addHistorial("Se ha eliminado una sección: [sección=" + seccion + "]");
            }
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            Mensajes.mensajeWarning(Idioma.palabras.get(K.DEBE_SEL_ALGUN_SEC));
        } catch (SQLException e) {
            Mensajes.mensajeError(e.getMessage());
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        try {
            String codAlu = tabAlu.getValueAt(tabAlu.getSelectedRow(), 0).toString();
            String seccion = tabAlu.getValueAt(tabAlu.getSelectedRow(), 4).toString();
            String nombre = tabAlu.getValueAt(tabAlu.getSelectedRow(), 1).toString();
            if (Mensajes.mensajePreguntaSiNo(Idioma.palabras.get(K.REC_ELI_ALU) + ": " + nombre) == Mensajes.SI) {

                Conexion.sentencia = Conexion.con.createStatement();
                Conexion.sentencia.execute("delete from alumno where cod_alu = " + codAlu);
                Conexion.sentencia.close();
                llenarTablaAlumnos();
                Mensajes.mensajeInformacion(Idioma.palabras.get(K.ALUMNO_ELIMINADO) + ": " + nombre);
                Historial.addHistorial("Se ha eliminado a un alumno: [alumno=" + nombre + ", seccion=" + seccion + "]");
            }
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            Mensajes.mensajeWarning(Idioma.palabras.get(K.DEBE_SEL_ALGUN_ALU));
        } catch (SQLException e) {
            Mensajes.mensajeError(e.getMessage());
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void nomProKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nomProKeyPressed
        Controlar.largoDeTexto(nomPro, 49);
    }//GEN-LAST:event_nomProKeyPressed

    private void nomAluKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nomAluKeyPressed
        Controlar.largoDeTexto(nomAlu, 49);
    }//GEN-LAST:event_nomAluKeyPressed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        try {
            String codPro = tabPro.getValueAt(tabPro.getSelectedRow(), 0).toString();
            String profesor = tabPro.getValueAt(tabPro.getSelectedRow(), 1).toString();
            if (Mensajes.mensajePreguntaSiNo(Idioma.palabras.get(K.REC_ELI_PRO) + ": " + profesor) == Mensajes.SI) {
                Conexion.sentencia = Conexion.con.createStatement();
                Conexion.sentencia.execute("update profesor set est_pro = 'no-vigente' where cod_pro = '" + codPro + "'");
                Conexion.sentencia.close();

                Conexion.sentencia = Conexion.con.createStatement();
                Conexion.sentencia.execute("update seccion set cod_pro = " + Director.COD_SIN_PROFESOR + " where cod_pro = '" + codPro + "'");
                Conexion.sentencia.close();
                llenarListaProfesores();
                llenarTablaConProfesores();
                llenarComboProfesor();
                llenarTablaSecciones();
                limpiarDatosVigente();
                llenarComboSecciones();
                llenarTablaAlumnos();
                Mensajes.mensajeInformacion(Idioma.palabras.get(K.PROFESOR_ELIMINADO) + ": " + profesor);
                Historial.addHistorial("Se ha eliminado a un profesor: [profesor=" + profesor + "]");
            }

        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            Mensajes.mensajeWarning(Idioma.palabras.get(K.DEBE_SEL_ALGUN_PRO));
        } catch (SQLException e) {
            Mensajes.mensajeError(e.getMessage());
        }
//        try{
//            String codPro = tabPro.getValueAt(tabPro.getSelectedRow(), 0).toString();
//            String profesor = tabPro.getValueAt(tabPro.getSelectedRow(), 1).toString();
//            if(Mensajes.mensajePreguntaSiNo(Idioma.palabras.get(K.REC_ELI_PRO)+": "+profesor) == Mensajes.SI){
//
//                Conexion.sentencia = Conexion.con.createStatement();
//                Conexion.sentencia.execute("delete from profesor where cod_pro = "+codPro);
//                Conexion.sentencia.close();
//                llenarTablaSecciones();
//                llenarComboSecciones();
//                llenarTablaAlumnos();
//                llenarTablaConProfesores();
//                llenarComboProfesor();
//                Mensajes.mensajeInformacion(Idioma.palabras.get(K.PROFESOR_ELIMINADO)+": "+profesor);
//            }
//        }catch( java.lang.ArrayIndexOutOfBoundsException e){
//            Mensajes.mensajeWarning(Idioma.palabras.get(K.DEBE_SEL_ALGUN_PRO));
//        }catch(SQLException e){
//            Mensajes.mensajeError(e.getMessage());
//        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void btnCmbConActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCmbConActionPerformed
        cambiarContraseña();
    }//GEN-LAST:event_btnCmbConActionPerformed

    private void numSecKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_numSecKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            cboPro.requestFocus();
        }
    }//GEN-LAST:event_numSecKeyReleased

    private void cboProKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cboProKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            crearSeccion();
        }
    }//GEN-LAST:event_cboProKeyReleased

    private void cboSecKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cboSecKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            emaAlu.requestFocus();
        }
    }//GEN-LAST:event_cboSecKeyReleased

    private void con1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_con1KeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            con2.requestFocus();
        }
    }//GEN-LAST:event_con1KeyReleased

    private void con2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_con2KeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            cambiarContraseña();
        }
    }//GEN-LAST:event_con2KeyReleased

    private void emaProKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_emaProKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            crearProfesor();
        }
    }//GEN-LAST:event_emaProKeyReleased

    private void emaAluKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_emaAluKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
//            if(cboSec.getItemCount() != 0){
//                List<JTextComponent> lista = new ArrayList<JTextComponent>();
//                lista.add(nomAlu);
//                lista.add(emaAlu);
//                if(!Validar.isJTextComponentVacio(lista)){
//                    if(Validar.isMailCorrecto(emaAlu.getText())){
//                        String nombre = nomAlu.getText();
//                        String seccion = cboSec.getSelectedItem().toString();
//                        String email = emaAlu.getText();
//                        generarAlumno(nombre, seccion, email,false);
//                    }else{
//                        MensajeHilo.setMensaje(lblMenInfo4, "E-Mail Incorrecto", Color.red, 5);
//                    }
//                }else{
//                    MensajeHilo.setMensaje(lblMenInfo4, "Faltan Datos. Revise", Color.red, 5);
//                }
//            }else{
//                MensajeHilo.setMensaje(lblMenInfo4, "Primero debe crear alguna sección", Color.red, 5);
//            }
            generarAlumno();
        }
    }//GEN-LAST:event_emaAluKeyReleased

    private void jLabel26MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel26MouseReleased
        String usu_dir = usuDir.getText().trim();

        if (usu_dir.equalsIgnoreCase("")) {
            MensajeHilo.setMensaje(lblMenSesion, Idioma.palabras.get(K.DEBE_ESCR_NOM_USU), Color.red, 7);
        } else if (!Conectividad.isConectado()) {
            MensajeHilo.setMensaje(lblMenSesion, Idioma.palabras.get(K.AL_PARECER_NO_CONEXION), Color.red, 7);
        } else {
            hp = new HiloRecuperarClave(lblMenSesion, lblMen);
            hp.setDatos("SELECT sysdate() as 'fecha', director.ema_dir, director.nom_dir, director.pas_dir, sede.nom_sed "
                    + "FROM director, sede "
                    + "WHERE director.usu_dir = '" + usu_dir + "' "
                    + "and sede.cod_sed = director.cod_sed", "ema_dir", "nom_dir", "pas_dir", "director", usu_dir);
            hp.start();
            hb = new HiloGif(hp, formBarra, lblMen);
            hb.start();
        }
    }//GEN-LAST:event_jLabel26MouseReleased

    private void jLabel26MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel26MouseEntered
        this.setCursor(Cursor.HAND_CURSOR);
    }//GEN-LAST:event_jLabel26MouseEntered

    private void jLabel26MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel26MouseExited
        this.setCursor(Cursor.DEFAULT_CURSOR);
    }//GEN-LAST:event_jLabel26MouseExited

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        hp.interrupt();
        hb.interrupt();
        formBarra.setVisible(false);
}//GEN-LAST:event_jButton8ActionPerformed

private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
    if (Validar.isFechaCorrecta(fecIniSec.getSelectedDate(), fecFinSec.getSelectedDate())) {
        String fechaInicio, fechaFinal;
        //año/mes/dia
        Calendar fIni = fecIniSec.getSelectedDate();
        Calendar fFin = fecFinSec.getSelectedDate();

        fechaInicio = fIni.get(Calendar.YEAR) + "/" + (fIni.get(Calendar.MONTH) + 1) + "/" + fIni.get(Calendar.DAY_OF_MONTH);
        fechaFinal = fFin.get(Calendar.YEAR) + "/" + (fFin.get(Calendar.MONTH) + 1) + "/" + fFin.get(Calendar.DAY_OF_MONTH);
        boolean hayRegistros = false;

        List<Seccion> listaSecciones = new ArrayList<>();
        List<SeccionPorcentaje> listaSeccionesPorcentaje = new ArrayList<>();
        try {
            Conexion.sentencia = Conexion.con.createStatement();
            Conexion.rs = Conexion.sentencia.executeQuery("select seccion.num_sec from "
                    + "alumno, ejercicio_alumno, seccion, profesor, director "
                    + "where ejercicio_alumno.cod_alu = alumno.cod_alu and "
                    + "alumno.cod_sec = seccion.cod_sec and seccion.cod_pro = profesor.cod_pro "
                    + "and profesor.cod_dir = director.cod_dir and director.cod_dir = '" + Director.CODIGO + "' "
                    + "and ejercicio_alumno.fec_eje between '" + fechaInicio + "' and '" + fechaFinal + "' order by seccion.num_sec asc");


            while (Conexion.rs.next()) {
                hayRegistros = true;
                listaSecciones.add(new Seccion(Conexion.rs.getString("num_sec")));
            }
            Conexion.sentencia.close();

            /*
             * SACANDO SECCIONES DEL DIRECTOR
             */
            Conexion.sentencia = Conexion.con.createStatement();
            Conexion.rs = Conexion.sentencia.executeQuery("select DISTINCT seccion.num_sec from "
                    + "alumno, ejercicio_alumno, seccion, profesor, director "
                    + "where ejercicio_alumno.cod_alu = alumno.cod_alu and "
                    + "alumno.cod_sec = seccion.cod_sec and seccion.cod_pro = profesor.cod_pro "
                    + "and profesor.cod_dir = director.cod_dir and director.cod_dir = '" + Director.CODIGO + "' "
                    + "order by seccion.num_sec asc");


            while (Conexion.rs.next()) {
                listaSeccionesPorcentaje.add(new SeccionPorcentaje(0, Conexion.rs.getString("num_sec")));
            }
            Conexion.sentencia.close();
        } catch (SQLException ex) {
            Logger.getLogger(JedicDirector.class.getName()).log(Level.SEVERE, null, ex);
        }

        if (hayRegistros) {
            calcularPorcentajesSecciones(listaSecciones, listaSeccionesPorcentaje);
            SeccionPorcentaje mayorSeccion = getMayorPorcentajeDeSeccion(listaSeccionesPorcentaje);
            System.out.println(mayorSeccion.getPorcentaje());

            Object[] items = {"pdf", "html", "xls"};
            JComboBox combo = new JComboBox(items);
            Object[] obj = {"Formato del Reporte:\n", combo};
            Object stringArray[] = {"Generar Reporte", "Cancelar"};
            int op;

            op = JOptionPane.showOptionDialog(null, obj, "Reportes",
                    JOptionPane.YES_NO_OPTION, JOptionPane.PLAIN_MESSAGE,
                    null, stringArray, obj);
            if (op == JOptionPane.YES_OPTION) {
                //                if (Guardar.guardarComo("Reporte uso Secciones "+Fecha.getFecha(true, false)+" ["+Hora.getHora()+"-"+Hora.getMinuto()+"]", "pdf, html, xls", "Guardar Reporte", "/")) {
                final String rutaDelRespaldo = "reportes/visualizar";
                if (!new File(rutaDelRespaldo).exists()) {
                    new File(rutaDelRespaldo).mkdirs();
                }
                KReportes.rutaReporte = new File(rutaDelRespaldo).getAbsolutePath() + "/" + Fecha.getAño() + Fecha.getNumeroDeMes() + Fecha.getDia() + Hora.getHora() + Hora.getMinuto() + "_REPORTE_SECCIONES." + combo.getSelectedItem().toString();
                KReportes.extension = combo.getSelectedItem().toString();
                lblMenRepSec.setText(Idioma.palabras.get(K.GENERANDO_REPORTE));
                Map<String, String> parametros = new HashMap<>();
                parametros.put("fecIni", fechaInicio);
                parametros.put("fecFin", fechaFinal);
                parametros.put("director", Director.NOMBRE);
                parametros.put("seccion", mayorSeccion.getNumSec());
                parametros.put("porcentaje", Double.toString(mayorSeccion.getPorcentaje()));
                HiloReporte h = new HiloReporte(listaSecciones, parametros, lblMenRepSec, "reportes" + P.SEPARADOR + "reporteSecciones.jasper", false);
                h.start();
                Historial.addHistorial("Se realizó un reporte: Nombre reporte: Secciones que utilizan más la aplicación. "
                        + "Extensión del reporte: " + KReportes.extension + ". Rango de fechas del reporte: " + fechaInicio + '-' + fechaFinal);
//                }
            }

        } else {
            MensajeHilo.setMensaje(lblMenRepSec, Idioma.palabras.get(K.NO_HAY_EJER), Color.red, 5);
        }
    } else {
        MensajeHilo.setMensaje(lblMenRepSec, Idioma.palabras.get(K.RANGO_FECHAS_INCORR), Color.red, 5);
    }
}//GEN-LAST:event_jButton9ActionPerformed

private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
    if (Validar.isFechaCorrecta(fecIniPro.getSelectedDate(), fecFinPro.getSelectedDate())) {
        String fechaInicio, fechaFinal;
        //año/mes/dia
        Calendar fIni = fecIniPro.getSelectedDate();
        Calendar fFin = fecFinPro.getSelectedDate();

        fechaInicio = fIni.get(Calendar.YEAR) + "/" + (fIni.get(Calendar.MONTH) + 1) + "/" + fIni.get(Calendar.DAY_OF_MONTH);
        fechaFinal = fFin.get(Calendar.YEAR) + "/" + (fFin.get(Calendar.MONTH) + 1) + "/" + fFin.get(Calendar.DAY_OF_MONTH);
        boolean hayRegistros = false;

        List<Profesor> lProfesores = new ArrayList<>();
        List<ProfesorPorcentaje> listaProfesoresPorcentaje = new ArrayList<>();
        try {
//            Conexion.sentencia = Conexion.con.createStatement();
//            String query = "select profesor.nom_pro "
//                    + "from profesor, seccion, ejercicio_profesor, director "
//                    + "where profesor.cod_pro = seccion.cod_pro "
//                    + "and seccion.cod_sec = ejercicio_profesor.cod_sec and "
//                    + "profesor.cod_dir = director.cod_dir and director.cod_dir = '" + Director.CODIGO + "' "
//                    + "and ejercicio_profesor.fec_eje >= '" + fechaInicio + "' and ejercicio_profesor.fec_eje <= '" + fechaFinal + "' order by profesor.cod_pro desc";
//            Conexion.rs = Conexion.sentencia.executeQuery(query);
//            System.out.println("Linea 1513: "+query);
//
//            while (Conexion.rs.next()) {
//                hayRegistros = true;
//                lProfesores.add(new Profesor(Conexion.rs.getString("nom_pro")));
//            }
//            Conexion.sentencia.close();

            List<clases.modelo.Profesor> codProfs = getProfesores(Director.CODIGO);
            for (clases.modelo.Profesor p : codProfs) {
                Conexion.sentencia = Conexion.con.createStatement();
                String query = "select profesor.nom_pro from "
                        + "profesor, ejercicio_profesor "
                        + "where profesor.cod_pro = ejercicio_profesor.cod_pro "
                        + "and profesor.cod_pro = " + p.getCodigo() + " "
                        + "and ejercicio_profesor.fec_cre >= '" + fechaInicio + "' "
                        + "and ejercicio_profesor.fec_cre <= '" + fechaFinal + "' order by profesor.cod_pro desc";
                Conexion.rs = Conexion.sentencia.executeQuery(query);

                while (Conexion.rs.next()) {
                    hayRegistros = true;
                    lProfesores.add(new Profesor(Conexion.rs.getString("nom_pro")));
                }
                Conexion.sentencia.close();
                listaProfesoresPorcentaje.add(new ProfesorPorcentaje(0, p.getNombre()));
            }

//            Conexion.sentencia = Conexion.con.createStatement();
//            Conexion.rs = Conexion.sentencia.executeQuery("select DISTINCT profesor.nom_pro "
//                    + "from profesor, seccion, ejercicio_profesor, director "
//                    + "where profesor.cod_pro = seccion.cod_pro "
//                    + "and seccion.cod_sec = ejercicio_profesor.cod_sec and "
//                    + "profesor.cod_dir = director.cod_dir and director.cod_dir = '" + Director.CODIGO + "'");
//
//
//            while (Conexion.rs.next()) {
//                listaProfesoresPorcentaje.add(new ProfesorPorcentaje(0, Conexion.rs.getString("nom_pro")));
//            }
//            Conexion.sentencia.close();
        } catch (SQLException ex) {
            Logger.getLogger(JedicDirector.class.getName()).log(Level.SEVERE, null, ex);
        }

        if (hayRegistros) {
            calcularPorcentajesProfesor(lProfesores, listaProfesoresPorcentaje);
            ProfesorPorcentaje mayorProfesor = getMayorPorcentajeDeProfesor(listaProfesoresPorcentaje);
            System.out.println(mayorProfesor.getPorcentaje());

            Object[] items = {"pdf", "html", "xls"};
            JComboBox combo = new JComboBox(items);
            Object[] obj = {"Formato del Reporte:\n", combo};
            Object stringArray[] = {"Generar Reporte", "Cancelar"};
            int op;

            op = JOptionPane.showOptionDialog(null, obj, "Reportes",
                    JOptionPane.YES_NO_OPTION, JOptionPane.PLAIN_MESSAGE,
                    null, stringArray, obj);
            if (op == JOptionPane.YES_OPTION) {
                //                if (Guardar.guardarComo("Reporte uso Secciones "+Fecha.getFecha(true, false)+" ["+Hora.getHora()+"-"+Hora.getMinuto()+"]", "pdf, html, xls", "Guardar Reporte", "/")) {
                final String rutaDelRespaldo = "reportes/visualizar";
                if (!new File(rutaDelRespaldo).exists()) {
                    new File(rutaDelRespaldo).mkdirs();
                }
                KReportes.rutaReporte = new File(rutaDelRespaldo).getAbsolutePath() + "/" + Fecha.getAño() + Fecha.getNumeroDeMes() + Fecha.getDia() + Hora.getHora() + Hora.getMinuto() + "_REPORTE_PROFESORES." + combo.getSelectedItem().toString();
                KReportes.extension = combo.getSelectedItem().toString();
                lblMenRepPro.setText(Idioma.palabras.get(K.GENERANDO_REPORTE));
                Map<String, String> parametros = new HashMap<>();
                parametros.put("fecIni", fechaInicio);
                parametros.put("fecFin", fechaFinal);
                parametros.put("director", Director.NOMBRE);
                parametros.put("profesor", mayorProfesor.getNombre());
                parametros.put("porcentaje", Double.toString(mayorProfesor.getPorcentaje()));
                HiloReporte h = new HiloReporte(lProfesores, parametros, lblMenRepPro, "reportes" + P.SEPARADOR + "reporteProfesores.jasper", false);
                h.start();
                Historial.addHistorial("Se realizó un reporte: Nombre reporte: Profesores que utilizan más la aplicación. "
                        + "Extensión del reporte: " + KReportes.extension + ". Rango de fechas del reporte: " + fechaInicio + '-' + fechaFinal);
            }
        } else {
            MensajeHilo.setMensaje(lblMenRepPro, Idioma.palabras.get(K.NO_HAY_EJER), Color.red, 5);
        }
    } else {
        MensajeHilo.setMensaje(lblMenRepPro, Idioma.palabras.get(K.RANGO_FECHAS_INCORR), Color.red, 5);
    }

}//GEN-LAST:event_jButton10ActionPerformed

private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
    if (Validar.isFechaCorrecta(fecIniSec.getSelectedDate(), fecFinSec.getSelectedDate())) {
        String fechaInicio, fechaFinal;
        //año/mes/dia
        Calendar fIni = fecIniSec.getSelectedDate();
        Calendar fFin = fecFinSec.getSelectedDate();

        fechaInicio = fIni.get(Calendar.YEAR) + "/" + (fIni.get(Calendar.MONTH) + 1) + "/" + fIni.get(Calendar.DAY_OF_MONTH);
        fechaFinal = fFin.get(Calendar.YEAR) + "/" + (fFin.get(Calendar.MONTH) + 1) + "/" + fFin.get(Calendar.DAY_OF_MONTH);
        boolean hayRegistros = false;

        List<Seccion> listaSecciones = new ArrayList<>();
        List<SeccionPorcentaje> listaSeccionesPorcentaje = new ArrayList<>();
        try {
            Conexion.sentencia = Conexion.con.createStatement();
            Conexion.rs = Conexion.sentencia.executeQuery("select seccion.num_sec from "
                    + "alumno, ejercicio_alumno, seccion, profesor, director "
                    + "where ejercicio_alumno.cod_alu = alumno.cod_alu and "
                    + "alumno.cod_sec = seccion.cod_sec and seccion.cod_pro = profesor.cod_pro "
                    + "and profesor.cod_dir = director.cod_dir and director.cod_dir = '" + Director.CODIGO + "' "
                    + "and ejercicio_alumno.fec_eje between '" + fechaInicio + "' and '" + fechaFinal + "' order by seccion.num_sec asc");


            while (Conexion.rs.next()) {
                hayRegistros = true;
                listaSecciones.add(new Seccion(Conexion.rs.getString("num_sec")));
            }
            Conexion.sentencia.close();

            /*
             * SACANDO SECCIONES DEL DIRECTOR
             */
            Conexion.sentencia = Conexion.con.createStatement();
            Conexion.rs = Conexion.sentencia.executeQuery("select DISTINCT seccion.num_sec from "
                    + "alumno, ejercicio_alumno, seccion, profesor, director "
                    + "where ejercicio_alumno.cod_alu = alumno.cod_alu and "
                    + "alumno.cod_sec = seccion.cod_sec and seccion.cod_pro = profesor.cod_pro "
                    + "and profesor.cod_dir = director.cod_dir and director.cod_dir = '" + Director.CODIGO + "' "
                    + "order by seccion.num_sec asc");


            while (Conexion.rs.next()) {
                listaSeccionesPorcentaje.add(new SeccionPorcentaje(0, Conexion.rs.getString("num_sec")));
            }
            Conexion.sentencia.close();
        } catch (SQLException ex) {
            Logger.getLogger(JedicDirector.class.getName()).log(Level.SEVERE, null, ex);
        }

        if (hayRegistros) {
            calcularPorcentajesSecciones(listaSecciones, listaSeccionesPorcentaje);
            SeccionPorcentaje mayorSeccion = getMayorPorcentajeDeSeccion(listaSeccionesPorcentaje);
            System.out.println(mayorSeccion.getPorcentaje());
            lblMenRepSec.setText(Idioma.palabras.get(K.GENERANDO_REPORTE));
            Map<String, String> parametros = new HashMap<>();
            parametros.put("fecIni", fechaInicio);
            parametros.put("fecFin", fechaFinal);
            parametros.put("director", Director.NOMBRE);
            parametros.put("seccion", mayorSeccion.getNumSec());
            parametros.put("porcentaje", Double.toString(mayorSeccion.getPorcentaje()));
            HiloReporte h = new HiloReporte(listaSecciones, parametros, lblMenRepSec, "reportes" + P.SEPARADOR + "reporteSecciones.jasper", true);
            h.start();
            Historial.addHistorial("Se envió la orden de impresión de un reporte: Nombre reporte: Secciones que utilizan más la aplicación. "
                    + "Rango de fechas del reporte: " + fechaInicio + '-' + fechaFinal);
        } else {
            MensajeHilo.setMensaje(lblMenRepSec, Idioma.palabras.get(K.NO_HAY_EJER), Color.red, 5);
        }
    } else {
        MensajeHilo.setMensaje(lblMenRepSec, Idioma.palabras.get(K.RANGO_FECHAS_INCORR), Color.red, 5);
    }
}//GEN-LAST:event_jButton11ActionPerformed

private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
    if (Validar.isFechaCorrecta(fecIniPro.getSelectedDate(), fecFinPro.getSelectedDate())) {
        String fechaInicio, fechaFinal;
        //año/mes/dia
        Calendar fIni = fecIniPro.getSelectedDate();
        Calendar fFin = fecFinPro.getSelectedDate();

        fechaInicio = fIni.get(Calendar.YEAR) + "/" + (fIni.get(Calendar.MONTH) + 1) + "/" + fIni.get(Calendar.DAY_OF_MONTH);
        fechaFinal = fFin.get(Calendar.YEAR) + "/" + (fFin.get(Calendar.MONTH) + 1) + "/" + fFin.get(Calendar.DAY_OF_MONTH);
        boolean hayRegistros = false;

        List<Profesor> lProfesores = new ArrayList<>();
        List<ProfesorPorcentaje> listaProfesoresPorcentaje = new ArrayList<>();
        try {
            Conexion.sentencia = Conexion.con.createStatement();
            Conexion.rs = Conexion.sentencia.executeQuery("select profesor.nom_pro "
                    + "from profesor, seccion, ejercicio_profesor, director "
                    + "where profesor.cod_pro = seccion.cod_pro "
                    + "and seccion.cod_sec = ejercicio_profesor.cod_sec and "
                    + "profesor.cod_dir = director.cod_dir and director.cod_dir = '" + Director.CODIGO + "' "
                    + "and ejercicio_profesor.fec_eje >= '" + fechaInicio + "' and ejercicio_profesor.fec_eje <= '" + fechaFinal + "' order by profesor.cod_pro desc");


            while (Conexion.rs.next()) {
                hayRegistros = true;
                lProfesores.add(new Profesor(Conexion.rs.getString("nom_pro")));
            }
            Conexion.sentencia.close();

            /*
             * SACANDO SECCIONES DEL DIRECTOR
             */
            Conexion.sentencia = Conexion.con.createStatement();
            Conexion.rs = Conexion.sentencia.executeQuery("select DISTINCT profesor.nom_pro "
                    + "from profesor, seccion, ejercicio_profesor, director "
                    + "where profesor.cod_pro = seccion.cod_pro "
                    + "and seccion.cod_sec = ejercicio_profesor.cod_sec and "
                    + "profesor.cod_dir = director.cod_dir and director.cod_dir = '" + Director.CODIGO + "'");


            while (Conexion.rs.next()) {
                listaProfesoresPorcentaje.add(new ProfesorPorcentaje(0, Conexion.rs.getString("nom_pro")));
            }
            Conexion.sentencia.close();
        } catch (SQLException ex) {
            Logger.getLogger(JedicDirector.class.getName()).log(Level.SEVERE, null, ex);
        }

        if (hayRegistros) {
            calcularPorcentajesProfesor(lProfesores, listaProfesoresPorcentaje);
            ProfesorPorcentaje mayorProfesor = getMayorPorcentajeDeProfesor(listaProfesoresPorcentaje);
            System.out.println(mayorProfesor.getPorcentaje());
            lblMenRepPro.setText(Idioma.palabras.get(K.GENERANDO_REPORTE));
            Map<String, String> parametros = new HashMap<>();
            parametros.put("fecIni", fechaInicio);
            parametros.put("fecFin", fechaFinal);
            parametros.put("director", Director.NOMBRE);
            parametros.put("profesor", mayorProfesor.getNombre());
            parametros.put("porcentaje", Double.toString(mayorProfesor.getPorcentaje()));
            HiloReporte h = new HiloReporte(lProfesores, parametros, lblMenRepPro, "reportes" + P.SEPARADOR + "reporteProfesores.jasper", true);
            h.start();
            Historial.addHistorial("Se envió la orden de impresión de un reporte: Nombre reporte: Profesores que utilizan más la aplicación. "
                    + "Rango de fechas del reporte: " + fechaInicio + '-' + fechaFinal);
        } else {
            MensajeHilo.setMensaje(lblMenRepPro, Idioma.palabras.get(K.NO_HAY_EJER), Color.red, 5);
        }
    } else {
        MensajeHilo.setMensaje(lblMenRepPro, Idioma.palabras.get(K.RANGO_FECHAS_INCORR), Color.red, 5);
    }
}//GEN-LAST:event_jButton12ActionPerformed

private void tabProMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabProMouseClicked
// TODO add your handling code here:
}//GEN-LAST:event_tabProMouseClicked

private void tabProMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabProMouseReleased
    if (evt.getClickCount() >= 2) {
        this.llenarTablaConProfesores();
    }
}//GEN-LAST:event_tabProMouseReleased

private void tabSecMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabSecMouseReleased
    if (evt.getClickCount() >= 2) {
        this.llenarTablaSecciones();
    }
}//GEN-LAST:event_tabSecMouseReleased

private void tabAluMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabAluMouseReleased
    if (evt.getClickCount() >= 2) {
        this.llenarTablaAlumnos();
    }
}//GEN-LAST:event_tabAluMouseReleased

private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
    new Thread(new Runnable() {

        @Override
        public void run() {
            Ejecutar.ejecutarComando("\"" + Rutas.ARCHIVO_AYUDA + "\"");
        }
    }).start();
    Historial.addHistorial("Se consultó la ayuda del sistema");
}//GEN-LAST:event_jMenuItem1ActionPerformed

private void btnVig1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVig1ActionPerformed
    if (listaVigentes.getSelectedIndex() != -1) {
        desplegarCausalInhabilitacion("", 300);
    }
}//GEN-LAST:event_btnVig1ActionPerformed

private void btnVig2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVig2ActionPerformed
    try {
        ModeloListaProfesor m = (ModeloListaProfesor) listaNoVigentes.getModel();
        clases.modelo.Profesor p = m.getProfesorAt(listaNoVigentes.getSelectedIndex());
        Conexion.sentencia = Conexion.con.createStatement();
        Conexion.sentencia.execute("update profesor set est_pro = 'vigente' where cod_pro = '" + p.getCodigo() + "'");
        Conexion.sentencia.close();

//        Conexion.sentencia = Conexion.con.createStatement();
//                Conexion.sentencia.execute("update seccion set cod_pro = "+Director.COD_SIN_PROFESOR+" where cod_pro = '"+codPro+"'");
//                Conexion.sentencia.close();
        llenarListaProfesores();
        llenarTablaConProfesores();
        llenarComboProfesor();
        llenarTablaSecciones();
        limpiarDatosVigente();
        Historial.addHistorial("Cambió a " + p + " al listado de profesores vigentes");
    } catch (Exception e) {
        System.out.println(e.getMessage());
    }
}//GEN-LAST:event_btnVig2ActionPerformed

private void listaNoVigentesMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listaNoVigentesMouseReleased
}//GEN-LAST:event_listaNoVigentesMouseReleased

private void nomPro1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nomPro1ActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_nomPro1ActionPerformed

private void nomPro1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nomPro1KeyPressed
// TODO add your handling code here:
}//GEN-LAST:event_nomPro1KeyPressed

private void nomPro1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nomPro1KeyReleased
    if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
        emaPro1.requestFocus();
    } else {
        usuPro1.setText(Generador.nombreUsuario(nomPro1.getText()));
    }
}//GEN-LAST:event_nomPro1KeyReleased

private void emaPro1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_emaPro1KeyReleased
// TODO add your handling code here:
}//GEN-LAST:event_emaPro1KeyReleased

private void btnVig3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVig3ActionPerformed
    try {
        ModeloListaProfesor m = (ModeloListaProfesor) listaVigentes.getModel();
        clases.modelo.Profesor p = m.getProfesorAt(listaVigentes.getSelectedIndex());
        String usuario = usuPro1.getText().trim();
        String nombre = nomPro1.getText().trim();
        String mail = emaPro1.getText().trim();
//        String pass = pasPro1.getText().trim();
//        
        if (Buscar.isProfesor(usuario)) {
            int numeroSiguiente = Buscar.getNextContador("profesor", "usu_pro", usuario);
            usuario = usuario + numeroSiguiente;
        }
//        System.out.println("update profesor set nom_pro = '"+nombre+"', usu_pro = '"+usuario+"',  "
//                + "pas_pro = '"+pass+"', ema_pro = '"+mail+"' where cod_pro = '"+p.getCodigo()+"'");
        Conexion.sentencia = Conexion.con.createStatement();
        Conexion.sentencia.execute("update profesor set nom_pro = '" + nombre + "', usu_pro = '" + usuario + "',  "
                + "ema_pro = '" + mail + "' where cod_pro = '" + p.getCodigo() + "'");
        Conexion.sentencia.close();

        llenarListaProfesores();
        llenarTablaConProfesores();
        llenarComboProfesor();
        llenarTablaSecciones();

        MensajeHilo.setMensaje(lblMenInfo, Idioma.palabras.get(K.SE_HA_REEMPL_PROFESOR), Color.blue, 10);
        limpiarDatosVigente();
        Historial.addHistorial("Se actulizaron los datos de un profesor: [profesor=" + nombre + "] ");
    } catch (Exception e) {
        System.out.println(e.getMessage());
    }
}//GEN-LAST:event_btnVig3ActionPerformed

private void nomPro2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nomPro2ActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_nomPro2ActionPerformed

private void nomPro2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nomPro2KeyPressed
// TODO add your handling code here:
}//GEN-LAST:event_nomPro2KeyPressed

private void nomPro2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nomPro2KeyReleased
// TODO add your handling code here:
}//GEN-LAST:event_nomPro2KeyReleased

private void listaProfesoresMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listaProfesoresMouseReleased
    try {
        ModeloListaProfesor m = (ModeloListaProfesor) listaProfesores.getModel();
        clases.modelo.Profesor p = m.getProfesorAt(listaProfesores.getSelectedIndex());
        nomPro2.setText(p.getNombre());
    } catch (Exception e) {
    }
}//GEN-LAST:event_listaProfesoresMouseReleased

private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed

    try {
        int a1, a2;
        a1 = Integer.parseInt(ano1.getValue().toString());
        a2 = Integer.parseInt(ano2.getValue().toString());

        clases.modelo.Profesor p;
        ModeloListaProfesor m = (ModeloListaProfesor) listaProfesores.getModel();
        p = m.getProfesorAt(listaProfesores.getSelectedIndex());
        int hayRegistros = 0;

        List<Profesor> listaAno = new ArrayList<>();

        //ciclo para recorrer del año1 al año2
        for (int anio = a1; anio <= a2; anio++) {
            Conexion.sentencia = Conexion.con.createStatement();
            //año/mes/dia
            Conexion.rs = Conexion.sentencia.executeQuery("select * from ejercicio_profesor "
                    + "where ejercicio_profesor.fec_eje >= '" + anio + "/01/01' "
                    + "and ejercicio_profesor.fec_eje <= '" + anio + "/12/31' "
                    + "and ejercicio_profesor.cod_pro = '" + p.getCodigo() + "'");

            while (Conexion.rs.next()) {
                hayRegistros++;
                listaAno.add(new Profesor(Integer.toString(anio)));
            }
            Conexion.sentencia.close();
        }


        if (hayRegistros != 0) {
            Object[] items = {"pdf", "html", "xls"};
            JComboBox combo = new JComboBox(items);
            Object[] obj = {"Formato del Reporte:\n", combo};
            Object stringArray[] = {"Generar Reporte", "Cancelar"};
            int op;

            op = JOptionPane.showOptionDialog(null, obj, "Reportes",
                    JOptionPane.YES_NO_OPTION, JOptionPane.PLAIN_MESSAGE,
                    null, stringArray, obj);
            if (op == JOptionPane.YES_OPTION) {
                final String rutaDelRespaldo = "reportes/visualizar";
                if (!new File(rutaDelRespaldo).exists()) {
                    new File(rutaDelRespaldo).mkdirs();
                }
                KReportes.rutaReporte = new File(rutaDelRespaldo).getAbsolutePath() + "/" + Fecha.getAño() + Fecha.getNumeroDeMes() + Fecha.getDia() + Hora.getHora() + Hora.getMinuto() + "_REPORTE_COMPARACION_ANUAL_" + p.getNombre() + "." + combo.getSelectedItem().toString();
                KReportes.extension = combo.getSelectedItem().toString();
                lblMenRepSec1.setText(Idioma.palabras.get(K.GENERANDO_REPORTE));
                Map<String, String> parametros = new HashMap<>();
                parametros.put("profesor", p.getNombre());
                HiloReporte h = new HiloReporte(listaAno, parametros, lblMenRepSec1, "reportes" + P.SEPARADOR + "reporteProfesoresSemestre.jasper", false);
                h.start();
                Historial.addHistorial("Se realizó un reporte: Nombre reporte: Reporte avanzado de profesor. "
                        + "Extensión del reporte: " + KReportes.extension + ". Rango de años del reporte: " + a1 + '-' + a2);
            }
        } else {
            MensajeHilo.setMensaje(lblMenRepSec1, Idioma.palabras.get(K.NO_HAY_EJER_RANGO_ANIOS) + " " + ano1.getValue().toString(), Color.red, 5);
        }
    } catch (SQLException ex) {
        Logger.getLogger(JedicDirector.class.getName()).log(Level.SEVERE, null, ex);
    } catch (Exception e) {
        MensajeHilo.setMensaje(lblMenRepSec1, Idioma.palabras.get(K.SELEC_ALGUN_PROFESOR_LISTA), Color.red, 5);
    }
}//GEN-LAST:event_jButton13ActionPerformed

private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
    try {
        int a1, a2;
        a1 = Integer.parseInt(ano1.getValue().toString());
        a2 = Integer.parseInt(ano2.getValue().toString());

        clases.modelo.Profesor p;
        ModeloListaProfesor m = (ModeloListaProfesor) listaProfesores.getModel();
        p = m.getProfesorAt(listaProfesores.getSelectedIndex());
        boolean hayRegistros = false;

        List<Profesor> listaAno = new ArrayList<>();

        //ciclo para recorrer del año1 al año2
        for (int anio = a1; anio <= a2; anio++) {
            Conexion.sentencia = Conexion.con.createStatement();
            //año/mes/dia
            Conexion.rs = Conexion.sentencia.executeQuery("select * from ejercicio_profesor , seccion, profesor "
                    + "where ejercicio_profesor.fec_eje >= '" + anio + "/01/01' "
                    + "and ejercicio_profesor.fec_eje <= '" + anio + "/12/31' "
                    + "and profesor.cod_pro = seccion.cod_pro "
                    + "and profesor.cod_pro = '" + p.getCodigo() + "' and ejercicio_profesor.cod_sec = seccion.cod_sec");

            while (Conexion.rs.next()) {
                hayRegistros = true;
                listaAno.add(new Profesor(Integer.toString(anio)));
            }
            Conexion.sentencia.close();
        }


        if (hayRegistros) {
//            Object[] items = {"pdf", "html", "xls"};
//            JComboBox combo = new JComboBox(items);
//            Object[] obj = {"Formato del Reporte:\n", combo};
//            Object stringArray[] = {"Generar Reporte", "Cancelar"};
//            int op;
//
//            op = JOptionPane.showOptionDialog(null, obj, "Reportes",
//                    JOptionPane.YES_NO_OPTION, JOptionPane.PLAIN_MESSAGE,
//                    null, stringArray, obj);
//            if (op == JOptionPane.YES_OPTION) {
            final String rutaDelRespaldo = "reportes/visualizar";
            if (!new File(rutaDelRespaldo).exists()) {
                new File(rutaDelRespaldo).mkdirs();
            }
//                VariablesReportes.rutaReporte = new File(rutaDelRespaldo).getAbsolutePath() + "/" + Fecha.getAño() + Fecha.getNumeroDeMes() + Fecha.getDia() + Hora.getHora() + Hora.getMinuto() + "_REPORTE_COMPARACION_ANUAL_" + p.getNombre() + "." + combo.getSelectedItem().toString();
//                VariablesReportes.extension = combo.getSelectedItem().toString();
            lblMenRepSec1.setText(Idioma.palabras.get(K.GENERANDO_REPORTE));
            Map<String, String> parametros = new HashMap<>();
            parametros.put("profesor", p.getNombre());
            HiloReporte h = new HiloReporte(listaAno, parametros, lblMenRepSec1, "reportes" + P.SEPARADOR + "reporteProfesoresSemestre.jasper", true);
            h.start();
            Historial.addHistorial("Se envió la orden de impresión de un reporte: Nombre reporte: Reporte avanzado de profesor. "
                    + "Rango de años del reporte: " + a1 + '-' + a2);
//            }
        } else {
            MensajeHilo.setMensaje(lblMenRepSec1, Idioma.palabras.get(K.NO_HAY_EJER_RANGO_ANIOS) + ano1.getValue().toString(), Color.red, 5);
        }
    } catch (SQLException ex) {
        Logger.getLogger(JedicDirector.class.getName()).log(Level.SEVERE, null, ex);
    } catch (Exception e) {
        MensajeHilo.setMensaje(lblMenRepSec1, Idioma.palabras.get(K.SELEC_ALGUN_PROFESOR_LISTA), Color.red, 5);
    }
}//GEN-LAST:event_jButton14ActionPerformed

private void jTabbedPane1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane1MouseReleased
}//GEN-LAST:event_jTabbedPane1MouseReleased

    private void tabSecMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabSecMousePressed
        String seccion = tabSec.getValueAt(tabSec.getSelectedRow(), 2).toString();
        String profe = tabSec.getValueAt(tabSec.getSelectedRow(), 1).toString();
        numSec.setText(seccion);
        cboPro.setSelectedItem(profe);

    }//GEN-LAST:event_tabSecMousePressed

    private void listaVigentesMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listaVigentesMouseReleased
        try {
            ModeloListaProfesor m = (ModeloListaProfesor) listaVigentes.getModel();
            clases.modelo.Profesor p = m.getProfesorAt(listaVigentes.getSelectedIndex());
            nomPro1.setText(p.getNombre());
            usuPro1.setText(Generador.nombreUsuario(nomPro1.getText()));
//            pasPro1.setText(p.getPass());
            nomPro1.requestFocus();
            nomPro1.selectAll();
        } catch (Exception e) {
        }
    }//GEN-LAST:event_listaVigentesMouseReleased

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        if (Mensajes.mensajePreguntaSiNo("¿Realmente desea cargar los datos desde la BD CENTRAL?") == Mensajes.SI) {
            List<clases.modelo.Profesor> profesores = new ArrayList();
            clases.modelo.Profesor p1, p2, p3;

            p1 = new clases.modelo.Profesor();
            p2 = new clases.modelo.Profesor();
            p3 = new clases.modelo.Profesor();

            p1.setNombre("Esteban Valenzuela");
            p2.setNombre("Cesar Arce");
            p3.setNombre("Macarena Pino");

            p1.setUsuario("evalenzuela");
            p2.setUsuario("carce");
            p3.setUsuario("mpino");

            p1.setPass(Generador.codigoRandom(12));
            p2.setPass(Generador.codigoRandom(12));
            p3.setPass(Generador.codigoRandom(12));

            p1.setEmail("evalenzuela@inacapmail.cl");
            p1.setEmail("carce@inacapmail.cl");
            p1.setEmail("mpino@inacapmail.cl");

            profesores.add(p1);
            profesores.add(p2);
            profesores.add(p3);

            for (clases.modelo.Profesor p : profesores) {
                if (Buscar.isProfesor(p.getUsuario())) {
                    int numeroSgte = Buscar.getNextContador("profesor", "usu_pro", p.getUsuario());
                    p.setUsuario(p.getUsuario() + numeroSgte);
                }
                insertar("profesor", "nom_pro, usu_pro, pas_pro, cod_dir, ema_pro, est_pro", "('" + p.getNombre() + "','" + p.getUsuario() + "','" + p.getPass() + "'," + Director.CODIGO + ", '" + p.getEmail() + "', 'vigente');");
            }
            llenarTablaConProfesores();
            llenarListaProfesores();
            llenarComboProfesor();


            //crear secciones
            insertar("seccion", "num_sec, cod_pro", "(201," + getIdProfesor("Esteban Valenzuela") + ")");
            insertar("seccion", "num_sec, cod_pro", "(211," + getIdProfesor("Cesar Arce") + ")");
            insertar("seccion", "num_sec, cod_pro", "(221," + getIdProfesor("Macarena Pino") + ")");
            llenarTablaSecciones();

            cargarDatosSeccionesDesdeBDCENTRAL();
            Historial.addHistorial("Se rescataron profesores y secciones desde la base de datos central");
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed
        if (listaNoVigentes.getSelectedIndex() != -1) {
            ModeloListaProfesor m = (ModeloListaProfesor) listaNoVigentes.getModel();
            clases.modelo.Profesor d = m.getProfesorAt(listaNoVigentes.getSelectedIndex());
            List<Causal> causales = getCausales(d);
            if (causales != null) {
                limpiarFormularioCausales();
                for (Causal c : causales) {
                    jComboBox1.addItem(c);
                }
                desplegarCausal(causales.get(0));
                formCausal.setBounds(0, 0, 369, 347);
                formCausal.setLocationRelativeTo(null);
                formCausal.setVisible(true);
                formCausal.setResizable(false);
            }
        }
    }//GEN-LAST:event_jButton15ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        try {
            Causal c = (Causal) jComboBox1.getSelectedItem();
            desplegarCausal(c);
        } catch (Exception e) {
        }
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void formCausalComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formCausalComponentResized
        System.out.println(formCausal.getWidth() + " " + formCausal.getHeight());
    }//GEN-LAST:event_formCausalComponentResized

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        Historial.addHistorialGeneral("Se terminó la ejecución del sistema JEDIC Director");
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        Cambiar.aparienciaFormulario();
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                try {
                    new JedicDirector().setVisible(true);
                } catch (ParserConfigurationException | SAXException | IOException | ClassNotFoundException | SQLException ex) {
                    Logger.getLogger(JedicDirector.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSpinner ano1;
    private javax.swing.JSpinner ano2;
    private javax.swing.JButton btnCmbCon;
    private javax.swing.JButton btnGenerarSeccion;
    private javax.swing.JButton btnVig1;
    private javax.swing.JButton btnVig2;
    private javax.swing.JButton btnVig3;
    private javax.swing.JComboBox cboPro;
    private javax.swing.JComboBox cboSec;
    private javax.swing.JPasswordField claDir;
    private javax.swing.JPasswordField con1;
    private javax.swing.JPasswordField con2;
    private javax.swing.JTextField emaAlu;
    private javax.swing.JTextField emaPro;
    private javax.swing.JTextField emaPro1;
    private datechooser.beans.DateChooserCombo fecFinPro;
    private datechooser.beans.DateChooserCombo fecFinSec;
    private datechooser.beans.DateChooserCombo fecIniPro;
    private datechooser.beans.DateChooserCombo fecIniSec;
    private javax.swing.JFrame formBarra;
    private javax.swing.JFrame formCausal;
    private javax.swing.JFrame formMenu;
    private javax.swing.JButton inicioSesionBoton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JSplitPane jSplitPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JToolBar jToolBar3;
    private javax.swing.JLabel lblDirector;
    private javax.swing.JLabel lblMen;
    private javax.swing.JLabel lblMenInfo;
    private javax.swing.JLabel lblMenRepPro;
    private javax.swing.JLabel lblMenRepSec;
    private javax.swing.JLabel lblMenRepSec1;
    private javax.swing.JLabel lblMenSesion;
    private javax.swing.JLabel lblPro;
    private javax.swing.JLabel lblSede;
    private javax.swing.JLabel lblUsuAlu;
    private javax.swing.JList listaNoVigentes;
    private javax.swing.JList listaProfesores;
    private javax.swing.JList listaVigentes;
    private javax.swing.JMenu menuIdioma;
    private javax.swing.JTextField nomAlu;
    private javax.swing.JTextField nomPro;
    private javax.swing.JTextField nomPro1;
    private javax.swing.JTextField nomPro2;
    private javax.swing.JTextField numSec;
    private javax.swing.JTable tabAlu;
    private javax.swing.JTable tabPro;
    private javax.swing.JTable tabSec;
    private javax.swing.JTextArea txtErr;
    private javax.swing.JTextField usuDir;
    private javax.swing.JLabel usuPro1;
    // End of variables declaration//GEN-END:variables

    private boolean insertar(String tabla, String insertarEn, String values) {
        try {
            Conexion.sentencia = Conexion.con.createStatement();
            Conexion.sentencia.execute("insert into " + tabla + "(" + insertarEn + ") values" + values);
            return true;
        } catch (SQLException ex) {
            Logger.getLogger(JedicDirector.class.getName()).log(Level.SEVERE, null, ex);
            return false;
        }
    }

    private void llenarTablaConProfesores() {
        Utilidades.dibujarTabla(tabPro, encPro, "cod_pro, nom_pro, usu_pro", "profesor WHERE cod_dir = " + Director.CODIGO + " and est_pro = 'vigente' and nom_pro != 'Sin Profesor' order by nom_pro asc");
    }

    private void llenarTablaSecciones() {
//        Utilidades.dibujarTabla(tabSec, encSec, 
//        "seccion.cod_sec, profesor.nom_pro, seccion.num_sec",
//        "seccion, profesor, director "
//      + "WHERE director.cod_dir = profesor.cod_dir and (profesor.cod_pro = seccion.cod_pro or seccion.cod_pro is null) and director.cod_dir = "+Director.CODIGO+" and profesor.est_pro = 'vigente'");
//        
        try {
            Conexion.sentencia = Conexion.con.createStatement();
            Conexion.rs = Conexion.sentencia.executeQuery("select count(0) as total from " + "seccion, profesor, director "
                    + "WHERE director.cod_dir = profesor.cod_dir and profesor.cod_pro = seccion.cod_pro and director.cod_dir = " + Director.CODIGO + " and profesor.est_pro = 'vigente' order by profesor.nom_pro asc");
            int numero = 0;
            if (Conexion.rs.next()) {
                numero = Conexion.rs.getInt("total");
            }
            Conexion.sentencia.close();
            tabSec.setModel(new javax.swing.table.DefaultTableModel(new Object[numero][encSec.length], encSec));

            Conexion.sentencia = Conexion.con.createStatement();
            Conexion.rs = Conexion.sentencia.executeQuery("select seccion.cod_sec, profesor.nom_pro, seccion.num_sec from " + "seccion, profesor, director "
                    + "WHERE director.cod_dir = profesor.cod_dir and profesor.cod_pro = seccion.cod_pro and director.cod_dir = " + Director.CODIGO + " and profesor.est_pro = 'vigente' order by profesor.nom_pro asc");

            int i = 0;
            while (Conexion.rs.next()) {
                tabSec.setValueAt(Conexion.rs.getString("cod_sec"), i, 0);
                String nombrePro = Conexion.rs.getString("nom_pro");
                if (nombrePro.equalsIgnoreCase("sin profesor")) {
                    tabSec.setValueAt(Idioma.palabras.get(K.SIN_PROFESOR), i, 1);
                } else {
                    tabSec.setValueAt(nombrePro, i, 1);
                }


                tabSec.setValueAt(Conexion.rs.getString("num_sec"), i, 2);
                i++;
            }
            Conexion.sentencia.close();
            tabSec.setEnabled(true);

        } catch (SQLException e1) {
            javax.swing.JOptionPane.showMessageDialog(null, e1.getMessage(), "Error dibujado", 0);
        }
    }

    private void llenarComboProfesor() {
        Utilidades.llenarCombo(cboPro, "profesor where cod_dir = " + Director.CODIGO + " and est_pro = 'vigente' and nom_pro != 'Sin Profesor' order by nom_pro asc", "nom_pro");
        cboPro.insertItemAt(Idioma.palabras.get(K.SIN_PROFESOR), 0);
    }

    private void iniciarSesion() {

        String usu, cla;
        usu = usuDir.getText();
        cla = claDir.getText();
        try {
            Conexion.sentencia = Conexion.con.createStatement();
            Conexion.rs = Conexion.sentencia.executeQuery(
                    "SELECT director.nom_dir, director.cod_dir, director.est_dir, sede.nom_sed, sede.cod_sed "
                    + "FROM director, sede "
                    + "WHERE director.usu_dir = '" + usu + "' and director.pas_dir = '" + cla + "' "
                    + "and sede.cod_sed = director.cod_sed");

            if (Conexion.rs.next()) {
                Director.NOMBRE = Conexion.rs.getString("nom_dir");
                Director.CODIGO = Conexion.rs.getString("cod_dir");
                Director.ESTADO = Conexion.rs.getString("est_dir");
                Director.NOMBRE_SEDE = Conexion.rs.getString("nom_sed");
                Director.CODIGO_SEDE = Conexion.rs.getString("cod_sed");

                if (Director.ESTADO.equalsIgnoreCase("vigente")) {
                    crearRegistroSinProfesor();//---> es para crear secciones sin profesor
                    llenarTablaConProfesores();
                    llenarTablaSecciones();
                    llenarTablaAlumnos();
                    llenarComboProfesor();
                    llenarComboSecciones();
                    llenarListaProfesores();
                    resetearTextoDeErrores();
                    borrarCampos();
                    //aca ocultar este form, y visile el otro que voy acrear
                    this.setVisible(false);
                    usuDir.setText("");
                    claDir.setText("");
                    Redimensionar.redimensionarFormulario(formMenu, true, Idioma.palabras.get(K.PLATAFORMA_DIRECTOR) + ": " + Director.NOMBRE);
                    Cambiar.cambiarIcono(formMenu, "/imagenes/iconoArriba.png");
                    lblDirector.setText(Director.NOMBRE);
                    lblSede.setText(Director.NOMBRE_SEDE);
                    formMenu.setVisible(true);
                    Historial.addHistorial("Inició sesión");
                } else {
                    Mensajes.mensajeWarning(Idioma.palabras.get(K.SU_CUENTA_DESACT));
                    usuDir.setText("");
                    claDir.setText("");
                    Historial.addHistorialGeneral("Un director intentó ingresar, pero esta inhabilitado. "
                            + "[director=" + Director.NOMBRE + ",user=+" + usu + ",sede=" + Director.NOMBRE_SEDE + "]");
                }
            } else {
                MensajeHilo.setMensaje(lblMenSesion, Idioma.palabras.get(K.ERROR_INICIAR_SESION_COMPR_NOM), Color.red, 5);
                usuDir.selectAll();
                usuDir.requestFocus();
                Historial.addHistorialGeneral("Alguien intentó ingresar al sistem como director. [user=" + usu + "]");
            }
            Conexion.sentencia.close();
        } catch (SQLException ex) {
            Logger.getLogger(JedicDirector.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void llenarTablaAlumnos() {
        Utilidades.dibujarTabla(tabAlu, encAlu,
                "alumno.cod_alu, alumno.nom_alu, alumno.usu_alu, seccion.num_sec",
                "director, profesor, seccion, alumno "
                + "WHERE director.cod_dir = profesor.cod_dir and profesor.cod_pro = seccion.cod_pro "
                + "and seccion.cod_sec = alumno.cod_sec and director.cod_dir = " + Director.CODIGO + " order by alumno.nom_alu asc");
    }

    private void llenarComboSecciones() {
        Utilidades.llenarCombo(cboSec, "seccion, director, profesor "
                + "WHERE director.cod_dir = profesor.cod_dir and (profesor.cod_pro = seccion.cod_pro or seccion.cod_pro is null) "
                + "and director.cod_dir = " + Director.CODIGO + "", "seccion.num_sec");
    }

    private void generarAlumno(String nombre, String seccion, String email, boolean isArchivo) {
        String usuario;
        if (isArchivo) {
            usuario = Generador.nombreUsuario(nombre);
        } else {
            usuario = lblUsuAlu.getText();
        }

        String pass = Generador.codigoRandom(12);
        String anio = Fecha.getAño();

        int codSec = getIdSeccion(seccion);

        if (Buscar.isAlumno(usuario)) {
            int numSgte = Buscar.getNextContador("alumno", "usu_alu", usuario);
            if (!isArchivo) {//si no es desde archivo, muestro el mensaje
                MensajeHilo.setMensaje(lblMenInfo, Idioma.palabras.get(K.EL_USU_YA_SE_ENCUENTRA) + ": " + usuario + numSgte + "\"", Color.red, 5);
            }
            usuario = usuario + numSgte;
        }
        /*
         * nom_alu varchar(50), usu_alu varchar(50), pas_alu varchar(12),
         * cod_sec int, año_alu int, ema_alu varchar(80),
         */
        insertar("alumno", "nom_alu, usu_alu, pas_alu, cod_sec, ano_alu, ema_alu", "('" + nombre + "','" + usuario + "','" + pass + "'," + codSec + "," + anio + ", '" + email + "')");
        nomAlu.setText("");
        lblUsuAlu.setText("");
        cboSec.setSelectedIndex(0);
        nomAlu.requestFocus();
        emaAlu.setText("");
        llenarTablaAlumnos();
        if (!isArchivo) {
            MensajeHilo.setMensaje(lblMenInfo, Idioma.palabras.get(K.ALUMNO_CREADO_EXI) + ": \"" + nombre + "\" " + Idioma.palabras.get(K.SECCION) + ": " + seccion, Color.blue, 5);
            Historial.addHistorial("Se ha creado un alumno nuevo de forma manual: [alumno=" + nombre + ", seccion=" + seccion + ", usuario=" + usuario + "]");
        } else {
            Historial.addHistorial("Se ha creado un alumno nuevo de forma automática a partir de un archivo: [alumno=" + nombre + ", seccion=" + seccion + ", usuario=" + usuario + "]");
        }
    }

    private int getIdProfesor(String nomPro) {
        try {
            Conexion.sentencia = Conexion.con.createStatement();
            String buscar;
            int id;
            buscar = "SELECT profesor.cod_pro "
                    + "FROM profesor, director "
                    + "WHERE profesor.cod_dir = director.cod_dir "
                    + "and director.cod_dir = " + Director.CODIGO + " and profesor.nom_pro = '" + nomPro + "'";
            Conexion.rs = Conexion.sentencia.executeQuery(buscar);
            if (Conexion.rs.next()) {
                id = Conexion.rs.getInt(1);
                Conexion.sentencia.close();
                return id;
            }

        } catch (SQLException e1) {
            javax.swing.JOptionPane.showMessageDialog(null, e1.getMessage(), "error", 0);
        } catch (Exception e2) {
            javax.swing.JOptionPane.showMessageDialog(null, e2.getMessage(), "error", 0);
        }
        return -1;
    }

    private int getIdSeccion(String numeroSeccion) {
        try {
            Conexion.sentencia = Conexion.con.createStatement();
            String buscar;
            int id;
            buscar = "SELECT seccion.cod_sec "
                    + "FROM seccion, director, profesor "
                    + "WHERE director.cod_dir = profesor.cod_dir and profesor.cod_pro = seccion.cod_pro "
                    + "and seccion.num_sec = " + numeroSeccion + " and director.cod_dir = " + Director.CODIGO + "";
            Conexion.rs = Conexion.sentencia.executeQuery(buscar);
            if (Conexion.rs.next()) {
                id = Conexion.rs.getInt(1);
                Conexion.sentencia.close();
                return id;
            }
        } catch (SQLException e1) {
            javax.swing.JOptionPane.showMessageDialog(null, "Error al obtener identificador SQL: " + e1.getMessage(), "error", 0);
        } catch (Exception e2) {
            javax.swing.JOptionPane.showMessageDialog(null, "Error al obtener identificador", "error", 0);
        }
        return -1;//por si no lo encontro
    }

    private void resetearTextoDeErrores() {
        txtErr.setText("");
    }

    private void borrarCampos() {
        try {
            nomPro.setText("");
            numSec.setText("");
            nomAlu.setText("");
            lblUsuAlu.setText("");
            lblPro.setText("");
            con1.setText("");
            con2.setText("");
            txtErr.setText("");
            cboSec.setSelectedIndex(0);
            cboPro.setSelectedIndex(0);
        } catch (Exception e) {
        }
    }

    private void crearProfesor() {
        List<JTextComponent> lista = new ArrayList<>();
        lista.add(nomPro);
        lista.add(emaPro);

        if (!Validar.isJTextComponentVacio(lista)) {
            if (!Validar.isJTextComponentConSimbolos(nomPro)) {
                if (Validar.isNombreDeUsuarioCorrecto(lblPro.getText())) {
                    if (Validar.isMailCorrecto(emaPro.getText())) {
                        String nom = nomPro.getText();
                        String pass = Generador.codigoRandom(12);
                        String nomUsu = lblPro.getText();
                        String email = emaPro.getText();

                        if (Buscar.isProfesor(nomUsu)) {
                            int numeroSgte = Buscar.getNextContador("profesor", "usu_pro", nomUsu);
//                            MensajeHilo.setMensaje(lblMenInfo2,Idioma.palabras.get(K.EL_USU_YA_SE_ENCUENTRA)+": \""+nomUsu+numeroSgte+"\"", Color.RED, 6);
//                            insertar("profesor","nom_pro, usu_pro, pas_pro, cod_dir, ema_pro, est_pro","('"+nom+"','"+nomUsu+numeroSgte+"','"+pass+"',"+Director.CODIGO+", '"+email+"', 'vigente');");
                            nomUsu = nomUsu + numeroSgte;
                        }
                        //                        }else{
//                            insertar("profesor","nom_pro, usu_pro, pas_pro, cod_dir, ema_pro, est_pro","('"+nom+"','"+nomUsu+"','"+pass+"',"+Director.CODIGO+", '"+email+"', 'vigente');");
//                        }
                        if (insertar("profesor", "nom_pro, usu_pro, pas_pro, cod_dir, ema_pro, est_pro",
                                "('" + nom + "','" + nomUsu + "','" + pass + "'," + Director.CODIGO + ", '" + email + "', 'vigente');")) {//si inserto bien en la BD
                            llenarTablaConProfesores();
                            llenarListaProfesores();
                            llenarComboProfesor();
                            nomPro.setText("");
                            lblPro.setText("");
                            emaPro.setText("");
                            MensajeHilo.setMensaje(lblMenInfo, Idioma.palabras.get(K.PROFESOR_CREADO_EXITO) + ": " + nom, Color.blue, 5);
                            nomPro.requestFocus();
                            Historial.addHistorial("Se ha creado un profesor: [profesor=" + nom + ", usuario=" + nomUsu + ", sede=" + Director.NOMBRE_SEDE + "]");
                        } else {
                            System.out.println("No se puede registrar al profesor en la BD");
                        }
                    } else {
                        MensajeHilo.setMensaje(lblMenInfo, Idioma.palabras.get(K.MAIL_INCORRECTO), Color.red, 3);
                        emaPro.requestFocus();
                        emaPro.selectAll();
                    }
                } else {
                    MensajeHilo.setMensaje(lblMenInfo, Idioma.palabras.get(K.NOMBRE_PROFESOR_INCO), Color.red, 3);
                    nomPro.requestFocus();
                    nomPro.selectAll();
                }
            } else {
                MensajeHilo.setMensaje(lblMenInfo, Idioma.palabras.get(K.NO_SE_PERMIT_SIMB), Color.red, 3);
            }
        } else {
            MensajeHilo.setMensaje(lblMenInfo, Idioma.palabras.get(K.FALTAN_DATOS), Color.red, 3);
        }
    }

    private void crearSeccion() {
        if (!Validar.isJTextComponentVacio(numSec)) {
//            if(numSec.getText().trim().length() <= 2){
            try {
                String profesor;
                int seccion;
                int profesorID;
                boolean actualizar = false, crear = false;
                seccion = Integer.parseInt(numSec.getText());
                //esto tengo que cambiarlo, cuando llene el combo de profes, tengo que saber agregar el codigo del profesor
                if (seccion >= 1) {
                    profesor = cboPro.getSelectedItem().toString();
                    boolean sinProfesor = profesor.equalsIgnoreCase(Idioma.palabras.get(K.SIN_PROFESOR));
                    if (!sinProfesor) {
                        profesorID = getIdProfesor(profesor);
                    } else {
                        profesorID = Director.COD_SIN_PROFESOR;
                    }

                    Conexion.sentencia = Conexion.con.createStatement();
                    Conexion.rs = Conexion.sentencia.executeQuery(
                            "SELECT seccion.cod_sec "
                            + "FROM seccion, director, profesor "
                            + "WHERE director.cod_dir = profesor.cod_dir and profesor.cod_pro = seccion.cod_pro "
                            + "and seccion.num_sec = " + seccion + " and director.cod_dir = " + Director.CODIGO + "");

                    if (Conexion.rs.next()) {//seccion existente, solo asignar (update)
                        if (Mensajes.mensajePreguntaSiNo(
                                Idioma.palabras.get(K.REALMENTE_DESEA_ACT_SEC) + ": "
                                + Idioma.palabras.get(K.PROFESOR) + "-->" + profesor + ", "
                                + Idioma.palabras.get(K.SECCION) + "-->" + seccion) == Mensajes.SI) {
                            actualizar = true;
                            int codSec = Conexion.rs.getInt("cod_sec");
                            Conexion.sentencia.close();

                            Conexion.sentencia = Conexion.con.createStatement();
                            String update;
                            update = "UPDATE seccion "
                                    + "SET seccion.cod_pro = " + profesorID + " "
                                    + "WHERE seccion.cod_sec = " + codSec + "";
                            Conexion.sentencia.execute(update);
                            llenarTablaSecciones();
                            MensajeHilo.setMensaje(lblMenInfo, Idioma.palabras.get(K.SECCION_ACTUALIZADA) + ": " + seccion, Color.blue, 5);
                            Historial.addHistorial("Se ha asignado a la sección " + seccion + " de la sede " + Director.NOMBRE_SEDE + " un nuevo profesor: [profesor=" + profesor + "]");
                        } else {
                            Conexion.sentencia.close();
                        }
                    } else {//crear seccion y asignar
                        crear = true;
                        if (insertar("seccion", "num_sec, cod_pro", "(" + seccion + "," + profesorID + ")")) {
                            llenarTablaSecciones();
                            MensajeHilo.setMensaje(lblMenInfo, Idioma.palabras.get(K.SECCION_CREADA_EXITO) + ": " + seccion, Color.blue, 5);
                            Historial.addHistorial("Se ha creado una nueva sección: [sección=" + seccion + "] de la sede " + Director.NOMBRE_SEDE + " con el siguiente profesor: [profesor=" + profesor + "]");
                        }
                    }
                    if (actualizar || crear) {//si actualiza o crea una seccion, hace todo esto
                        numSec.setText("");
                        cboPro.setSelectedIndex(0);
                        numSec.requestFocus();
                        llenarComboSecciones();
                    }
                } else {
                    MensajeHilo.setMensaje(lblMenInfo, Idioma.palabras.get(K.NO_SE_ADMITEN_SEC_MEN_1), Color.red, 5);
                }
            } catch (SQLException ex) {
                Logger.getLogger(JedicDirector.class.getName()).log(Level.SEVERE, null, ex);
            } catch (NumberFormatException e) {
                MensajeHilo.setMensaje(lblMenInfo, Idioma.palabras.get(K.SOLO_ACEPT_NUM_CAMPO_SECCION), Color.red, 5);
                numSec.setSelectionStart(0);
                numSec.setSelectionEnd(numSec.getText().length());
                numSec.requestFocus();
            }
//            }else{
//                MensajeHilo.setMensaje(lblMenInfo1, Idioma.palabras.get(K.SOLO_ADMITEN_2_NUM), Color.red, 5);
//            }
        } else {
            MensajeHilo.setMensaje(lblMenInfo, Idioma.palabras.get(K.INGRESE_AL_SEC), Color.red, 5);
        }
    }

    private void cambiarContraseña() {
        String c1, c2;
        c1 = con1.getText();
        c2 = con2.getText();

        if (!c1.equals(c2)) {
            txtErr.setText(Idioma.palabras.get(K.LAS_CONTRASENAS_NO_COINCIDEN));
        } else {
            String er = Clave.isClaveCorrecta(c2);
            if (er.isEmpty()) {//contraseña OK
                try {
                    //contraseña OK
                    Conexion.sentencia = Conexion.con.createStatement();
                    Conexion.sentencia.execute("UPDATE director SET pas_dir = '" + c1 + "' WHERE cod_dir = " + Director.CODIGO + "");
                    Conexion.sentencia.close();
                    Historial.addHistorial("Se ha cambiado la contraseña");
                } catch (SQLException ex) {
                    Logger.getLogger(JedicDirector.class.getName()).log(Level.SEVERE, null, ex);
                }

                txtErr.setForeground(Color.blue);
                txtErr.setText(Idioma.palabras.get(K.SU_CONTRASENA_CAMBIADO_OK));
            } else {
                txtErr.setForeground(Color.red);
                txtErr.setText(Idioma.palabras.get(K.LAS_CONTR_CONTENER_SIG) + ":\n\n" + er);
            }
        }
    }

    private void calcularPorcentajesSecciones(List<Seccion> listaSecciones, List<SeccionPorcentaje> listaSeccionesPorcentaje) {
        double porcentaje, cantidad;
        double total = listaSecciones.size();
        for (int i = 0; i < listaSeccionesPorcentaje.size(); i++) {
            cantidad = getCantidadDeSecciones(listaSeccionesPorcentaje.get(i).getNumSec(), listaSecciones);
            porcentaje = Porcentaje.getPorcentaje(cantidad, total, 2).doubleValue();
            listaSeccionesPorcentaje.get(i).setPorcentaje(porcentaje);
        }
    }

    private double getCantidadDeSecciones(String numSec, List<Seccion> listaSecciones) {
        double cont = 0;
        for (int i = 0; i < listaSecciones.size(); i++) {
            if (listaSecciones.get(i).getNumSec().equalsIgnoreCase(numSec)) {
                cont++;
            }
        }
        return cont;
    }

    private SeccionPorcentaje getMayorPorcentajeDeSeccion(List<SeccionPorcentaje> listaSeccionesPorcentaje) {
        SeccionPorcentaje sp;
        SeccionPorcentaje mayor = null;
        for (int i = 0; i < listaSeccionesPorcentaje.size(); i++) {
            sp = listaSeccionesPorcentaje.get(i);
            if (i == 0) {
                mayor = sp;
            } else if (sp.getPorcentaje() > mayor.getPorcentaje()) {
                mayor = sp;
            }
        }
        return mayor;
    }

    private void calcularPorcentajesProfesor(List<Profesor> listaProfesores, List<ProfesorPorcentaje> listaProfesoresPorcentaje) {
        double porcentaje, cantidad;
        double total = listaProfesores.size();
        for (int i = 0; i < listaProfesoresPorcentaje.size(); i++) {
            cantidad = getCantidadDeProfesores(listaProfesoresPorcentaje.get(i).getNombre(), listaProfesores);
            porcentaje = Porcentaje.getPorcentaje(cantidad, total, 2).doubleValue();
            listaProfesoresPorcentaje.get(i).setPorcentaje(porcentaje);
        }
    }

    private double getCantidadDeProfesores(String nombre, List<Profesor> listaProfesores) {
        double cont = 0;
        System.out.println(nombre);
        for (int i = 0; i < listaProfesores.size(); i++) {
            if (listaProfesores.get(i).getNombre().equalsIgnoreCase(nombre)) {
                cont++;
            }
        }
        return cont;
    }

    private ProfesorPorcentaje getMayorPorcentajeDeProfesor(List<ProfesorPorcentaje> listaProfesoresPorcentaje) {
        ProfesorPorcentaje pp;
        ProfesorPorcentaje mayor = null;
        for (int i = 0; i < listaProfesoresPorcentaje.size(); i++) {
            pp = listaProfesoresPorcentaje.get(i);
            if (i == 0) {
                mayor = pp;
            } else if (pp.getPorcentaje() > mayor.getPorcentaje()) {
                mayor = pp;
            }
        }
        return mayor;
    }

    private void generarAlumno() {
        if (cboSec.getItemCount() != 0) {
            List<JTextComponent> lista = new ArrayList<>();
            lista.add(nomAlu);
            lista.add(emaAlu);
            if (!Validar.isJTextComponentVacio(lista)) {
                if (!Validar.isJTextComponentConSimbolos(nomAlu)) {
                    if (Validar.isMailCorrecto(emaAlu.getText())) {
                        String nombre = nomAlu.getText();
                        String seccion = cboSec.getSelectedItem().toString();
                        String email = emaAlu.getText();
                        generarAlumno(nombre, seccion, email, false);
                    } else {
                        MensajeHilo.setMensaje(lblMenInfo, Idioma.palabras.get(K.MAIL_INCORRECTO), Color.red, 5);
                    }
                } else {
                    MensajeHilo.setMensaje(lblMenInfo, Idioma.palabras.get(K.NO_SE_PERMIT_SIMB), Color.red, 5);
                }
            } else {
                MensajeHilo.setMensaje(lblMenInfo, Idioma.palabras.get(K.FALTAN_DATOS), Color.red, 5);
            }
        } else {
            MensajeHilo.setMensaje(lblMenInfo, Idioma.palabras.get(K.PRIMERO_CREAR_SEC), Color.red, 5);
        }
    }

    private void llenarListaProfesores() {
        List<clases.modelo.Profesor> vigentes, noVigentes, todos;
        vigentes = new ArrayList<>();
        noVigentes = new ArrayList<>();
        todos = new ArrayList<>();
        String cod, nom, usu, pas, codDir, ema, est;

        try {
            Conexion.sentencia = Conexion.con.createStatement();
            Conexion.rs = Conexion.sentencia.executeQuery("select * from profesor where cod_dir = '" + Director.CODIGO + "' and nom_pro != 'Sin Profesor'");
            while (Conexion.rs.next()) {
                cod = Conexion.rs.getString("cod_pro");
                nom = Conexion.rs.getString("nom_pro");
                usu = Conexion.rs.getString("usu_pro");
                pas = Conexion.rs.getString("pas_pro");
                codDir = Conexion.rs.getString("cod_dir");
                ema = Conexion.rs.getString("ema_pro");
                est = Conexion.rs.getString("est_pro");
                clases.modelo.Profesor p =
                        new clases.modelo.Profesor(cod, nom, usu, pas, codDir, ema, est);

                todos.add(p);
                if (p.getEstado().equalsIgnoreCase("vigente")) {
                    vigentes.add(p);
                } else if (p.getEstado().equalsIgnoreCase("no-vigente")) {
                    noVigentes.add(p);
                }
            }
            Conexion.sentencia.close();
            listaProfesores.setModel(new ModeloListaProfesor(todos));
            listaVigentes.setModel(new ModeloListaProfesor(vigentes));
            listaNoVigentes.setModel(new ModeloListaProfesor(noVigentes));
        } catch (SQLException ex) {
            Logger.getLogger(JedicDirector.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void limpiarDatosVigente() {
        nomPro1.setText("");
        usuPro1.setText("");
        emaPro1.setText("");
//        pasPro1.setText("");
    }

    private void conectarBD() throws ParserConfigurationException, SAXException, IOException, ClassNotFoundException, SQLException {
        Conexion.conectar(getDatosConexion());
    }

    private DatosConexion getDatosConexion() throws ParserConfigurationException, SAXException, IOException {
        final Tag conexion = DOM.procesarArchivoXMLDom(new File(Rutas.CONFIG_BD));

        return new DatosConexion() {

            @Override
            public String getServer() {
                Tag server = getTag("server");
                return server.getContenido();
            }

            @Override
            public String getUser() {
                return getAtributo("user", conexion).getValor();
            }

            @Override
            public String getPass() {
                return getAtributo("pass", conexion).getValor();
            }

            @Override
            public String getBaseDeDatos() {
                Tag bd = getTag("baseDeDatos");
                return bd.getContenido();
            }

            private Tag getTag(String nomTag) {
                for (Tag t : conexion.getTagsHijos()) {
                    if (t.getNombre().equalsIgnoreCase(nomTag)) {
                        return t;
                    }
                }
                return null;
            }

            private Atributo getAtributo(String nomAtributo, Tag tag) {
                for (Atributo a : tag.getAtributos()) {
                    if (a.getNombre().equalsIgnoreCase(nomAtributo)) {
                        return a;
                    }
                }
                return null;
            }
        };
    }

    private void cargarIdiomaEnComponentes() {
        List<String> t = Idioma.palabras;

        jLabel5.setText(Idioma.palabras.get(K.DIRECTOR) + ":");
        jLabel6.setText(Idioma.palabras.get(K.SEDE) + ":");

        formMenu.setTitle(Idioma.palabras.get(K.PLATAFORMA_DIRECTOR) + ": " + Director.NOMBRE);

        //formulario iniciar sesión
        this.setTitle(t.get(K.PLATAFORMA_DIRECTOR));
//        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(t.get(K.INICIAR_SESION)));
        jLabel1.setText(t.get(K.USUARIO));
        jLabel2.setText(t.get(K.CONTRASENA));
        jLabel26.setText("<html><u>"+t.get(K.RECUPERAR_CONTRASENA)+"</u></html>");
        inicioSesionBoton.setText(t.get(K.INICIAR_SESION));

        //botones eliminar
        jButton7.setText(t.get(K.ELIMINAR));
        jButton4.setText(t.get(K.ELIMINAR));
        jButton6.setText(t.get(K.ELIMINAR));


        //panel crear profesor
        jTabbedPane1.setTitleAt(0, t.get(K.CREAR_PROFESOR));
        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder(t.get(K.INFORMACION)));
        jLabel15.setText(t.get(K.NOMBRE_PROFESOR));
        jLabel16.setText(t.get(K.USUARIO));
        jLabel24.setText(t.get(K.MAIL));
        jButton3.setText(t.get(K.CREAR_PROFESOR));
        jLabel10.setText(t.get(K.LISTADO_PROFESORES));

        //panel crear sección
        jTabbedPane1.setTitleAt(1, t.get(K.CREAR_SECCION));
        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder(t.get(K.INFORMACION)));
        jLabel14.setText(Idioma.palabras.get(K.NUM_SECCION));
        jLabel12.setText(Idioma.palabras.get(K.PROFESOR));
        btnGenerarSeccion.setText(Idioma.palabras.get(K.CREAR_SECCION));
        jLabel13.setText(Idioma.palabras.get(K.LISTADO_SECCIONES));

        //panel modificar profesor
        jTabbedPane1.setTitleAt(2, t.get(K.MODIFICAR_PROFESOR));
        listaVigentes.setBorder(javax.swing.BorderFactory.createTitledBorder(t.get(K.PROFESORES_VIGENTES)));
        listaNoVigentes.setBorder(javax.swing.BorderFactory.createTitledBorder(t.get(K.PROFESORES_NO_VIGENTES)));
        jPanel20.setBorder(javax.swing.BorderFactory.createTitledBorder(t.get(K.DATOS_NUEVO_PROFESOR)));
        jLabel32.setText(t.get(K.NOMBRE_PROFESOR));
        jLabel35.setText(t.get(K.USUARIO));
        jLabel37.setText(t.get(K.MAIL));
//        jLabel38.setText(t.get(K.CONTRASENA));
        btnVig3.setText(t.get(K.REEMPLAZAR_PROFESOR));

        //panel crear alumno
        jTabbedPane1.setTitleAt(3, t.get(K.CREAR_ALUMNO));
        jPanel13.setBorder(javax.swing.BorderFactory.createTitledBorder(t.get(K.INFORMACION)));
        jLabel18.setText(t.get(K.NOMBRE));
        jLabel19.setText(t.get(K.USUARIO));
        jLabel7.setText(t.get(K.SECCION));
        jLabel25.setText(t.get(K.MAIL));
        jButton2.setText(t.get(K.CREAR_ALUMNO));
        jButton5.setText(t.get(K.IMPORTAR_XLS));
        jLabel17.setText(t.get(K.LISTADO_ALUMNOS));

        //panel reportes
        jTabbedPane1.setTitleAt(4, t.get(K.REPORTES));
        jLabel34.setText(t.get(K.SECCIONES));
        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(t.get(K.SECCIONES_UTIL_MAS_APLI)));
        jPanel16.setBorder(javax.swing.BorderFactory.createTitledBorder(t.get(K.PROFESORES_UTIL_MAS_APLI)));
        jLabel28.setText(t.get(K.FECHA_INICIO));
        jLabel29.setText(t.get(K.FECHA_TERMINO));
        jLabel31.setText(t.get(K.FECHA_INICIO));
        jLabel30.setText(t.get(K.FECHA_TERMINO));
        jLabel33.setText(t.get(K.PROFESORES));

        //panel reportes avanzados
        jTabbedPane1.setTitleAt(5, t.get(K.REPORTES_AVANZADOS));
        listaProfesores.setBorder(javax.swing.BorderFactory.createTitledBorder(t.get(K.PROFESORES)));
        jPanel19.setBorder(javax.swing.BorderFactory.createTitledBorder(t.get(K.DATOS_REPORTE)));
        jLabel39.setText(t.get(K.NOMBRE_PROFESOR));
        jLabel42.setText(t.get(K.ANIO));
        jLabel41.setText(t.get(K.ANIO));
        jLabel36.setText(t.get(K.HASTA));

        //panel cambiar contraseña
        jTabbedPane1.setTitleAt(6, t.get(K.CAMBIAR_CONTRASENA));
        jPanel15.setBorder(javax.swing.BorderFactory.createTitledBorder(t.get(K.INFORMACION)));
        jLabel21.setText(t.get(K.CONTRASENA_NUEVA));
        jLabel22.setText(t.get(K.REPETIR_CONTRASENA));
        btnCmbCon.setText(t.get(K.CAMBIAR_CONTRASENA));
        txtErr.setBorder(javax.swing.BorderFactory.createTitledBorder(t.get(K.ERRORES)));

        //menus
        jMenu1.setText(t.get(K.AYUDA));
        jMenuItem1.setText(t.get(K.AYUDA_DE_CONTENIDOS));

        //IDIOMA
        cargarMenuIdioma();

        //modificando encabezados
        encPro[0] = Idioma.palabras.get(K.CODIGO);
        encPro[1] = Idioma.palabras.get(K.NOMBRE);
        encPro[2] = Idioma.palabras.get(K.USUARIO);
//        encPro[3] = Idioma.palabras.get(K.CONTRASENA);

        encSec[0] = Idioma.palabras.get(K.CODIGO);
        encSec[1] = Idioma.palabras.get(K.PROFESOR);
        encSec[2] = Idioma.palabras.get(K.NUM_SECCION);

        encAlu[0] = Idioma.palabras.get(K.CODIGO);
        encAlu[1] = Idioma.palabras.get(K.NOMBRE);
        encAlu[2] = Idioma.palabras.get(K.USUARIO);
        encAlu[3] = Idioma.palabras.get(K.SECCION);
//        encAlu[4] = Idioma.palabras.get(K.CONTRASENA);

        //tablas y combos

//        cboPro.removeItemAt(0);
//        cboPro.insertItemAt(Idioma.palabras.get(K.SIN_PROFESOR), 0);
//        cboPro.setSelectedIndex(0);
    }

    private void cargarMenuIdioma() {
        menuIdioma.setText(Idioma.palabras.get(K.IDIOMA));
        File ar = new File(Rutas.CARPETA_IDIOMAS);
        menuIdioma.removeAll();
        for (File f : ar.listFiles()) {
            if (!f.getName().contains("idioma") && !f.getName().contains("svn")) {
                try {
                    Tag root = DOM.procesarArchivoXMLDom(f);
                    final String ruta = f.getPath();


                    javax.swing.JCheckBoxMenuItem item = new javax.swing.JCheckBoxMenuItem(root.getValorDeAtributo("idioma"));
                    item.addActionListener(new ActionListener() {

                        @Override
                        public void actionPerformed(ActionEvent e) {
                            try {
                                Tag root = DOM.procesarArchivoXMLDom(new File(Rutas.CARPETA_IDIOMAS + Rutas.ARCHIVO_IDIOMA));
                                root.actualizarValorAtributo("ruta", ruta.replaceAll("\\\\", "/"));
                                DOM.crearArchivoXML(root, new File(Rutas.CARPETA_IDIOMAS + Rutas.ARCHIVO_IDIOMA));
                                Idioma.cargarConfiguracionDeIdioma();
                                cargarIdiomaEnComponentes();
                                cambiarTitulos(tabAlu, encAlu);
                                cambiarTitulos(tabPro, encPro);
                                cambiarTitulos(tabSec, encSec);
                            } catch (TransformerConfigurationException ex) {
                                Logger.getLogger(JedicDirector.class.getName()).log(Level.SEVERE, null, ex);
                            } catch (FileNotFoundException ex) {
                                Logger.getLogger(JedicDirector.class.getName()).log(Level.SEVERE, null, ex);
                            } catch (TransformerException | ParserConfigurationException | SAXException | IOException ex) {
                                Logger.getLogger(JedicDirector.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    });
                    if (Idioma.idiomaSeleccionado.getPath().equalsIgnoreCase(ruta)) {
                        item.setSelected(true);
                    }
                    menuIdioma.add(item);

                } catch (ParserConfigurationException | SAXException | IOException ex) {
                }
            }
        }
    }

    private void cambiarTitulos(javax.swing.JTable tab, String[] titulos) {
        int row, col;
        row = tab.getRowCount();
        col = tab.getColumnCount();

        System.out.println();
        System.out.println("ROW: " + row);
        System.out.println("COL: " + col);
        System.out.println();

        Object[][] obj = new Object[row][col];

        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                obj[i][j] = tab.getValueAt(i, j);
            }
        }
        tab.setModel(new javax.swing.table.DefaultTableModel(new Object[row][col], titulos));

        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                tab.setValueAt(obj[i][j], i, j);
            }
        }
    }

    private void crearRegistroSinProfesor() {
        try {
            boolean existeSinProfe = false;
            Conexion.sentencia = Conexion.con.createStatement();
            Conexion.rs = Conexion.sentencia.executeQuery("select cod_pro from profesor where cod_dir = " + Director.CODIGO + " and nom_pro = 'Sin Profesor'");
            if (Conexion.rs.next()) {
                existeSinProfe = true;
                Director.COD_SIN_PROFESOR = Conexion.rs.getInt("cod_pro");
            }
            Conexion.sentencia.close();

            if (!existeSinProfe) {
                Conexion.sentencia = Conexion.con.createStatement();
                Conexion.sentencia.execute("insert into profesor (nom_pro, est_pro, cod_dir) values('Sin Profesor', 'vigente', '" + Director.CODIGO + "')");
                Conexion.sentencia.close();
                //rescatando el codigo creado
                Conexion.sentencia = Conexion.con.createStatement();
                Conexion.rs = Conexion.sentencia.executeQuery("select cod_pro from profesor where cod_dir = " + Director.CODIGO + " and nom_pro = 'Sin Profesor'");
                if (Conexion.rs.next()) {
                    Director.COD_SIN_PROFESOR = Conexion.rs.getInt("cod_pro");
                }
                Conexion.sentencia.close();
            }
        } catch (SQLException ex) {
            Logger.getLogger(JedicDirector.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private List<clases.modelo.Profesor> getProfesores(String codDir) {
        List<clases.modelo.Profesor> l = new ArrayList<>();
        try {
            Conexion.sentencia = Conexion.con.createStatement();
            String query = "select cod_pro, nom_pro from profesor where cod_dir = " + codDir + " and usu_pro is not null;";
            Conexion.rs = Conexion.sentencia.executeQuery(query);

            while (Conexion.rs.next()) {
                clases.modelo.Profesor p = new clases.modelo.Profesor(Conexion.rs.getString("cod_pro"), Conexion.rs.getString("nom_pro"));
                l.add(p);
            }
            Conexion.sentencia.close();
        } catch (SQLException ex) {
            Logger.getLogger(JedicDirector.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            return l;
        }
    }

    private void cargarDatosSeccionesDesdeBDCENTRAL() {
        int NOMBRE = 0;
        int SECCION = 1;
        int MAIL = 2;
        int cont = 0;
        HojaExcel hoja = Excel.leerArchivo("alumnos.xls", 0);
        String[][] contenido = hoja.getContenido();
        for (int i = 0; i < contenido.length; i++) {
            try {
                generarAlumno(contenido[i][NOMBRE], contenido[i][SECCION], contenido[i][MAIL], true);
                cont++;
            } catch (Exception e) {
            }
        }
        llenarTablaAlumnos();
    }

    private void desplegarCausalInhabilitacion(String texto, int largo) {
        Historial.addHistorial("Intentando inabilitar a profesor...");
        final JTextArea causal = new JTextArea(15, 20);
        causal.setText(texto);
        final JLabel cont = new JLabel();
        causal.addKeyListener(new KeyListener() {

            @Override
            public void keyTyped(KeyEvent e) {
//                throw new UnsupportedOperationException("Not supported yet.");
            }

            @Override
            public void keyPressed(KeyEvent e) {
                cont.setText(String.valueOf(300 - causal.getText().length()));
                if (300 - causal.getText().length() < 0) {
                    cont.setForeground(Color.red);
                } else {
                    cont.setForeground(Color.black);
                }
            }

            @Override
            public void keyReleased(KeyEvent e) {
                cont.setText(String.valueOf(300 - causal.getText().length()));
                if (300 - causal.getText().length() < 0) {
                    cont.setForeground(Color.red);
                } else {
                    cont.setForeground(Color.black);
                }
            }
        });

        cont.setText(Integer.toString(largo));
        causal.setWrapStyleWord(true);
        causal.setLineWrap(true);
        Object[] obj = {"Causal de inhabilitación:\n", causal, cont};
        Object stringArray[] = {"Inhabilitar", "Cancelar"};
        int op;

        op = JOptionPane.showOptionDialog(null, obj, "Inhabilitar director",
                JOptionPane.YES_NO_OPTION, JOptionPane.PLAIN_MESSAGE,
                null, stringArray, obj);

        if (op == JOptionPane.OK_OPTION) {
            if (Integer.parseInt(cont.getText()) < 0) {
                Mensajes.mensajeWarning("La causal no debe superar los 300 caracteres");
                desplegarCausalInhabilitacion(causal.getText(), Integer.parseInt(cont.getText()));
            }
            ModeloListaProfesor m = (ModeloListaProfesor) listaVigentes.getModel();
            clases.modelo.Profesor p = m.getProfesorAt(listaVigentes.getSelectedIndex());
            if (!setCausalDeDesvinculacion(p, causal.getText())) {
                Mensajes.mensajeError("Error al intentar inhabilitar un profesor. Inténtelo más tarde");
            } else {
                desvincularProfesor(p, causal.getText());
            }

        } else {
            Historial.addHistorial("Canceló inabilitar a profesor");
        }
    }

    private boolean setCausalDeDesvinculacion(clases.modelo.Profesor p, String causal) {
        try {
            Conexion.sentencia = Conexion.con.createStatement();
            String cod_pro = p.getCodigo();
            Conexion.sentencia.execute("insert into desvinculacion_profesor(cod_pro, cau_des, fec_des, res_des) values('" + cod_pro + "','" + causal + "', NOW(), " + Director.CODIGO + ")");
            Conexion.sentencia.close();
            return true;
        } catch (SQLException ex) {
            return false;
        }
    }

    private void desvincularProfesor(clases.modelo.Profesor p, String causal) {
        try {
            Conexion.sentencia = Conexion.con.createStatement();
            Conexion.sentencia.execute("update profesor set est_pro = 'no-vigente' where cod_pro = '" + p.getCodigo() + "'");
            Conexion.sentencia.close();

            Conexion.sentencia = Conexion.con.createStatement();
            Conexion.sentencia.execute("update seccion set cod_pro = " + Director.COD_SIN_PROFESOR + " where cod_pro = '" + p.getCodigo() + "'");
            Conexion.sentencia.close();
            llenarListaProfesores();
            llenarTablaConProfesores();
            llenarComboProfesor();
            llenarTablaSecciones();
            limpiarDatosVigente();
            Historial.addHistorial("Cambió a " + p + " al listado de profesores NO vigentes. Causal: " + causal);
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }

    private List<Causal> getCausales(clases.modelo.Profesor p) {
        List<Causal> causales = new ArrayList();
        try {
            Conexion.sentencia = Conexion.con.createStatement();
            String query = "select profesor.nom_pro, director.nom_dir, "
                    + "desvinculacion_profesor.cau_des, desvinculacion_profesor.fec_des "
                    + "from profesor, director, desvinculacion_profesor where "
                    + "desvinculacion_profesor.cod_pro = profesor.cod_pro and "
                    + "desvinculacion_profesor.res_des = director.cod_dir and profesor.cod_pro = '" + p.getCodigo() + "';";
            Conexion.rs = Conexion.sentencia.executeQuery(query);

            Causal c;
            while (Conexion.rs.next()) {
                c = new Causal(Conexion.rs.getString("nom_pro"), Conexion.rs.getString("fec_des"), Conexion.rs.getString("cau_des"), Conexion.rs.getString("nom_dir"));
                causales.add(c);
            }
            Conexion.sentencia.close();
        } catch (SQLException ex) {
        } finally {
            return causales;
        }
    }

    private void limpiarFormularioCausales() {
        jTextField2.setText("");
        jComboBox1.removeAllItems();
        jTextArea1.setText("");
        jTextField1.setText("");
    }

    private void desplegarCausal(Causal c) {
        jTextField2.setText(c.getNombre());
        jTextArea1.setText(c.getCausal());
        jTextField1.setText(c.getResponsable());
    }

    private void cerrarSesion() {
        formMenu.setVisible(false);
        this.setVisible(true);
        usuDir.requestFocus();
        Historial.addHistorial("Cerró sesión");
    }
}
