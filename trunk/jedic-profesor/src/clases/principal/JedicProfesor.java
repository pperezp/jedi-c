/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * sdfdf.java
 *
 * Created on 11-06-2011, 04:13:10 PM
 */
package clases.principal;

import acercade.AcercaDe;
import acercade.GPL;
import clases.BD.mysql.Conexion;
import clases.BD.mysql.DatosConexion;
import clases.configuraciones.*;
import clases.mensajes.MensajeHilo;
import clases.modelo.*;
import clases.modelo.cellRenderer.CRAlumnos;
import clases.modelo.cellRenderer.CREjercicioProfesor;
import clases.modelo.idioma.Idioma;
import clases.modelo.idioma.K;
import clases.modelo.listModel.LMAlumno;
import clases.modelo.listModel.LMEjercicioProfesor;
import clases.recuperarClave.HiloGif;
import clases.recuperarClave.HiloRecuperarClave;
import clases.reporte.KReportes;
import clases.reporte.hilo.HiloReporte;
import clases.reporte.modelo.SeccionPorEjercicio;
import clases.utilidades.*;
import clases.xml.dom.analizador.DOM;
import clases.xml.dom.analizador.modelo.Atributo;
import clases.xml.dom.analizador.modelo.Tag;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.*;
import java.sql.Blob;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.List;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import org.apache.poi.hwpf.extractor.WordExtractor;
import org.apache.poi.xwpf.extractor.XWPFWordExtractor;
import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;
import org.fife.ui.rsyntaxtextarea.SyntaxConstants;
import org.fife.ui.rtextarea.RTextScrollPane;
import org.xml.sax.SAXException;

/**
 *
 * @author Administrador
 */
public class JedicProfesor extends javax.swing.JFrame {

    private String[] enc;
    private RSyntaxTextArea txtEje;
    private HiloRecuperarClave hp;
    private HiloGif hb;
    private File archivo;
    private File temp;
    private List<Seccion> secciones;
    private List<EjercicioAlumno> ejerc;
    private Alumno alumnoActual;

    /**
     * Creates new form sdfdf
     */
    public JedicProfesor() throws ParserConfigurationException, SAXException, IOException, ClassNotFoundException, SQLException {
        initComponents();
        Idioma.cargarConfiguracionDeIdioma();
        txtEje = new RSyntaxTextArea();
//        Cambiar.tamañoDeFormulario(this, true, Idioma.palabras.get(K.JEDI_C_PROFESOR));
        Cambiar.iconoDeFormulario(this, Rutas.ICONO_ARRIBA);

        conectarBD();

//        llenarComboSedes();

        enc = new String[5];


        inicializarPanel();
        lblMensajeReporte.setVisible(false);
        lblMenSubEjer.setVisible(false);
        if (!new File("temp").exists()) {
            new File("temp").mkdir();
        }
        archivo = null;
        temp = new File(Rutas.RUTA_ARCHIVO_TEMP);
        cargarIdiomaEnComponentes();
        //hola
        cambiarFondoMenus(Color.white);
        formAlumnos.setIconImage(this.getIconImage());
        formMensaje.setIconImage(this.getIconImage());
        formMensajeSeccion.setIconImage(this.getIconImage());
        formMensajeSeccion.setTitle("Jmensajero");
        formMensaje.setTitle("JMensajero");
        AcercaDe ad = new AcercaDe("JEDI C Profesor", "Este software permite la creación de ejercicios para ser enviados a los alumnos que usen \"JEDI C Alumno\".", "Generator S.A.", "2012", "contacto@generator.cl", GPL.AMBAS_VERSIONES);
        ad.addComponent(jMenuItem4);


        this.setBounds(new Rectangle(737, 369));
        this.setLocationRelativeTo(null);
        this.setTitle(Idioma.palabras.get(K.JEDI_C_PROFESOR));
        Historial.setNombreTabla("profesor");
        Historial.addHistorialGeneral("Se inició la ejecución del sistema JEDIC Profesor");
        Cambiar.iconoDeFormulario(JedicProfesor.dialogCompilacion, "/imagenes/iconoArriba.png");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        formPrincipal = new javax.swing.JFrame();
        pPrincipal = new javax.swing.JPanel(){

            public void paintComponent(Graphics g){
                Dimension tamanio = getSize();
                ImageIcon imagenFondo = new ImageIcon(getClass().getResource("/imagenes/fondoClaro.png"));
                g.drawImage(imagenFondo.getImage(), 0, 0, tamanio.width, tamanio.height, null);
                setOpaque(false);
                super.paintComponent(g);
            }
        };
        panelSuperior = new javax.swing.JPanel();
        lblPro = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        lblSede = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jSplitPane3 = new javax.swing.JSplitPane();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        salida = new javax.swing.JTextArea();
        panelEje = new javax.swing.JPanel();
        barra_herramientas = new javax.swing.JToolBar();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        jButton1 = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        btn_ejecom_barra = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        ch1 = new javax.swing.JCheckBoxMenuItem();
        ch2 = new javax.swing.JCheckBoxMenuItem();
        ch3 = new javax.swing.JCheckBoxMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        menuIdioma = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        formContrasena = new javax.swing.JFrame();
        jPanel14 = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        con2 = new javax.swing.JPasswordField();
        con1 = new javax.swing.JPasswordField();
        btnCmbCon = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtErr = new javax.swing.JTextArea();
        jLabel8 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        formBarra = new javax.swing.JFrame();
        jPanel7 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        lblMen = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        JDSubirEjercicio = new javax.swing.JDialog();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        cboSecSub = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        txtNomEje = new javax.swing.JTextField();
        jButton7 = new javax.swing.JButton();
        lblMenSubEjer = new javax.swing.JLabel();
        fechaEjer = new datechooser.beans.DateChooserCombo();
        jLabel3 = new javax.swing.JLabel();
        cboHor = new javax.swing.JComboBox();
        jLabel25 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        txtDes = new javax.swing.JTextArea();
        count = new javax.swing.JLabel();
        JDVisualizarEjercicios = new javax.swing.JDialog();
        jPanel5 = new javax.swing.JPanel();
        cboSecBaj = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        jButton8 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabEje = new javax.swing.JTable();
        jButton9 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        JDReportes = new javax.swing.JDialog();
        jPanel8 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        fecIni = new datechooser.beans.DateChooserCombo();
        jLabel17 = new javax.swing.JLabel();
        fecFin = new datechooser.beans.DateChooserCombo();
        jSplitPane2 = new javax.swing.JSplitPane();
        btnReporte = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        lblMensajeReporte = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        JDMisEjercicios = new javax.swing.JDialog();
        jPanel9 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        lMisEjer = new javax.swing.JList();
        jPanel1 = new javax.swing.JPanel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        txtFechaPlazo = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        txtSec = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        txtFechaCreacion = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();
        cboHor1 = new javax.swing.JComboBox();
        fecEjer = new datechooser.beans.DateChooserCombo();
        jScrollPane6 = new javax.swing.JScrollPane();
        txtDes1 = new javax.swing.JTextArea();
        jLabel29 = new javax.swing.JLabel();
        count1 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        contEjAlu = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        jButton14 = new javax.swing.JButton();
        formAlumnos = new javax.swing.JFrame();
        jPanel10 = new javax.swing.JPanel();
        jLabel32 = new javax.swing.JLabel();
        cboSec = new javax.swing.JComboBox();
        jButton15 = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        listaAlumnos = new javax.swing.JList();
        jButton16 = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        jLabel44 = new javax.swing.JLabel();
        jButton18 = new javax.swing.JButton();
        jLabel45 = new javax.swing.JLabel();
        jLabel46 = new javax.swing.JLabel();
        cod_alu = new javax.swing.JLabel();
        formMensaje = new javax.swing.JFrame();
        jPanel12 = new javax.swing.JPanel();
        jLabel47 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel48 = new javax.swing.JLabel();
        jLabel49 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jScrollPane8 = new javax.swing.JScrollPane();
        areaMensaje = new javax.swing.JTextArea();
        jButton17 = new javax.swing.JButton();
        cod_alu2 = new javax.swing.JLabel();
        count2 = new javax.swing.JLabel();
        lblMenEnvMen = new javax.swing.JLabel();
        formMensajeSeccion = new javax.swing.JFrame();
        jPanel13 = new javax.swing.JPanel();
        jLabel50 = new javax.swing.JLabel();
        jLabel51 = new javax.swing.JLabel();
        jLabel52 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jScrollPane9 = new javax.swing.JScrollPane();
        areaMensaje1 = new javax.swing.JTextArea();
        jButton19 = new javax.swing.JButton();
        cod_alu3 = new javax.swing.JLabel();
        count3 = new javax.swing.JLabel();
        lblMenEnvMen1 = new javax.swing.JLabel();
        cboSecMen = new javax.swing.JComboBox();
        dialogCompilacion = new javax.swing.JDialog();
        pbCompi = new javax.swing.JProgressBar();
        textoDialogo = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel(){

            public void paintComponent(Graphics g){
                Dimension tamanio = getSize();
                ImageIcon imagenFondo = new ImageIcon(getClass().getResource("/imagenes/fondo.png"));
                g.drawImage(imagenFondo.getImage(), 0, 0, tamanio.width, tamanio.height, null);
                setOpaque(false);
                super.paintComponent(g);
            }
        };
        lblMenSesion = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        btnInicioSesion = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        usuPro = new javax.swing.JTextField();
        conPro = new javax.swing.JPasswordField();
        jLabel15 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();

        formPrincipal.setBackground(new java.awt.Color(255, 255, 255));
        formPrincipal.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formPrincipalWindowClosing(evt);
            }
        });

        pPrincipal.setBackground(new java.awt.Color(255, 255, 255));

        panelSuperior.setBackground(new java.awt.Color(255, 255, 255));

        lblPro.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Sede: ");

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel12.setText("Profesor/a:");

        lblSede.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        jLabel18.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/new_200.png"))); // NOI18N

        javax.swing.GroupLayout panelSuperiorLayout = new javax.swing.GroupLayout(panelSuperior);
        panelSuperior.setLayout(panelSuperiorLayout);
        panelSuperiorLayout.setHorizontalGroup(
            panelSuperiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSuperiorLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(panelSuperiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12)
                    .addComponent(jLabel2))
                .addGap(20, 20, 20)
                .addGroup(panelSuperiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblPro, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSede, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 179, Short.MAX_VALUE)
                .addComponent(jLabel18)
                .addContainerGap())
        );
        panelSuperiorLayout.setVerticalGroup(
            panelSuperiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(panelSuperiorLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelSuperiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelSuperiorLayout.createSequentialGroup()
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelSuperiorLayout.createSequentialGroup()
                        .addComponent(lblPro, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(lblSede, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        jSplitPane3.setDividerLocation(300);
        jSplitPane3.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));
        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Errores de Compilación"));
        jPanel6.setLayout(new java.awt.BorderLayout());

        salida.setColumns(20);
        salida.setEditable(false);
        salida.setFont(new java.awt.Font("Monospaced", 0, 11)); // NOI18N
        salida.setRows(5);
        salida.setAutoscrolls(false);
        jScrollPane3.setViewportView(salida);

        jPanel6.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        jSplitPane3.setRightComponent(jPanel6);

        panelEje.setLayout(new java.awt.BorderLayout());
        jSplitPane3.setLeftComponent(panelEje);

        barra_herramientas.setBackground(new java.awt.Color(255, 255, 255));
        barra_herramientas.setFloatable(false);
        barra_herramientas.setOrientation(javax.swing.SwingConstants.VERTICAL);
        barra_herramientas.setRollover(true);
        barra_herramientas.setOpaque(false);

        jButton5.setBackground(new java.awt.Color(255, 255, 255));
        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/document--plus.png"))); // NOI18N
        jButton5.setToolTipText("Nuevo Archivo");
        jButton5.setFocusable(false);
        jButton5.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        barra_herramientas.add(jButton5);

        jButton6.setBackground(new java.awt.Color(255, 255, 255));
        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/folder-horizontal-open.png"))); // NOI18N
        jButton6.setToolTipText("Abrir un Archivo");
        jButton6.setFocusable(false);
        jButton6.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        barra_herramientas.add(jButton6);
        barra_herramientas.add(jSeparator1);

        jButton1.setBackground(new java.awt.Color(255, 255, 255));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/llave.png"))); // NOI18N
        jButton1.setToolTipText("Cambiar Contraseña");
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        barra_herramientas.add(jButton1);
        barra_herramientas.add(jSeparator2);

        btn_ejecom_barra.setBackground(new java.awt.Color(255, 255, 255));
        btn_ejecom_barra.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/play_green.png"))); // NOI18N
        btn_ejecom_barra.setToolTipText("Compilar y Ejecutar Archivo (F9)");
        btn_ejecom_barra.setFocusable(false);
        btn_ejecom_barra.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btn_ejecom_barra.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btn_ejecom_barra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ejecom_barraActionPerformed(evt);
            }
        });
        barra_herramientas.add(btn_ejecom_barra);
        barra_herramientas.add(jSeparator3);

        javax.swing.GroupLayout pPrincipalLayout = new javax.swing.GroupLayout(pPrincipal);
        pPrincipal.setLayout(pPrincipalLayout);
        pPrincipalLayout.setHorizontalGroup(
            pPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pPrincipalLayout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(pPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pPrincipalLayout.createSequentialGroup()
                        .addComponent(panelSuperior, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addComponent(jSplitPane3)))
            .addGroup(pPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pPrincipalLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(barra_herramientas, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(746, Short.MAX_VALUE)))
        );
        pPrincipalLayout.setVerticalGroup(
            pPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pPrincipalLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelSuperior, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 427, Short.MAX_VALUE))
            .addGroup(pPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pPrincipalLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(barra_herramientas, javax.swing.GroupLayout.DEFAULT_SIZE, 485, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        formPrincipal.getContentPane().add(pPrincipal, java.awt.BorderLayout.CENTER);

        jMenuBar1.setBackground(new java.awt.Color(255, 255, 255));

        jMenu1.setText("Ayuda");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        jMenuItem1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Help book 3d.png"))); // NOI18N
        jMenuItem1.setText("Ayuda de Contenidos");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem4.setText("Acerca de");
        jMenu1.add(jMenuItem4);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Ver");
        jMenu2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu2ActionPerformed(evt);
            }
        });

        ch1.setText("Enviar ejercicio");
        ch1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Upload.png"))); // NOI18N
        ch1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ch1ActionPerformed(evt);
            }
        });
        jMenu2.add(ch1);

        ch2.setText("Revisar ejercicios");
        ch2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Apply.png"))); // NOI18N
        ch2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ch2ActionPerformed(evt);
            }
        });
        jMenu2.add(ch2);

        ch3.setText("Reportes");
        ch3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Report.png"))); // NOI18N
        ch3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ch3ActionPerformed(evt);
            }
        });
        jMenu2.add(ch3);

        jMenuItem2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Card file (2).png"))); // NOI18N
        jMenuItem2.setText("Mis ejercicios");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuItem3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/alumno.jpg"))); // NOI18N
        jMenuItem3.setText("Alumnos");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuBar1.add(jMenu2);

        menuIdioma.setText("jMenu2");
        jMenuBar1.add(menuIdioma);

        jMenu3.setText("Enviar");

        jMenuItem5.setText("Mensaje a sección");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem5);

        jMenuItem6.setText("Enviar mensaje a...");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem6);

        jMenuBar1.add(jMenu3);

        formPrincipal.setJMenuBar(jMenuBar1);

        jPanel14.setBackground(new java.awt.Color(255, 255, 255));
        jPanel14.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel15.setBackground(new java.awt.Color(255, 255, 255));
        jPanel15.setBorder(javax.swing.BorderFactory.createTitledBorder("Información"));
        jPanel15.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel21.setText("Contraseña Nueva:");
        jPanel15.add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, -1, 20));

        jLabel22.setText("Repetir Contraseña:");
        jPanel15.add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 60, -1, 20));

        con2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                con2KeyReleased(evt);
            }
        });
        jPanel15.add(con2, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 60, 120, -1));

        con1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                con1KeyReleased(evt);
            }
        });
        jPanel15.add(con1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 30, 120, -1));

        jPanel14.add(jPanel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 300, 110));

        btnCmbCon.setText("Cambiar Contraseña");
        btnCmbCon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCmbConActionPerformed(evt);
            }
        });
        jPanel14.add(btnCmbCon, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 150, 130, -1));

        txtErr.setColumns(20);
        txtErr.setEditable(false);
        txtErr.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        txtErr.setForeground(new java.awt.Color(255, 0, 0));
        txtErr.setLineWrap(true);
        txtErr.setRows(5);
        jScrollPane2.setViewportView(txtErr);

        jPanel14.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 30, 360, 160));

        jLabel8.setText("Errores:");
        jPanel14.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 10, -1, -1));

        formContrasena.getContentPane().add(jPanel14, java.awt.BorderLayout.CENTER);

        jLabel1.setText("jLabel1");

        formBarra.setFocusableWindowState(false);
        formBarra.setUndecorated(true);

        jPanel7.setBackground(new java.awt.Color(255, 255, 255));
        jPanel7.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/procesando.gif"))); // NOI18N
        jPanel7.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 20, -1, -1));

        lblMen.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        lblMen.setText("Procesando");
        jPanel7.add(lblMen, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 20, 200, 70));

        jButton2.setText("Cancelar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel7.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 90, -1, -1));

        formBarra.getContentPane().add(jPanel7, java.awt.BorderLayout.CENTER);

        JDSubirEjercicio.setType(java.awt.Window.Type.UTILITY);
        JDSubirEjercicio.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                JDSubirEjercicioWindowClosing(evt);
            }
        });
        JDSubirEjercicio.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                JDSubirEjercicioComponentResized(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Subir Ejercicio"));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Nombre:");
        jPanel2.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(31, 30, 80, 20));

        cboSecSub.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cboSecSub.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cboSecSubKeyReleased(evt);
            }
        });
        jPanel2.add(cboSecSub, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 60, 250, -1));

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Sección:");
        jPanel2.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 60, 80, 20));

        txtNomEje.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomEjeActionPerformed(evt);
            }
        });
        txtNomEje.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtNomEjeKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtNomEjeKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNomEjeKeyTyped(evt);
            }
        });
        jPanel2.add(txtNomEje, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 30, 250, -1));

        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Upload.png"))); // NOI18N
        jButton7.setText("Subir Ejercicio");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton7, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 290, 270, 30));

        lblMenSubEjer.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblMenSubEjer.setForeground(new java.awt.Color(0, 0, 204));
        lblMenSubEjer.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblMenSubEjer.setText("Mensajes de subir Ejercicio");
        jPanel2.add(lblMenSubEjer, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 330, 270, -1));

        fechaEjer.setBehavior(datechooser.model.multiple.MultyModelBehavior.SELECT_SINGLE);
        jPanel2.add(fechaEjer, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 90, 250, 20));

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Fecha de plazo:");
        jPanel2.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 90, 80, 20));

        cboHor.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "00:00", "01:00", "02:00", "03:00", "04:00", "05:00", "06:00", "07:00", "08:00", "09:00", "10:00", "11:00", "12:00", "13:00", "14:00", "15:00", "16:00", "17:00", "18:00", "19:00", "20:00", "21:00", "22:00", "23:00" }));
        jPanel2.add(cboHor, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 120, 250, -1));

        jLabel25.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel25.setText("Hora de plazo:");
        jPanel2.add(jLabel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 120, 80, 20));

        jLabel28.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel28.setText("Descripción:");
        jPanel2.add(jLabel28, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 150, 100, 20));

        txtDes.setColumns(20);
        txtDes.setLineWrap(true);
        txtDes.setRows(5);
        txtDes.setWrapStyleWord(true);
        txtDes.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtDesKeyReleased(evt);
            }
        });
        jScrollPane5.setViewportView(txtDes);

        jPanel2.add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 150, 250, 100));

        count.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        count.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        count.setText("140");
        jPanel2.add(count, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 250, 90, -1));

        JDSubirEjercicio.getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        JDVisualizarEjercicios.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                JDVisualizarEjerciciosWindowClosing(evt);
            }
        });
        JDVisualizarEjercicios.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                JDVisualizarEjerciciosComponentResized(evt);
            }
        });

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Visualizar Ejercicios"));
        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        cboSecBaj.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cboSecBaj.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cboSecBajKeyReleased(evt);
            }
        });
        jPanel5.add(cboSecBaj, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 20, 100, 30));

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Sección:");
        jPanel5.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 110, 30));

        jButton8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Sync.png"))); // NOI18N
        jButton8.setText("Actualizar Listado");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        jPanel5.add(jButton8, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 20, 190, -1));

        tabEje.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Alumno", "Sección", "Ejercicio"
            }
        ));
        tabEje.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tabEjeMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tabEje);

        jPanel5.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, 730, 260));

        jButton9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Apply.png"))); // NOI18N
        jButton9.setText("Revisar Ejercicio");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        jPanel5.add(jButton9, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 330, 200, -1));

        jButton12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Card file (2).png"))); // NOI18N
        jButton12.setText("Mis ejercicios");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });
        jPanel5.add(jButton12, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 20, 140, -1));

        JDVisualizarEjercicios.getContentPane().add(jPanel5, java.awt.BorderLayout.CENTER);

        JDReportes.setType(java.awt.Window.Type.UTILITY);
        JDReportes.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                JDReportesWindowClosing(evt);
            }
        });
        JDReportes.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                JDReportesComponentResized(evt);
            }
        });

        jPanel8.setBackground(new java.awt.Color(255, 255, 255));
        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("Reportes"));
        jPanel8.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel16.setText("Fecha Inicio:");
        jPanel8.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 20, -1, 20));

        fecIni.setBehavior(datechooser.model.multiple.MultyModelBehavior.SELECT_SINGLE);
        jPanel8.add(fecIni, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 20, 110, 20));

        jLabel17.setText("Fecha Final:");
        jPanel8.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 50, -1, 20));

        fecFin.setBehavior(datechooser.model.multiple.MultyModelBehavior.SELECT_SINGLE);
        jPanel8.add(fecFin, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 50, 110, 20));

        btnReporte.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/grafico.png"))); // NOI18N
        btnReporte.setToolTipText("Generar Reportes de Ejercicios");
        btnReporte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReporteActionPerformed(evt);
            }
        });
        jSplitPane2.setLeftComponent(btnReporte);

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/impresora.png"))); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jSplitPane2.setRightComponent(jButton3);

        jPanel8.add(jSplitPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 80, -1, -1));

        lblMensajeReporte.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblMensajeReporte.setForeground(new java.awt.Color(255, 0, 0));
        lblMensajeReporte.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMensajeReporte.setText("GENERANDO REPORTE!");
        jPanel8.add(lblMensajeReporte, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 140, 300, 20));

        JDReportes.getContentPane().add(jPanel8, java.awt.BorderLayout.CENTER);

        jLabel11.setText("jLabel11");

        JDMisEjercicios.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                JDMisEjerciciosComponentResized(evt);
            }
        });

        jPanel9.setBackground(new java.awt.Color(255, 255, 255));
        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder("Mis ejercicios"));

        lMisEjer.setBorder(javax.swing.BorderFactory.createTitledBorder("Mis ejercicios"));
        lMisEjer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                lMisEjerMouseReleased(evt);
            }
        });
        jScrollPane4.setViewportView(lMisEjer);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Información del ejercicio"));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel19.setText("Fecha de creación:");
        jPanel1.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 90, 110, 20));

        jLabel20.setText("Nombre:");
        jPanel1.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 30, 110, 20));

        jLabel24.setText("Enviado a la sección:");
        jPanel1.add(jLabel24, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 60, 110, 20));

        txtFechaPlazo.setEditable(false);
        jPanel1.add(txtFechaPlazo, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 120, 140, -1));
        jPanel1.add(jTextField2, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 30, 140, -1));

        txtSec.setEditable(false);
        jPanel1.add(txtSec, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 60, 140, -1));

        jLabel23.setText("Hora de plazo:");
        jPanel1.add(jLabel23, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 180, 110, 20));

        txtFechaCreacion.setEditable(false);
        jPanel1.add(txtFechaCreacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 90, 140, -1));

        jLabel27.setText("Fecha de plazo:");
        jPanel1.add(jLabel27, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 120, 110, 20));

        cboHor1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "00:00", "1:00", "2:00", "3:00", "4:00", "5:00", "6:00", "7:00", "8:00", "9:00", "10:00", "11:00", "12:00", "13:00", "14:00", "15:00", "16:00", "17:00", "18:00", "19:00", "20:00", "21:00", "22:00", "23:00" }));
        jPanel1.add(cboHor1, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 180, 140, -1));

        fecEjer.setBehavior(datechooser.model.multiple.MultyModelBehavior.SELECT_SINGLE);
        jPanel1.add(fecEjer, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 150, 140, 20));

        txtDes1.setColumns(20);
        txtDes1.setLineWrap(true);
        txtDes1.setRows(5);
        txtDes1.setWrapStyleWord(true);
        txtDes1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtDes1KeyReleased(evt);
            }
        });
        jScrollPane6.setViewportView(txtDes1);

        jPanel1.add(jScrollPane6, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 260, 250, 100));

        jLabel29.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel29.setText("Descripción:");
        jPanel1.add(jLabel29, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 240, 110, 20));

        count1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        count1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        count1.setText("140");
        jPanel1.add(count1, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 360, 90, -1));

        jLabel30.setText("Fecha de plazo:");
        jPanel1.add(jLabel30, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 150, 110, 20));

        jLabel31.setText("Ejercicios Alumnos:");
        jPanel1.add(jLabel31, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 210, 110, 20));

        contEjAlu.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jPanel1.add(contEjAlu, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 210, 140, 20));

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Download.png"))); // NOI18N
        jButton4.setText("Ver ejercicio seleccionado");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Sync.png"))); // NOI18N
        jButton11.setText("Actualizar listado con filtro de ejercicio");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jButton13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Refresh.png"))); // NOI18N
        jButton13.setText("Actualizar");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });

        jButton14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Erase.png"))); // NOI18N
        jButton14.setText("Eliminar");
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 459, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 325, Short.MAX_VALUE)
                    .addComponent(jButton4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jButton13, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jButton11, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton13)
                            .addComponent(jButton14))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton11)))
                .addContainerGap())
        );

        JDMisEjercicios.getContentPane().add(jPanel9, java.awt.BorderLayout.CENTER);

        formAlumnos.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formAlumnosComponentResized(evt);
            }
        });

        jPanel10.setBackground(new java.awt.Color(255, 255, 255));
        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder("Alumnos"));

        jLabel32.setText("Secciones:");

        cboSec.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jButton15.setText("Ver");
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });

        listaAlumnos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                listaAlumnosMouseReleased(evt);
            }
        });
        listaAlumnos.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                listaAlumnosComponentResized(evt);
            }
        });
        jScrollPane7.setViewportView(listaAlumnos);

        jButton16.setText("Ver estadísticas del alumno");
        jButton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton16ActionPerformed(evt);
            }
        });

        jPanel11.setBackground(new java.awt.Color(255, 255, 255));
        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder("Uso de JChat"));

        jLabel33.setText("Alumno:");

        jLabel34.setText("Sección");

        jLabel35.setText("Primera conexión a JChat:");

        jLabel36.setText("Última conexión a JChat:");

        jLabel37.setText("Duracíon última conexión:");

        jLabel38.setText("Duracíon TOTAL conexiones:");

        jLabel39.setText("Duracíon total:");

        jLabel40.setText("Alumno:");

        jLabel41.setText("Duracíon última conexión:");

        jLabel42.setText("Sección");

        jLabel43.setText("Última conexión a JChat:");

        jLabel44.setText("Primera conexión a JChat:");

        jButton18.setText("Enviar mensaje");
        jButton18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton18ActionPerformed(evt);
            }
        });

        jLabel45.setText("E-mail:");

        jLabel46.setText("E-mail:");

        cod_alu.setBackground(new java.awt.Color(255, 255, 255));
        cod_alu.setForeground(new java.awt.Color(255, 255, 255));
        cod_alu.setText("sdfsdf");
        cod_alu.setOpaque(true);

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel38, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel37, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel36, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel35, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel34, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel33, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel45, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(cod_alu, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton18, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel39, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel41, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel43, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel44, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel40, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel42, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel46, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 14, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jPanel11Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel39, jLabel40, jLabel41, jLabel42, jLabel43, jLabel44});

        jPanel11Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel33, jLabel34, jLabel35, jLabel36, jLabel37, jLabel38});

        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel40, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel33, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel46, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel45, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(jLabel42, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel44, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel43, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel41, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel39, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(jLabel34, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel35, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel36, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel37, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel38, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton18)
                    .addComponent(cod_alu))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(jLabel32)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cboSec, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 509, Short.MAX_VALUE)
                    .addComponent(jButton16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel11, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel10Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel32, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cboSec, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton15))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 308, Short.MAX_VALUE)
                        .addGap(1, 1, 1)))
                .addComponent(jButton16)
                .addContainerGap())
        );

        formAlumnos.getContentPane().add(jPanel10, java.awt.BorderLayout.CENTER);

        formMensaje.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formMensajeComponentResized(evt);
            }
        });

        jPanel12.setBackground(new java.awt.Color(255, 255, 255));
        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder("Mensaje"));

        jLabel47.setText("Para:");

        jTextField1.setEditable(false);

        jLabel48.setText("Mensaje");

        jLabel49.setText("Asunto:");

        areaMensaje.setColumns(20);
        areaMensaje.setLineWrap(true);
        areaMensaje.setRows(5);
        areaMensaje.setWrapStyleWord(true);
        areaMensaje.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                areaMensajeKeyReleased(evt);
            }
        });
        jScrollPane8.setViewportView(areaMensaje);

        jButton17.setText("Enviar mensaje");
        jButton17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton17ActionPerformed(evt);
            }
        });

        cod_alu2.setForeground(new java.awt.Color(255, 255, 255));
        cod_alu2.setText("jLabel50");

        count2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        count2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        count2.setText("300");

        lblMenEnvMen.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblMenEnvMen.setForeground(new java.awt.Color(0, 0, 204));
        lblMenEnvMen.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblMenEnvMen.setText("mensajes");

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addComponent(lblMenEnvMen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(count2, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane8)
                    .addComponent(jButton17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel12Layout.createSequentialGroup()
                                .addComponent(jLabel49, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel48, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel12Layout.createSequentialGroup()
                                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel47, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cod_alu2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 29, Short.MAX_VALUE)))
                .addGap(14, 14, 14))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addComponent(cod_alu2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel47, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel49, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel48, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(count2)
                    .addComponent(lblMenEnvMen))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton17)
                .addGap(5, 5, 5))
        );

        formMensaje.getContentPane().add(jPanel12, java.awt.BorderLayout.CENTER);

        formMensajeSeccion.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formMensajeSeccionComponentResized(evt);
            }
        });

        jPanel13.setBackground(new java.awt.Color(255, 255, 255));
        jPanel13.setBorder(javax.swing.BorderFactory.createTitledBorder("Mensaje"));

        jLabel50.setText("Para:");

        jLabel51.setText("Mensaje");

        jLabel52.setText("Asunto:");

        areaMensaje1.setColumns(20);
        areaMensaje1.setLineWrap(true);
        areaMensaje1.setRows(5);
        areaMensaje1.setWrapStyleWord(true);
        areaMensaje1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                areaMensaje1KeyReleased(evt);
            }
        });
        jScrollPane9.setViewportView(areaMensaje1);

        jButton19.setText("Enviar mensaje");
        jButton19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton19ActionPerformed(evt);
            }
        });

        cod_alu3.setForeground(new java.awt.Color(255, 255, 255));
        cod_alu3.setText("jLabel50");

        count3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        count3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        count3.setText("300");

        lblMenEnvMen1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblMenEnvMen1.setForeground(new java.awt.Color(0, 0, 204));
        lblMenEnvMen1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);

        cboSecMen.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addComponent(lblMenEnvMen1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(count3, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane9)
                    .addComponent(jButton19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel13Layout.createSequentialGroup()
                                .addComponent(jLabel52, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel51, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel13Layout.createSequentialGroup()
                                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel50, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cod_alu3))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cboSecMen, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(0, 29, Short.MAX_VALUE)))
                .addGap(14, 14, 14))
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addComponent(cod_alu3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel50, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cboSecMen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel52, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel51, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(count3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblMenEnvMen1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton19)
                .addGap(5, 5, 5))
        );

        formMensajeSeccion.getContentPane().add(jPanel13, java.awt.BorderLayout.CENTER);

        pbCompi.setIndeterminate(true);

        textoDialogo.setFont(new java.awt.Font("Courier New", 1, 24)); // NOI18N
        textoDialogo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        textoDialogo.setText("Compilando...");
        textoDialogo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout dialogCompilacionLayout = new javax.swing.GroupLayout(dialogCompilacion.getContentPane());
        dialogCompilacion.getContentPane().setLayout(dialogCompilacionLayout);
        dialogCompilacionLayout.setHorizontalGroup(
            dialogCompilacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pbCompi, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(textoDialogo, javax.swing.GroupLayout.DEFAULT_SIZE, 402, Short.MAX_VALUE)
        );
        dialogCompilacionLayout.setVerticalGroup(
            dialogCompilacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dialogCompilacionLayout.createSequentialGroup()
                .addComponent(textoDialogo, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pbCompi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        lblMenSesion.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblMenSesion.setForeground(new java.awt.Color(0, 153, 0));
        lblMenSesion.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/new_200.png"))); // NOI18N

        btnInicioSesion.setFont(new java.awt.Font("Courier New", 0, 11)); // NOI18N
        btnInicioSesion.setText("Ingresar");
        btnInicioSesion.setOpaque(false);
        btnInicioSesion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInicioSesionActionPerformed(evt);
            }
        });

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel4.setOpaque(false);

        jLabel13.setFont(new java.awt.Font("Courier New", 0, 11)); // NOI18N
        jLabel13.setText("Usuario:");

        usuPro.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                usuProKeyReleased(evt);
            }
        });

        conPro.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                conProKeyReleased(evt);
            }
        });

        jLabel15.setFont(new java.awt.Font("Courier New", 0, 11)); // NOI18N
        jLabel15.setText("Contraseña:");

        jLabel26.setFont(new java.awt.Font("Courier New", 1, 11)); // NOI18N
        jLabel26.setForeground(new java.awt.Color(0, 51, 204));
        jLabel26.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel26.setText("<html><u>Recuperar Contraseña</u></html>");
        jLabel26.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel26MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel26MouseExited(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jLabel26MouseReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(usuPro, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(conPro))
                    .addComponent(jLabel26))
                .addGap(25, 25, 25))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(usuPro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(conPro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(lblMenSesion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, 413, Short.MAX_VALUE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(btnInicioSesion, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(0, 10, 10))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addComponent(lblMenSesion, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnInicioSesion))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 97, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel3, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnInicioSesionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInicioSesionActionPerformed
        iniciarSesion();
    }//GEN-LAST:event_btnInicioSesionActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        txtEje.setText("");
}//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed

        if (Abrir.abrir("txt, doc, docx, cpp, c", Idioma.palabras.get(K.ABRIR_EJERCICIO), "/")) {
            if (Abrir.getRuta().contains("docx")) {
                XWPFWordExtractor we = null;
                try (FileInputStream fis = new FileInputStream(Abrir.getRuta())) {
                    we = new XWPFWordExtractor(new XWPFDocument(fis));
                } catch (Exception e1) {
                    System.out.println("Error->" + e1.toString());
                }
                txtEje.setText(we.getText());
            } else if (Abrir.getRuta().contains("doc")) {
                WordExtractor we = null;
                try (FileInputStream fis = new FileInputStream(Abrir.getRuta())) {
                    we = new WordExtractor(fis);
                } catch (Exception e1) {
                    System.out.println("Error->" + e1.toString());
                }
                txtEje.setText(we.getText());

            } else {
                txtEje.setText(Abrir.getArchivoComoString());
            }
            archivo = Abrir.getArchivo();
            formPrincipal.setTitle(Idioma.palabras.get(K.PROFESOR) + ":  " + Profesor.NOMBRE + " - " + archivo.getName());
        }
}//GEN-LAST:event_jButton6ActionPerformed

    private void formPrincipalWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formPrincipalWindowClosing
        txtEje.setText("");
        formPrincipal.setVisible(false);
        cerrarVentanas();
        Historial.addHistorial("Cerró sesión");
        this.setVisible(true);
    }//GEN-LAST:event_formPrincipalWindowClosing

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        int cont = Integer.parseInt(count.getText());
        if (cboSecSub.getItemCount() != 1) {
            if (!Validar.isJTextComponentVacio(txtNomEje)) {
                if (cont >= 0) {
                    if (cboSecSub.getSelectedItem().toString().equalsIgnoreCase(Idioma.palabras.get(K.TODAS_LAS_SECCIONES))) {
                        subirEjercicio(true);
//                        subirEjercicioATodasLasSecciones();
                    } else {
                        subirEjercicio(false);
                    }
                } else {
                    MensajeHilo.setMensaje(lblMenSubEjer, "La descripción no puede superar los 140 caracteres", Color.red, 5);
                }
            } else {
                MensajeHilo.setMensaje(lblMenSubEjer, Idioma.palabras.get(K.INGRESE_ALGUN_NOMBRE_AL_EJERCICIO), Color.red, 5);
            }
        } else {
            MensajeHilo.setMensaje(lblMenSubEjer, Idioma.palabras.get(K.NO_EXISTEN_SECCIONES), Color.red, 5);
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        if (cboSecBaj.getSelectedItem().toString().equalsIgnoreCase(Idioma.palabras.get(K.TODAS_LAS_SECCIONES))) {
//            actualizarListadoTodasLasSecciones();
            actualizarListadoDeEjercicios(true, null);
        } else {
            actualizarListadoDeEjercicios(false, null);
        }
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        try {
            String codigoEjercicio = tabEje.getValueAt(tabEje.getSelectedRow(), 0).toString();
            Profesor.NOMBRE_ALUMNO = tabEje.getValueAt(tabEje.getSelectedRow(), 1).toString();

            temp = new File(Rutas.RUTA_ARCHIVO_TEMP);
            archivo = null;

            descargarEjercicioDeAlumno(codigoEjercicio, temp);

            Ruta.RUTA = null;
            Ruta.RUTA_SIN_EXTENSION = null;

            String ejeStr = Archivo.leerArchivo(temp.getPath());
            txtEje.setText(ejeStr);

            String nombreEjer = tabEje.getValueAt(tabEje.getSelectedRow(), 3).toString();
            Historial.addHistorial("Revisó un ejercicio: [nombre=" + nombreEjer + ", alumno=" + Profesor.NOMBRE_ALUMNO + "]");

            formPrincipal.requestFocus();
            enviarMensajeAutomático(codigoEjercicio);

            alumnoActual = getAlumno(codigoEjercicio);
            jMenuItem6.setVisible(true);
            jMenuItem6.setText("Enviar mensaje a " + alumnoActual.getNombre());
            System.out.println("codalu= " + alumnoActual.getCodigo());
        } catch (Exception ex) {
            Logger.getLogger(JedicProfesor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton9ActionPerformed

    private void txtNomEjeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNomEjeKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            cboSecSub.requestFocus();
        }
    }//GEN-LAST:event_txtNomEjeKeyReleased

    private void conProKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_conProKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            iniciarSesion();
        }
    }//GEN-LAST:event_conProKeyReleased

    private void usuProKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_usuProKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            conPro.requestFocus();
        }
    }//GEN-LAST:event_usuProKeyReleased

    private void txtNomEjeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNomEjeKeyPressed
        Controlar.largoDeTexto(txtNomEje, 149);
    }//GEN-LAST:event_txtNomEjeKeyPressed

    private void txtNomEjeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNomEjeKeyTyped
    }//GEN-LAST:event_txtNomEjeKeyTyped

    private void txtNomEjeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomEjeActionPerformed
    }//GEN-LAST:event_txtNomEjeActionPerformed

    private void btnCmbConActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCmbConActionPerformed
        cambiarContraseña();
}//GEN-LAST:event_btnCmbConActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Redimensionar.redimensionarFormulario(formContrasena, false, "Contraseña");
        formContrasena.setVisible(true);
        formContrasena.setIconImage(this.getIconImage());
    }//GEN-LAST:event_jButton1ActionPerformed

    private void cboSecSubKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cboSecSubKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            fechaEjer.requestFocus();
        }
    }//GEN-LAST:event_cboSecSubKeyReleased

    private void cboSecBajKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cboSecBajKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (cboSecBaj.getSelectedItem().toString().equalsIgnoreCase(Idioma.palabras.get(K.TODAS_LAS_SECCIONES))) {
                actualizarListadoDeEjercicios(true, null);
            } else {
                actualizarListadoDeEjercicios(false, null);
            }
        }
    }//GEN-LAST:event_cboSecBajKeyReleased

    private void btn_ejecom_barraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ejecom_barraActionPerformed
        new Thread(new Runnable() {

            @Override
            public void run() {
                if (Ruta.RUTA == null) {
                    guardarComo();
                } else {
                    guardar();
                    Compilacion.compilar(salida);
                }
            }
        }).start();

    }//GEN-LAST:event_btn_ejecom_barraActionPerformed

    private void con1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_con1KeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            con2.requestFocus();
        }
    }//GEN-LAST:event_con1KeyReleased

    private void con2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_con2KeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            cambiarContraseña();
        }
    }//GEN-LAST:event_con2KeyReleased

    private void jLabel26MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel26MouseEntered
        this.setCursor(Cursor.HAND_CURSOR);
}//GEN-LAST:event_jLabel26MouseEntered

    private void jLabel26MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel26MouseExited
        this.setCursor(Cursor.DEFAULT_CURSOR);
}//GEN-LAST:event_jLabel26MouseExited

    private void jLabel26MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel26MouseReleased
        String usu_pro = usuPro.getText().trim();
        if (usu_pro.equalsIgnoreCase("")) {
            MensajeHilo.setMensaje(lblMenSesion, Idioma.palabras.get(K.DEBE_ESCRIBIR_NOMBRE_USUARIO_RECUPERAR_CLAVE), Color.red, 7);
        } else if (!Conectividad.isConectado()) {
            MensajeHilo.setMensaje(lblMenSesion, Idioma.palabras.get(K.NO_POSEE_CONEXION), Color.red, 7);
        } else {
            hp = new HiloRecuperarClave(lblMenSesion, lblMen);
            hp.setDatos("SELECT sysdate() as 'fecha', profesor.ema_pro, profesor.nom_pro, profesor.pas_pro, sede.nom_sed FROM profesor, sede , director WHERE "
                    + "profesor.usu_pro = '" + usu_pro + "' and profesor.cod_dir = director.cod_dir and director.cod_sed = sede.cod_sed", "ema_pro", "nom_pro", "pas_pro", "docente",usu_pro);
            hp.start();
            hb = new HiloGif(hp, formBarra, lblMen);
            hb.start();
        }

}//GEN-LAST:event_jLabel26MouseReleased

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        hp.interrupt();
        hb.interrupt();
        formBarra.setVisible(false);
    }//GEN-LAST:event_jButton2ActionPerformed

private void btnReporteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReporteActionPerformed
    if (Validar.isFechaCorrecta(fecIni.getSelectedDate(), fecFin.getSelectedDate())) {
        String fechaInicio, fechaFinal;
        //año/mes/dia
        Calendar fIni = fecIni.getSelectedDate();
        Calendar fFin = fecFin.getSelectedDate();

        fechaInicio = fIni.get(Calendar.YEAR) + "/" + (fIni.get(Calendar.MONTH) + 1) + "/" + fIni.get(Calendar.DAY_OF_MONTH);
        fechaFinal = fFin.get(Calendar.YEAR) + "/" + (fFin.get(Calendar.MONTH) + 1) + "/" + fFin.get(Calendar.DAY_OF_MONTH);

        boolean hayRegistros = false;

        List listaSecciones = new ArrayList();
        for (int i = 0; i < cboSecBaj.getItemCount(); i++) {
            try {
                int seccion = Integer.parseInt(cboSecBaj.getItemAt(i).toString());

                Conexion.sentencia = Conexion.con.createStatement();
                Conexion.rs = Conexion.sentencia.executeQuery(
                        "SELECT alumno.nom_alu "
                        + "FROM seccion, alumno, ejercicio_alumno, profesor "
                        + "WHERE profesor.cod_pro = seccion.cod_pro and seccion.cod_sec = alumno.cod_sec "
                        + "and alumno.cod_alu = ejercicio_alumno.cod_alu "
                        + "and profesor.cod_pro = " + Profesor.CODIGO + " and seccion.num_sec = " + seccion
                        + " and ejercicio_alumno.fec_eje between '" + fechaInicio + "' and '" + fechaFinal + "'");

                System.out.println("SELECT alumno.nom_alu "
                        + "FROM seccion, alumno, ejercicio_alumno, profesor "
                        + "WHERE profesor.cod_pro = seccion.cod_pro and seccion.cod_sec = alumno.cod_sec "
                        + "and alumno.cod_alu = ejercicio_alumno.cod_alu "
                        + "and profesor.cod_pro = " + Profesor.CODIGO + " and seccion.num_sec = " + seccion
                        + " and ejercicio_alumno.fec_eje between '" + fechaInicio + "' and '" + fechaFinal + "'");
                while (Conexion.rs.next()) {
                    hayRegistros = true;
                    listaSecciones.add(new SeccionPorEjercicio(Integer.toString(seccion), Conexion.rs.getString("nom_alu")));
                }
                Conexion.sentencia.close();

            } catch (NumberFormatException ex) {
            } catch (SQLException ex) {
                Logger.getLogger(JedicProfesor.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        if (hayRegistros) {
            Object[] items = {"pdf", "html", "xls"};
            JComboBox combo = new JComboBox(items);
            Object[] obj = {Idioma.palabras.get(K.FORMATO_DEL_REPORTE) + ":\n", combo};
            Object stringArray[] = {Idioma.palabras.get(K.GENERAR_REPORTE), Idioma.palabras.get(K.CANCELAR)};
            int op;

            op = JOptionPane.showOptionDialog(null, obj, Idioma.palabras.get(K.REPORTES),
                    JOptionPane.YES_NO_OPTION, JOptionPane.PLAIN_MESSAGE,
                    null, stringArray, obj);
            if (op == JOptionPane.YES_OPTION) {
                //                if (Guardar.guardarComo("Reporte uso Secciones "+Fecha.getFecha(true, false)+" ["+Hora.getHora()+"-"+Hora.getMinuto()+"]", "pdf, html, xls", "Guardar Reporte", "/")) {
                final String rutaDelRespaldo = "reportes/visualizar";
                if (!new File(rutaDelRespaldo).exists()) {
                    new File(rutaDelRespaldo).mkdirs();
                }
                KReportes.rutaReporte = new File(rutaDelRespaldo).getAbsolutePath() + "/" + Fecha.getAnio() + Fecha.getNumeroDeMes() + Fecha.getDia() + Hora.getHora() + Hora.getMinuto() + "_REPORTE_SECCIONES." + combo.getSelectedItem().toString();
                KReportes.extension = combo.getSelectedItem().toString();
//                if (Guardar.guardarComo("Reporte ejercicio Secciones "+Fecha.getFecha(true, false)+" ["+Hora.getHora()+"-"+Hora.getMinuto()+"]", "pdf, html, xls", "Guardar Reporte", "/")) {
                lblMensajeReporte.setText(Idioma.palabras.get(K.GENERANDO_REPORTE));
                Map<String, String> parametros = new HashMap<>();
                parametros.put("fecIni", fechaInicio);
                parametros.put("fecFin", fechaFinal);
                parametros.put("profesor", Profesor.NOMBRE);
                parametros.put("ejercicios", Integer.toString(listaSecciones.size()));
                HiloReporte h = new HiloReporte(listaSecciones, parametros, lblMensajeReporte, false);
                h.start();
                Historial.addHistorial("Se realizó un reporte: Nombre reporte: Ejercicios por sección. "
                        + "Extensión del reporte: " + KReportes.extension + ". Rango de fechas del reporte: " + fechaInicio + '-' + fechaFinal);
            }
        } else {
            MensajeHilo.setMensaje(lblMensajeReporte, Idioma.palabras.get(K.NO_HAY_EJERCICIOS), Color.red, 5);
        }
    } else {
        MensajeHilo.setMensaje(lblMensajeReporte, Idioma.palabras.get(K.RANGO_DE_FECHAS_INCORRECTO), Color.red, 5);
    }
}//GEN-LAST:event_btnReporteActionPerformed

private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
    String fechaInicio, fechaFinal;
    //año/mes/dia
    Calendar fIni = fecIni.getSelectedDate();
    Calendar fFin = fecFin.getSelectedDate();

    fechaInicio = fIni.get(Calendar.YEAR) + "/" + (fIni.get(Calendar.MONTH) + 1) + "/" + fIni.get(Calendar.DAY_OF_MONTH);
    fechaFinal = fFin.get(Calendar.YEAR) + "/" + (fFin.get(Calendar.MONTH) + 1) + "/" + fFin.get(Calendar.DAY_OF_MONTH);
    boolean hayRegistros = false;

    List listaSecciones = new ArrayList();
    for (int i = 0; i < cboSecBaj.getItemCount(); i++) {
        try {
            int seccion = Integer.parseInt(cboSecBaj.getItemAt(i).toString());

            Conexion.sentencia = Conexion.con.createStatement();
            Conexion.rs = Conexion.sentencia.executeQuery(
                    "SELECT alumno.nom_alu "
                    + "FROM seccion, alumno, ejercicio_alumno, profesor "
                    + "WHERE profesor.cod_pro = seccion.cod_pro and seccion.cod_sec = alumno.cod_sec "
                    + "and alumno.cod_alu = ejercicio_alumno.cod_alu "
                    + "and profesor.cod_pro = " + Profesor.CODIGO + " and seccion.num_sec = " + seccion
                    + " and ejercicio_alumno.fec_eje between '" + fechaInicio + "' and '" + fechaFinal + "'");


            while (Conexion.rs.next()) {
                hayRegistros = true;
                listaSecciones.add(new SeccionPorEjercicio(Integer.toString(seccion), Conexion.rs.getString("nom_alu")));
            }
            Conexion.sentencia.close();

        } catch (NumberFormatException ex) {
        } catch (SQLException ex) {
            Logger.getLogger(JedicProfesor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    if (hayRegistros) {
        lblMensajeReporte.setText("GENERANDO REPORTE");
        Map<String, String> parametros = new HashMap<>();
        parametros.put("fecIni", fechaInicio);
        parametros.put("fecFin", fechaFinal);
        parametros.put("profesor", Profesor.NOMBRE);
        parametros.put("ejercicios", Integer.toString(listaSecciones.size()));
        HiloReporte h = new HiloReporte(listaSecciones, parametros, lblMensajeReporte, true);
        h.start();
    } else {
        MensajeHilo.setMensaje(lblMensajeReporte, "No hay Ejercicios", Color.red, 5);
    }
}//GEN-LAST:event_jButton3ActionPerformed

private void tabEjeMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabEjeMouseReleased
    if (evt.getClickCount() >= 2) {
        if (cboSecBaj.getSelectedItem().toString().equalsIgnoreCase(Idioma.palabras.get(K.TODAS_LAS_SECCIONES))) {
            actualizarListadoDeEjercicios(true, null);
        } else {
            actualizarListadoDeEjercicios(false, null);
        }
    }
}//GEN-LAST:event_tabEjeMouseReleased

private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
    new Thread(new Runnable() {

        @Override
        public void run() {
            Ejecutar.ejecutarComando("\"ayuda\\profesor.CHM\"");
        }
    }).start();
}//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenu2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu2ActionPerformed
    }//GEN-LAST:event_jMenu2ActionPerformed

    private void ch1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ch1ActionPerformed
        if (ch1.isSelected()) {
            JDSubirEjercicio.setBounds(0, 0, 456, 377);
            JDSubirEjercicio.setTitle(Idioma.palabras.get(K.ENVIAR_EJERCICIO));
            JDSubirEjercicio.setVisible(true);
        } else {
            JDSubirEjercicio.setVisible(false);
        }
    }//GEN-LAST:event_ch1ActionPerformed

    private void JDSubirEjercicioComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_JDSubirEjercicioComponentResized
        mostrarWidthHeigth(JDSubirEjercicio);
    }//GEN-LAST:event_JDSubirEjercicioComponentResized

    private void JDVisualizarEjerciciosComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_JDVisualizarEjerciciosComponentResized
        mostrarWidthHeigth(JDVisualizarEjercicios);
    }//GEN-LAST:event_JDVisualizarEjerciciosComponentResized

    private void JDReportesComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_JDReportesComponentResized
        mostrarWidthHeigth(JDReportes);
    }//GEN-LAST:event_JDReportesComponentResized

    private void ch2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ch2ActionPerformed
        if (ch2.isSelected()) {
//            List<Ejercicio> ejercicios = getEjerciciosDelProfesor();
//            lMisEjer.setModel(new LMEjercicioProfesor(ejercicios));
//            lMisEjer.setCellRenderer(new CREjercicioProfesor());
            JDVisualizarEjercicios.setBounds(0, 0, 777, 405);
            JDVisualizarEjercicios.setTitle(Idioma.palabras.get(K.VISUALIZAR_EJERCICIOS));
            JDVisualizarEjercicios.setVisible(true);
        } else {
            JDVisualizarEjercicios.setVisible(false);
        }
    }//GEN-LAST:event_ch2ActionPerformed

    private void ch3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ch3ActionPerformed
        if (ch3.isSelected()) {
            JDReportes.setBounds(0, 210, 303, 199);
            JDReportes.setTitle(Idioma.palabras.get(K.ENVIAR_EJERCICIO));
            JDReportes.setVisible(true);
        } else {
            JDReportes.setVisible(false);
        }
    }//GEN-LAST:event_ch3ActionPerformed

    private void lMisEjerMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lMisEjerMouseReleased
        LMEjercicioProfesor model = (LMEjercicioProfesor) lMisEjer.getModel();
        Ejercicio e = (Ejercicio) model.getElementAt(lMisEjer.getSelectedIndex());
        desplegarInformacionDeEjercicio(e);
    }//GEN-LAST:event_lMisEjerMouseReleased

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        try {

            temp = new File(Rutas.RUTA_ARCHIVO_TEMP);
            archivo = null;

            LMEjercicioProfesor model = (LMEjercicioProfesor) lMisEjer.getModel();
            Ejercicio e = (Ejercicio) model.getElementAt(lMisEjer.getSelectedIndex());

            descargarEjercicioProfesor(e, temp);

            String ejeStr = Archivo.leerArchivo(temp.getPath());
            txtEje.setText(ejeStr);
            formPrincipal.requestFocus();
        } catch (Exception ex) {
            Logger.getLogger(JedicProfesor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        LMEjercicioProfesor model = (LMEjercicioProfesor) lMisEjer.getModel();
        Ejercicio e = (Ejercicio) model.getElementAt(lMisEjer.getSelectedIndex());
        if (cboSecBaj.getSelectedItem().toString().equalsIgnoreCase(Idioma.palabras.get(K.TODAS_LAS_SECCIONES))) {
//            actualizarListadoTodasLasSecciones(e);
            this.actualizarListadoDeEjercicios(true, e.getCodigo());
        } else {
//            actualizarListadoDeEjercicios(e);
            this.actualizarListadoDeEjercicios(false, e.getCodigo());
        }
    }//GEN-LAST:event_jButton11ActionPerformed

    private void JDSubirEjercicioWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_JDSubirEjercicioWindowClosing
        ch1.setSelected(false);
    }//GEN-LAST:event_JDSubirEjercicioWindowClosing

    private void JDVisualizarEjerciciosWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_JDVisualizarEjerciciosWindowClosing
        ch2.setSelected(false);
    }//GEN-LAST:event_JDVisualizarEjerciciosWindowClosing

    private void JDReportesWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_JDReportesWindowClosing
        ch3.setSelected(false);
    }//GEN-LAST:event_JDReportesWindowClosing

    private void txtDesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDesKeyReleased
        count.setText(String.valueOf(140 - txtDes.getText().length()));
        if (140 - txtDes.getText().length() < 0) {
            count.setForeground(Color.red);
        } else {
            count.setForeground(Color.black);
        }
    }//GEN-LAST:event_txtDesKeyReleased

    private void JDMisEjerciciosComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_JDMisEjerciciosComponentResized
        mostrarWidthHeigth(JDMisEjercicios);
    }//GEN-LAST:event_JDMisEjerciciosComponentResized

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        List<Ejercicio> ejercicios = getEjerciciosDelProfesor();
        lMisEjer.setModel(new LMEjercicioProfesor(ejercicios));
        lMisEjer.setCellRenderer(new CREjercicioProfesor());
        JDMisEjercicios.setTitle("Mis ejercicios");
        JDMisEjercicios.setBounds(0, 0, 839, 658);
        JDMisEjercicios.setLocationRelativeTo(null);
        JDMisEjercicios.setVisible(true);
    }//GEN-LAST:event_jButton12ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        List<Ejercicio> ejercicios = getEjerciciosDelProfesor();
        lMisEjer.setModel(new LMEjercicioProfesor(ejercicios));
        lMisEjer.setCellRenderer(new CREjercicioProfesor());
        JDMisEjercicios.setTitle("Mis ejercicios");
        JDMisEjercicios.setBounds(0, 0, 839, 658);
        JDMisEjercicios.setLocationRelativeTo(null);
        JDMisEjercicios.setVisible(true);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void txtDes1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDes1KeyReleased
        count1.setText(String.valueOf(140 - txtDes1.getText().length()));
        if (140 - txtDes1.getText().length() < 0) {
            count1.setForeground(Color.red);
        } else {
            count1.setForeground(Color.black);
        }
    }//GEN-LAST:event_txtDes1KeyReleased

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        if (Integer.parseInt(count1.getText()) > 0) {
            LMEjercicioProfesor model = (LMEjercicioProfesor) lMisEjer.getModel();
            Ejercicio e = (Ejercicio) model.getElementAt(lMisEjer.getSelectedIndex());
            Ejercicio ejerAntiguo = (Ejercicio) e.clone();
            if (Mensaje.preguntaSiNo("¿Realmente desea actualizar el ejercicio? (" + e.getNombreEjercicio() + ")") == Mensaje.SI) {
                Calendar d = fecEjer.getSelectedDate();
                String fecha = d.get(Calendar.YEAR) + "-" + (d.get(Calendar.MONTH) + 1) + "-" + d.get(Calendar.DAY_OF_MONTH);
                e.setDescripcion(txtDes1.getText().trim());
                e.setFechaPlazo(fecha);
                e.setHoraPlazo(cboHor1.getSelectedItem().toString());
                e.setNombreEjercicio(jTextField2.getText());
                if (actualizarEjercicio(e, ejerAntiguo)) {
                    System.out.println("act OK!");
                    List<Ejercicio> ejerciciosDelProfesor = this.getEjerciciosDelProfesor();
                    lMisEjer.setModel(new LMEjercicioProfesor(ejerciciosDelProfesor));
                    lMisEjer.setCellRenderer(new CREjercicioProfesor());
                    txtDes1.setText("");
                    this.txtDes1KeyReleased(null);
                    cboHor1.setSelectedIndex(0);
                    fecEjer.setSelectedDate(Calendar.getInstance());
                    txtFechaPlazo.setText("");
                    txtFechaCreacion.setText("");
                    txtSec.setText("");
                    jTextField2.setText("");
                    contEjAlu.setText("");
                } else {
                    System.out.println("act fallido!");
                }
            }
        } else {
            //mensaje de error porque sobrepaso el limite de caracteres de la descripcion
        }
    }//GEN-LAST:event_jButton13ActionPerformed

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
        try {
            LMEjercicioProfesor model = (LMEjercicioProfesor) lMisEjer.getModel();
            Ejercicio e = (Ejercicio) model.getElementAt(lMisEjer.getSelectedIndex());
            if (Mensaje.preguntaSiNo("Recuerde que al eliminar un ejercicio, automáticamente se "
                    + "eliminarán los ejercicios de los alumnos vinculados a el. ¿Realmente "
                    + "desea eliminar el ejercicio? (" + e.getNombreEjercicio() + ") Cantidad de ejercicios alumnos: " + contEjAlu.getText()) == Mensaje.SI) {
                if (eliminarEjercicio(e)) {
                    System.out.println("Ejercicio eliminado!");
                    List<Ejercicio> ejerciciosDelProfesor = this.getEjerciciosDelProfesor();
                    lMisEjer.setModel(new LMEjercicioProfesor(ejerciciosDelProfesor));
                    lMisEjer.setCellRenderer(new CREjercicioProfesor());
                    txtDes1.setText("");
                    this.txtDes1KeyReleased(null);
                    cboHor1.setSelectedIndex(0);
                    fecEjer.setSelectedDate(Calendar.getInstance());
                    txtFechaPlazo.setText("");
                    txtFechaCreacion.setText("");
                    txtSec.setText("");
                    jTextField2.setText("");
                    contEjAlu.setText("");
                } else {
                    System.out.println("Ejercicio no eliminado! error");
                }
            }
        } catch (ArrayIndexOutOfBoundsException e) {
        }
    }//GEN-LAST:event_jButton14ActionPerformed

    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed
        Seccion seccion = (Seccion) cboSec.getSelectedItem();
        List<Alumno> alumnos = getAlumnos(seccion);
        listaAlumnos.setModel(new LMAlumno(alumnos));
        listaAlumnos.setCellRenderer(new CRAlumnos());
    }//GEN-LAST:event_jButton15ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        limpiarFormAlumnos();
        formAlumnos.setBounds(0, 0, 654, 375);
        formAlumnos.setTitle("Alumnos");
        formAlumnos.setLocationRelativeTo(null);
        formAlumnos.setVisible(true);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jButton16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton16ActionPerformed
        Alumno al = (Alumno) listaAlumnos.getSelectedValue();
        if (al != null) {
            Estadistica est = getEstaditica(al);
            mostrarEstadistica(est);
            cod_alu.setText(al.getCodigo());
        }
    }//GEN-LAST:event_jButton16ActionPerformed

    private void listaAlumnosComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_listaAlumnosComponentResized
    }//GEN-LAST:event_listaAlumnosComponentResized

    private void formAlumnosComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formAlumnosComponentResized
        System.out.println(formAlumnos.getWidth() + "-" + formAlumnos.getHeight());
    }//GEN-LAST:event_formAlumnosComponentResized

    private void formMensajeComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formMensajeComponentResized
        System.out.println(formMensaje.getWidth() + "-" + formMensaje.getHeight());
    }//GEN-LAST:event_formMensajeComponentResized

    private void jButton18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton18ActionPerformed
        if (!jLabel40.getText().equalsIgnoreCase("")) {
            limpiarFormMensaje();
            cod_alu2.setText(cod_alu.getText());
            jTextField1.setText(jLabel40.getText());
            lblMenEnvMen.setText("");

            formMensaje.setBounds(0, 0, 312, 344);
            formMensaje.setLocationRelativeTo(null);
            formMensaje.setVisible(true);
        }
    }//GEN-LAST:event_jButton18ActionPerformed

    private void areaMensajeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_areaMensajeKeyReleased
        count2.setText(String.valueOf(300 - areaMensaje.getText().length()));
        if (300 - areaMensaje.getText().length() < 0) {
            count2.setForeground(Color.red);
        } else {
            count2.setForeground(Color.black);
        }
    }//GEN-LAST:event_areaMensajeKeyReleased

    private void listaAlumnosMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listaAlumnosMouseReleased
        if (evt.getClickCount() == 2) {
            Alumno al = (Alumno) listaAlumnos.getSelectedValue();
            if (al != null) {
                Estadistica est = getEstaditica(al);
                mostrarEstadistica(est);
                cod_alu.setText(al.getCodigo());
            }
        }
    }//GEN-LAST:event_listaAlumnosMouseReleased

    private void jButton17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton17ActionPerformed
        if (Integer.parseInt(count2.getText()) >= 0) {
            if (!enviarMensaje(new MensajeAlumno(cod_alu2.getText(),
                    (jTextField3.getText().trim().equalsIgnoreCase("") ? "(sin asunto)" : jTextField3.getText().trim()), Integer.toString(Profesor.CODIGO), areaMensaje.getText()))) {
                Mensaje.error("Error al intentar enviar el mensaje. Intentelo más tarde");

            } else {
                limpiarFormMensaje();
                MensajeHilo.setMensaje(lblMenEnvMen, "Enviado!", Color.blue, 5);
            }
        }
    }//GEN-LAST:event_jButton17ActionPerformed

    private void areaMensaje1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_areaMensaje1KeyReleased
        count3.setText(String.valueOf(300 - areaMensaje1.getText().length()));
        if (300 - areaMensaje1.getText().length() < 0) {
            count3.setForeground(Color.red);
        } else {
            count3.setForeground(Color.black);
        }
    }//GEN-LAST:event_areaMensaje1KeyReleased

    private void jButton19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton19ActionPerformed
        if (Integer.parseInt(count3.getText()) >= 0) {
            Seccion s = (Seccion) cboSecMen.getSelectedItem();
            if (!enviarMensaje(new MensajeSeccion(s, jTextField5.getText(), Integer.toString(Profesor.CODIGO), areaMensaje1.getText()))) {
                Mensaje.error("Error al intentar enviar el mensaje. Intentelo más tarde");
            } else {
                limpiarFormMensajeSeccion();
                MensajeHilo.setMensaje(lblMenEnvMen1, "Enviado!", Color.blue, 5);
            }
        }
    }//GEN-LAST:event_jButton19ActionPerformed

    private void formMensajeSeccionComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formMensajeSeccionComponentResized
        System.out.println(formMensajeSeccion.getWidth() + "-" + formMensajeSeccion.getHeight());
    }//GEN-LAST:event_formMensajeSeccionComponentResized

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        formMensajeSeccion.setBounds(0, 0, 314, 348);
        formMensajeSeccion.setLocationRelativeTo(null);
        formMensajeSeccion.setVisible(true);
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        limpiarFormMensaje();
        //cod_alu
        cod_alu2.setText(alumnoActual.getCodigo());
        //nombre alumno
        jTextField1.setText(alumnoActual.getNombre());
        lblMenEnvMen.setText("");

        formMensaje.setBounds(0, 0, 312, 344);
        formMensaje.setLocationRelativeTo(null);
        formMensaje.setVisible(true);
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        Historial.addHistorialGeneral("Se terminó la ejecución del sistema JEDIC Profesor");
    }//GEN-LAST:event_formWindowClosing
    private void guardarComo() {
        String nombreCodigo = "nuevo";
        if(Profesor.NOMBRE_ALUMNO != null){
            nombreCodigo = Profesor.NOMBRE_ALUMNO;
        }
        if (Guardar.guardarComo(nombreCodigo, "c, cpp", Idioma.palabras.get(K.GUARDAR_CODIFICACION), "/")) {
            Ruta.RUTA = Guardar.getRuta();
            Ruta.RUTA_SIN_EXTENSION = Guardar.getRutaSinExtension();
            try {
                Archivo.escribirEnAchivo(Ruta.RUTA, txtEje.getText(), true, false);
            } catch (IOException ex) {
                Logger.getLogger(JedicProfesor.class.getName()).log(Level.SEVERE, null, ex);
            }
            Compilacion.compilar(salida);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        Cambiar.aparienciaFormulario();
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                try {
                    new JedicProfesor().setVisible(true);
                } catch (ParserConfigurationException | SAXException | IOException | ClassNotFoundException | SQLException ex) {
                    Logger.getLogger(JedicProfesor.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog JDMisEjercicios;
    private javax.swing.JDialog JDReportes;
    private javax.swing.JDialog JDSubirEjercicio;
    private javax.swing.JDialog JDVisualizarEjercicios;
    private javax.swing.JTextArea areaMensaje;
    private javax.swing.JTextArea areaMensaje1;
    private javax.swing.JToolBar barra_herramientas;
    private javax.swing.JButton btnCmbCon;
    private javax.swing.JButton btnInicioSesion;
    private javax.swing.JButton btnReporte;
    private javax.swing.JButton btn_ejecom_barra;
    private javax.swing.JComboBox cboHor;
    private javax.swing.JComboBox cboHor1;
    private javax.swing.JComboBox cboSec;
    private javax.swing.JComboBox cboSecBaj;
    private javax.swing.JComboBox cboSecMen;
    private javax.swing.JComboBox cboSecSub;
    private javax.swing.JCheckBoxMenuItem ch1;
    private javax.swing.JCheckBoxMenuItem ch2;
    private javax.swing.JCheckBoxMenuItem ch3;
    private javax.swing.JLabel cod_alu;
    private javax.swing.JLabel cod_alu2;
    private javax.swing.JLabel cod_alu3;
    private javax.swing.JPasswordField con1;
    private javax.swing.JPasswordField con2;
    private javax.swing.JPasswordField conPro;
    private javax.swing.JLabel contEjAlu;
    private javax.swing.JLabel count;
    private javax.swing.JLabel count1;
    private javax.swing.JLabel count2;
    private javax.swing.JLabel count3;
    public static javax.swing.JDialog dialogCompilacion;
    private datechooser.beans.DateChooserCombo fecEjer;
    private datechooser.beans.DateChooserCombo fecFin;
    private datechooser.beans.DateChooserCombo fecIni;
    private datechooser.beans.DateChooserCombo fechaEjer;
    private javax.swing.JFrame formAlumnos;
    private javax.swing.JFrame formBarra;
    private javax.swing.JFrame formContrasena;
    private javax.swing.JFrame formMensaje;
    private javax.swing.JFrame formMensajeSeccion;
    private javax.swing.JFrame formPrincipal;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton18;
    private javax.swing.JButton jButton19;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JSplitPane jSplitPane3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JList lMisEjer;
    private javax.swing.JLabel lblMen;
    private javax.swing.JLabel lblMenEnvMen;
    private javax.swing.JLabel lblMenEnvMen1;
    private javax.swing.JLabel lblMenSesion;
    private javax.swing.JLabel lblMenSubEjer;
    private javax.swing.JLabel lblMensajeReporte;
    private javax.swing.JLabel lblPro;
    private javax.swing.JLabel lblSede;
    private javax.swing.JList listaAlumnos;
    private javax.swing.JMenu menuIdioma;
    private javax.swing.JPanel pPrincipal;
    private javax.swing.JPanel panelEje;
    private javax.swing.JPanel panelSuperior;
    private javax.swing.JProgressBar pbCompi;
    private javax.swing.JTextArea salida;
    private javax.swing.JTable tabEje;
    public static javax.swing.JLabel textoDialogo;
    private javax.swing.JTextArea txtDes;
    private javax.swing.JTextArea txtDes1;
    private javax.swing.JTextArea txtErr;
    private javax.swing.JTextField txtFechaCreacion;
    private javax.swing.JTextField txtFechaPlazo;
    private javax.swing.JTextField txtNomEje;
    private javax.swing.JTextField txtSec;
    private javax.swing.JTextField usuPro;
    // End of variables declaration//GEN-END:variables

    private boolean profesorTieneClave(String usuProfesor, int codDirector) {
        try {
            Conexion.sentencia.close();
            Conexion.sentencia = Conexion.con.createStatement();
            Conexion.rs = Conexion.sentencia.executeQuery("select pas_pro from profesor where usu_pro = '" + usuProfesor + "' and cod_dir = " + codDirector + "");

//            String wea = u.rs.getString("pas_pro");
//            System.out.println(wea);
            if (Conexion.rs.next()) {
                if (Conexion.rs.getString("pas_pro").equalsIgnoreCase("")) {
                    return false;
                } else {
                    return true;
                }
            } else {
                return false;
            }
        } catch (SQLException ex) {
            Logger.getLogger(JedicProfesor.class.getName()).log(Level.SEVERE, null, ex);
            return false;
        }

    }

    private boolean existeProfesor(String usu, String pass) {
        try {
            Conexion.sentencia.close();
            Conexion.sentencia = Conexion.con.createStatement();
            Conexion.rs = Conexion.sentencia.executeQuery("select * from profesor where usu_pro = '" + usu + "' and pas_usu = " + pass + "");

            if (Conexion.rs.next()) {
                return true;
            } else {
                return false;
            }
        } catch (SQLException ex) {
            Logger.getLogger(JedicProfesor.class.getName()).log(Level.SEVERE, null, ex);
            return false;
        }
    }

    private void llenarComboSedes() {
    }

    private void setiarClave(String usuProfesor, String clave, int codDirector) {
        try {
            Conexion.sentencia = Conexion.con.createStatement();
            Conexion.sentencia.execute("update profesor set pas_pro = '" + clave + "' where cod_dir = " + codDirector + " and usu_pro = '" + usuProfesor + "'");
        } catch (SQLException ex) {
            Logger.getLogger(JedicProfesor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private boolean isProfesorCorrecto(String usuPro, String clave) {
        try {
            Conexion.sentencia = Conexion.con.createStatement();
            Conexion.rs = Conexion.sentencia.executeQuery("select * from profesor where usu_pro = '" + usuPro + "' and pas_pro = '" + clave + "'");

            if (Conexion.rs.next()) {
                Conexion.sentencia.close();
                return true;
            } else {
                Conexion.sentencia.close();
                return false;
            }
        } catch (SQLException ex) {
            Logger.getLogger(JedicProfesor.class.getName()).log(Level.SEVERE, null, ex);
            return false;
        }
    }

    private String getNombreProfesor(String usupro) {
        try {
            Conexion.sentencia = Conexion.con.createStatement();
            Conexion.rs = Conexion.sentencia.executeQuery("select nom_pro from profesor where usu_pro = '" + usupro + "'");

            if (Conexion.rs.next()) {
                String nom = Conexion.rs.getString("nom_pro");
                Conexion.sentencia.close();
                return nom;
            } else {
                Conexion.sentencia.close();
                return "";
            }
        } catch (SQLException ex) {
            Logger.getLogger(JedicProfesor.class.getName()).log(Level.SEVERE, null, ex);
            return "";
        }
    }

    private int getIdProfesor(String usu) {
        try {
            Conexion.sentencia = Conexion.con.createStatement();
            Conexion.rs = Conexion.sentencia.executeQuery("select cod_pro from profesor where usu_pro = '" + usu + "'");

            if (Conexion.rs.next()) {
                int id = Integer.parseInt(Conexion.rs.getString("cod_pro"));
                Conexion.sentencia.close();
                return id;
            } else {
                Conexion.sentencia.close();
                return -1;
            }
        } catch (SQLException ex) {
            Logger.getLogger(JedicProfesor.class.getName()).log(Level.SEVERE, null, ex);
            return -1;
        }
    }

    private int obtenerIdSeccion(String numeroSeccion) {
        try {
            Conexion.sentencia = Conexion.con.createStatement();
            Conexion.rs = Conexion.sentencia.executeQuery(
                    "SELECT seccion.cod_sec "
                    + "FROM seccion "
                    + "WHERE seccion.cod_pro = " + Profesor.CODIGO + " and seccion.num_sec = " + numeroSeccion + "");

            if (Conexion.rs.next()) {
                int id = Integer.parseInt(Conexion.rs.getString("cod_sec"));
                Conexion.sentencia.close();
                return id;
            } else {
                Conexion.sentencia.close();
                return -1;
            }
        } catch (SQLException ex) {
            Logger.getLogger(JedicProfesor.class.getName()).log(Level.SEVERE, null, ex);
            return -1;
        }
    }

    private int obtenerIdDirector(String usupro) {
        try {
            Conexion.sentencia = Conexion.con.createStatement();
            Conexion.rs = Conexion.sentencia.executeQuery("select cod_dir from profesor where usu_pro = '" + usupro + "'");

            if (Conexion.rs.next()) {
                int id = Integer.parseInt(Conexion.rs.getString("cod_dir"));
                Conexion.sentencia.close();
                return id;
            } else {
                Conexion.sentencia.close();
                return -1;
            }
        } catch (SQLException ex) {
            Logger.getLogger(JedicProfesor.class.getName()).log(Level.SEVERE, null, ex);
            return -1;
        }
    }

    private void inicializarPanel() {
        txtEje.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_CPLUSPLUS);
//        txtEje.setBounds(0, 0, panel.getWidth(), panel.getHeight());
        txtEje.setFont(new java.awt.Font("Courier New", 0, 13));
        txtEje.setTabSize(4);
        txtEje.setMarkOccurrences(true);
        txtEje.setAutoIndentEnabled(true);
        RTextScrollPane scroll = new RTextScrollPane(txtEje);
        txtEje.addKeyListener(new KeyListener() {

            @Override
            public void keyTyped(KeyEvent e) {
//                throw new UnsupportedOperationException("Not supported yet.");
            }

            @Override
            public void keyPressed(KeyEvent e) {
//                throw new UnsupportedOperationException("Not supported yet.");
            }

            @Override
            public void keyReleased(KeyEvent e) {
                if (archivo != null) {
                    archivo = null;
                }
            }
        });
        panelEje.setLayout(new java.awt.BorderLayout());
        panelEje.add(scroll);
    }

    private void iniciarSesion() {
        String usuario, clave;
        usuario = usuPro.getText().trim();
        clave = conPro.getText();

        if (isProfesorCorrecto(usuario, clave)) {
            Profesor.NOMBRE = getNombreProfesor(usuario);
            Profesor.CODIGO = getIdProfesor(usuario);
            Profesor.SEDE = getSede();
            Profesor.ESTADO = getEstado();

            if (Profesor.ESTADO.equalsIgnoreCase("vigente")) {
                this.setVisible(false);
                //llenar lista de secciones
                secciones = getSecciones();
                cboSecBaj.removeAllItems();
                cboSecSub.removeAllItems();
                cboSec.removeAllItems();
                cboSecMen.removeAllItems();

                //tengo que borrar el boton menu enviar mensaje a
                jMenuItem6.setVisible(false);
                ejerc = new ArrayList();
                for (Seccion s : secciones) {
                    cboSecBaj.addItem(s);
                    cboSecSub.addItem(s);
                    cboSec.addItem(s);
                    cboSecMen.addItem(s);
                }
//                Utilidades.llenarCombo(cboSecBaj, "seccion where cod_pro = "+Profesor.CODIGO+"", "num_sec");
//                Utilidades.llenarCombo(cboSecSub, "seccion where cod_pro = "+Profesor.CODIGO+"", "num_sec");
                if (cboSecBaj.getItemCount() != 0) {
                    cboSecBaj.addItem(Idioma.palabras.get(K.TODAS_LAS_SECCIONES));
                    cboSecSub.addItem(Idioma.palabras.get(K.TODAS_LAS_SECCIONES));
                }
                usuPro.setText("");
                conPro.setText("");
                Redimensionar.redimensionarFormulario(formPrincipal, true, Idioma.palabras.get(K.JEDI_C_PROFESOR) + ": " + Profesor.NOMBRE);
                Cambiar.iconoDeFormulario(formPrincipal, Rutas.ICONO_ARRIBA);
                formPrincipal.setVisible(true);
                lblPro.setText(Profesor.NOMBRE);
                lblSede.setText(Profesor.SEDE);
                borrarTodo();
                ponerTitulosEnTabla();
                Historial.addHistorial("Inició sesión");
            } else {
                Mensaje.warning(Idioma.palabras.get(K.CUENTA_DESACTIVADA));
                Historial.addHistorialGeneral("Alguien intentó ingresar al sistem como profesor, pero tiene su cuenta desactivada. [user=" + usuario + "]");
                usuPro.setText("");
                conPro.setText("");
                usuPro.requestFocus();
            }
        } else {
            MensajeHilo.setMensaje(lblMenSesion, Idioma.palabras.get(K.ERROR_VERIFIQUE_DATOS), Color.red, 5);
            Historial.addHistorialGeneral("Alguien intentó ingresar al sistem como profesor. [user=" + usuario + "]");
            usuPro.selectAll();
            usuPro.requestFocus();
        }
    }

    private void borrarTodo() {
        try {
            txtNomEje.setText("");
            txtEje.setText("");
            con1.setText("");
            con2.setText("");
            txtErr.setText("");
            salida.setText("");
            cboSecSub.setSelectedIndex(0);
            cboSecBaj.setSelectedIndex(0);
        } catch (Exception e) {
        }
    }

    private String getSede() {
        try {
            Conexion.sentencia = Conexion.con.createStatement();
            Conexion.rs = Conexion.sentencia.executeQuery("SELECT sede.nom_sed FROM sede, director, profesor "
                    + "WHERE sede.cod_sed = director.cod_sed and director.cod_dir = profesor.cod_dir and profesor.cod_pro = " + Profesor.CODIGO);

            if (Conexion.rs.next()) {
                String sede = Conexion.rs.getString("nom_sed");
                Conexion.sentencia.close();
                return sede;
            } else {
                Conexion.sentencia.close();
                return "ERROR";
            }
        } catch (SQLException ex) {
            Logger.getLogger(JedicProfesor.class.getName()).log(Level.SEVERE, null, ex);
            return "ERROR";
        }
    }

    private void subirEjercicio(boolean isTodasLasSecciones) {
//        if(isTodasLasSecciones){
//            for (int i = 0; i < cboSecSub.getItemCount(); i++) {
//                try {
//                    int sec = Integer.parseInt(cboSecSub.getItemAt(i).toString());
//                    Profesor.CODIGO_SECCION = obtenerIdSeccion(Integer.toString(sec));
//
//                    if (archivo == null) {//es porque el texto esta en temp
//                        Archivo.escribirEnAchivo(temp.getPath(), txtEje.getText(), true, false);
//                        insertarArchivo(temp, Profesor.CODIGO_SECCION, true);
//                    } else {//el texto esta en archivo
//                        insertarArchivo(archivo, Profesor.CODIGO_SECCION, true);
//                    }
//                } catch (NumberFormatException ex) {
//                } catch (SQLException ex) {
//                    Logger.getLogger(JedicProfesor.class.getName()).log(Level.SEVERE, null, ex);
//                } catch (FileNotFoundException ex) {
//                    Logger.getLogger(JedicProfesor.class.getName()).log(Level.SEVERE, null, ex);
//                } catch (IOException ex) {
//                    Logger.getLogger(JedicProfesor.class.getName()).log(Level.SEVERE, null, ex);
//                }
//            }
//        }


        try {
            if (archivo == null) {//es porque el texto esta en temp
                Archivo.escribirEnAchivo(temp.getPath(), txtEje.getText(), true, false);
                insertarArchivo(temp, isTodasLasSecciones);
            } else {//el texto esta en archivo
                insertarArchivo(archivo, isTodasLasSecciones);
            }
        } catch (SQLException | IOException ex) {
            Logger.getLogger(JedicProfesor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void actualizarListadoDeEjercicios(boolean isTodasLasSecciones, String codEjerPro) {
        String seccion = cboSecBaj.getSelectedItem().toString();
        String q1, q2, q3;
//        q1 = "SELECT count(0) as cant "
//                + "FROM seccion, alumno, ejercicio_alumno, profesor "
//                + "WHERE profesor.cod_pro = seccion.cod_pro and seccion.cod_sec = alumno.cod_sec "
//                + "and alumno.cod_alu = ejercicio_alumno.cod_alu "
//                + "and profesor.cod_pro = " + Profesor.CODIGO + " and seccion.num_sec = " + seccion + (codEjerPro == null ? "":" and ejercicio_alumno.eje_pro = "+codEjerPro );
//        q2 = "SELECT ejercicio_alumno.cod_eje, alumno.nom_alu, seccion.num_sec, ejercicio_alumno.cod_alu, "//cambiar 
//                + "ejercicio_alumno.fec_eje as 'fecha alu' "
//                + "FROM seccion, alumno, ejercicio_alumno, profesor "
//                + "WHERE profesor.cod_pro = seccion.cod_pro and seccion.cod_sec = alumno.cod_sec "
//                + "and alumno.cod_alu = ejercicio_alumno.cod_alu "
//                + "and profesor.cod_pro = " + Profesor.CODIGO + " and seccion.num_sec = " + seccion + (codEjerPro == null ? "":" and ejercicio_alumno.eje_pro = "+codEjerPro );
//        q3 = "SELECT count(0) as cant "
//                + "FROM seccion, alumno, ejercicio_alumno, profesor  "
//                + "WHERE profesor.cod_pro = seccion.cod_pro and seccion.cod_sec = alumno.cod_sec "
//                + "and alumno.cod_alu = ejercicio_alumno.cod_alu "
//                + "and profesor.cod_pro = " + Profesor.CODIGO + (codEjerPro == null ? "":" and ejercicio_alumno.eje_pro = "+codEjerPro );
        q1 = "SELECT count(0) as cant "
                + "FROM seccion, alumno, ejercicio_alumno, profesor, ejercicio_profesor "
                + "WHERE ejercicio_profesor.cod_eje = ejercicio_alumno.eje_pro and profesor.cod_pro = seccion.cod_pro and seccion.cod_sec = alumno.cod_sec "
                + "and alumno.cod_alu = ejercicio_alumno.cod_alu "
                + "and profesor.cod_pro = " + Profesor.CODIGO + " and seccion.num_sec = " + seccion + (codEjerPro == null ? "" : " and ejercicio_alumno.eje_pro = " + codEjerPro);
        q2 = "SELECT ejercicio_alumno.cod_eje, alumno.cod_alu, alumno.nom_alu,  seccion.num_sec, ejercicio_profesor.nom_eje, "
                + "ejercicio_alumno.fec_eje as 'fecha alu', ejercicio_profesor.fec_eje as 'fecha pro' "
                + "FROM seccion, alumno, ejercicio_alumno, profesor, ejercicio_profesor "
                + "WHERE ejercicio_profesor.cod_eje = ejercicio_alumno.eje_pro and profesor.cod_pro = seccion.cod_pro and seccion.cod_sec = alumno.cod_sec "
                + "and alumno.cod_alu = ejercicio_alumno.cod_alu "
                + "and profesor.cod_pro = " + Profesor.CODIGO + " and seccion.num_sec = "
                + seccion + (codEjerPro == null ? "" : " and ejercicio_alumno.eje_pro = " + codEjerPro )+" order by ejercicio_alumno.fec_eje desc";
        q3 = "SELECT count(0) as cant "
                + "FROM seccion, alumno, ejercicio_alumno, profesor, ejercicio_profesor  "
                + "WHERE ejercicio_profesor.cod_eje = ejercicio_alumno.eje_pro and profesor.cod_pro = seccion.cod_pro and seccion.cod_sec = alumno.cod_sec "
                + "and alumno.cod_alu = ejercicio_alumno.cod_alu "
                + "and profesor.cod_pro = " + Profesor.CODIGO + (codEjerPro == null ? "" : " and ejercicio_alumno.eje_pro = " + codEjerPro);
        int cant = 0;
        try {
            Conexion.sentencia = Conexion.con.createStatement();
            if (isTodasLasSecciones) {
                Conexion.rs = Conexion.sentencia.executeQuery(q3);

                if (Conexion.rs.next()) {
                    cant = Integer.parseInt(Conexion.rs.getString("cant"));
                }
                Conexion.sentencia.close();

                tabEje.setModel(new javax.swing.table.DefaultTableModel(new Object[cant][enc.length], enc));
                for (int i = 0; i < cboSecBaj.getItemCount(); i++) {
                    int sec = Integer.parseInt(cboSecBaj.getItemAt(i).toString());

                    Conexion.sentencia = Conexion.con.createStatement();
                    Conexion.rs = Conexion.sentencia.executeQuery(
                            "SELECT ejercicio_alumno.cod_eje, alumno.cod_alu, alumno.nom_alu, seccion.num_sec, ejercicio_profesor.nom_eje, "//cabmiar
                            + "ejercicio_alumno.fec_eje as 'fecha alu', ejercicio_profesor.fec_eje as 'fecha pro' "
                            + "FROM seccion, alumno, ejercicio_alumno, profesor, ejercicio_profesor "
                            + "WHERE ejercicio_profesor.cod_eje = ejercicio_alumno.eje_pro and profesor.cod_pro = seccion.cod_pro and seccion.cod_sec = alumno.cod_sec "
                            + "and alumno.cod_alu = ejercicio_alumno.cod_alu "
                            + "and profesor.cod_pro = " + Profesor.CODIGO + " and seccion.num_sec = " + sec + (codEjerPro == null ? "" : " and ejercicio_alumno.eje_pro = " + codEjerPro)+
                            " order by ejercicio_alumno.fec_eje desc");

                    while (Conexion.rs.next()) {
                        Atraso at = getAtraso(Conexion.rs.getString("fecha alu"), Conexion.rs.getString("fecha pro"));
                        ejerc.add(new EjercicioAlumno(Conexion.rs.getString("cod_eje"), Conexion.rs.getString("cod_alu"), Conexion.rs.getString("nom_alu"), Conexion.rs.getString("num_sec"), Conexion.rs.getString("nom_eje"), at));
                    }
                    setEjerciciosEnTabla(ejerc);
                    tabEje.setEnabled(true);
                }
            } else {
                Conexion.rs = Conexion.sentencia.executeQuery(q1);

                if (Conexion.rs.next()) {
                    cant = Integer.parseInt(Conexion.rs.getString("cant"));
                }
                Conexion.sentencia.close();
                tabEje.setModel(new javax.swing.table.DefaultTableModel(new Object[cant][enc.length], enc));

                Conexion.sentencia = Conexion.con.createStatement();
                System.out.println(q2);
                Conexion.rs = Conexion.sentencia.executeQuery(q2);


                while (Conexion.rs.next()) {
                    Atraso at = getAtraso(Conexion.rs.getString("fecha alu"), Conexion.rs.getString("fecha pro"));
                    ejerc.add(new EjercicioAlumno(Conexion.rs.getString("cod_eje"), Conexion.rs.getString("cod_alu"), Conexion.rs.getString("nom_alu"), Conexion.rs.getString("num_sec"), Conexion.rs.getString("nom_eje"), at));
                }
                setEjerciciosEnTabla(ejerc);
                tabEje.setEnabled(true);
            }
            Conexion.sentencia.close();
        } catch (NumberFormatException ex) {
        } catch (SQLException ex) {
            Logger.getLogger(JedicProfesor.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(JedicProfesor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void guardar() {
        try {
            Archivo.escribirEnAchivo(Ruta.RUTA, txtEje.getText(), true, false);
        } catch (IOException ex) {
            Logger.getLogger(JedicProfesor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void cambiarContraseña() {
        String c1, c2;
        c1 = con1.getText();
        c2 = con2.getText();

        if (!c1.equals(c2)) {
            txtErr.setText(Idioma.palabras.get(K.LAS_CONTRASENAS_NO_COINCIDEN));
        } else {
            String er = Clave.isClaveCorrecta(c2);
            if (er.isEmpty()) {//contraseña OK
                try {
                    //contraseña OK
                    Conexion.sentencia = Conexion.con.createStatement();
                    Conexion.sentencia.execute("UPDATE profesor SET pas_pro = '" + c1 + "' WHERE cod_pro = " + Profesor.CODIGO + "");
                    Conexion.sentencia.close();
                    Historial.addHistorial("Ha cambiado la contraseña");
                } catch (SQLException ex) {
                    Logger.getLogger(JedicProfesor.class.getName()).log(Level.SEVERE, null, ex);
                }

                txtErr.setForeground(Color.blue);
                txtErr.setText(Idioma.palabras.get(K.SU_CONTRASENA_SE_HA_CAMBIADO_EXITOSAMENTE));
            } else {
                txtErr.setForeground(Color.red);
                txtErr.setText(Idioma.palabras.get(K.LA_CONTRASENA_DEBE_CONTENER) + ":\n\n" + er);
            }
        }
    }

//    private void subirEjercicioATodasLasSecciones() {
//
//        for (int i = 0; i < cboSecSub.getItemCount(); i++) {
//            try {
//                int sec = Integer.parseInt(cboSecSub.getItemAt(i).toString());
//                Profesor.CODIGO_SECCION = obtenerIdSeccion(Integer.toString(sec));
//
//                if (archivo == null) {//es porque el texto esta en temp
//                    Archivo.escribirEnAchivo(temp.getPath(), txtEje.getText(), true, false);
//                    insertarArchivo(temp, Profesor.CODIGO_SECCION, true);
//                } else {//el texto esta en archivo
//                    insertarArchivo(archivo, Profesor.CODIGO_SECCION, true);
//                }
//            } catch (NumberFormatException ex) {
//            } catch (SQLException ex) {
//                Logger.getLogger(JedicProfesor.class.getName()).log(Level.SEVERE, null, ex);
//            } catch (FileNotFoundException ex) {
//                Logger.getLogger(JedicProfesor.class.getName()).log(Level.SEVERE, null, ex);
//            } catch (IOException ex) {
//                Logger.getLogger(JedicProfesor.class.getName()).log(Level.SEVERE, null, ex);
//            }
//        }
//    }
//    private void actualizarListadoTodasLasSecciones() {
//        int cant = 0;
//        try {
//            Conexion.sentencia = Conexion.con.createStatement();
//            Conexion.rs = Conexion.sentencia.executeQuery(
//                    "SELECT count(0) as cant "
//                    + "FROM seccion, alumno, ejercicio_alumno, profesor  "
//                    + "WHERE profesor.cod_pro = seccion.cod_pro and seccion.cod_sec = alumno.cod_sec "
//                    + "and alumno.cod_alu = ejercicio_alumno.cod_alu "
//                    + "and profesor.cod_pro = " + Profesor.CODIGO+" ");
//
//            if (Conexion.rs.next()) {
//                cant = Integer.parseInt(Conexion.rs.getString("cant"));
//            }
//            Conexion.sentencia.close();
//
//            tabEje.setModel(new javax.swing.table.DefaultTableModel(new Object[cant][enc.length], enc));
//        } catch (Exception e) {
//        }
//        int in = 0;
//        for (int i = 0; i < cboSecBaj.getItemCount(); i++) {
//            try {
//
//                int seccion = Integer.parseInt(cboSecBaj.getItemAt(i).toString());
//                
//                Conexion.sentencia = Conexion.con.createStatement();
//                Conexion.rs = Conexion.sentencia.executeQuery(
//                        "SELECT ejercicio_alumno.cod_eje, alumno.nom_alu, seccion.num_sec, ejercicio_alumno.nom_eje, "
//                        + "ejercicio_alumno.fec_eje as 'fecha alu' "
//                        + "FROM seccion, alumno, ejercicio_alumno, profesor "
//                        + "WHERE profesor.cod_pro = seccion.cod_pro and seccion.cod_sec = alumno.cod_sec "
//                        + "and alumno.cod_alu = ejercicio_alumno.cod_alu "
//                        + "and profesor.cod_pro = " + Profesor.CODIGO + " and seccion.num_sec = " + seccion + " ");
//                /*"SELECT ejercicio_alumno.cod_eje, alumno.nom_alu, seccion.num_sec, ejercicio_alumno.nom_eje, "
//                        + "ejercicio_alumno.fec_eje as 'fecha alu' "
//          + "FROM seccion, alumno, ejercicio_alumno, profesor "+
//            "WHERE profesor.cod_pro = seccion.cod_pro and seccion.cod_sec = alumno.cod_sec "
//          + "and alumno.cod_alu = ejercicio_alumno.cod_alu "+
//            "and profesor.cod_pro = "+Profesor.CODIGO+" and seccion.num_sec = "+seccion+" ");*/
//                while (Conexion.rs.next()) {
//                    for (int j = 1; j <= enc.length; j++) {
//                        tabEje.setValueAt(Conexion.rs.getString(j), in, (j - 1));
//                    }
//                    in++;
//                }
//                tabEje.setEnabled(true);
//                Conexion.sentencia.close();
//
//            } catch (NumberFormatException ex) {
//            } catch (SQLException ex) {
//                Logger.getLogger(JedicProfesor.class.getName()).log(Level.SEVERE, null, ex);
//            }
//        }
//    }
    private String getEstado() {
        String est = null;
        try {
            Conexion.sentencia = Conexion.con.createStatement();
            Conexion.rs = Conexion.sentencia.executeQuery("select est_pro from profesor where cod_pro = '" + Profesor.CODIGO + "'");
            if (Conexion.rs.next()) {
                est = Conexion.rs.getString("est_pro");
            }
            Conexion.sentencia.close();
        } catch (SQLException ex) {
            Logger.getLogger(JedicProfesor.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            return est;
        }
    }

    private void conectarBD() throws ParserConfigurationException, SAXException, IOException, ClassNotFoundException, SQLException {
        Conexion.conectar(getDatosConexion());
    }

    private DatosConexion getDatosConexion() throws ParserConfigurationException, SAXException, IOException {
        final Tag conexion = DOM.procesarArchivoXMLDom(new File(Rutas.RUTA_CONFIG_BD));

        return new DatosConexion() {

            @Override
            public String getServer() {
                Tag server = getTag("server");
                return server.getContenido();
            }

            @Override
            public String getUser() {
                return getAtributo("user", conexion).getValor();
            }

            @Override
            public String getPass() {
                return getAtributo("pass", conexion).getValor();
            }

            @Override
            public String getBaseDeDatos() {
                Tag bd = getTag("baseDeDatos");
                return bd.getContenido();
            }

            private Tag getTag(String nomTag) {
                for (Tag t : conexion.getTagsHijos()) {
                    if (t.getNombre().equalsIgnoreCase(nomTag)) {
                        return t;
                    }
                }
                return null;
            }

            private Atributo getAtributo(String nomAtributo, Tag tag) {
                for (Atributo a : tag.getAtributos()) {
                    if (a.getNombre().equalsIgnoreCase(nomAtributo)) {
                        return a;
                    }
                }
                return null;
            }
        };
    }

    public void insertarArchivo(File a, boolean its) throws SQLException, FileNotFoundException {
        //its = is todas las secciones
        Seccion seccion = null;
        if (!its) {
//            String seccion = cboSecSub.getSelectedItem().toString();
//            Profesor.CODIGO_SECCION = obtenerIdSeccion(seccion);
            seccion = (Seccion) cboSecSub.getSelectedItem();
            Profesor.CODIGO_SECCION = seccion.getCodigo();
        }
        Calendar d = fechaEjer.getSelectedDate();
        String fecha = d.get(Calendar.YEAR) + "-" + (d.get(Calendar.MONTH) + 1) + "-" + d.get(Calendar.DAY_OF_MONTH);
        String nombreEjer = txtNomEje.getText();
        String sql = "INSERT INTO ejercicio_profesor(" + (its ? "" : "cod_sec, ") + " nom_eje, eje_pro, fec_eje, fec_cre, tod_sec, des_eje, cod_pro) "
                + "VALUES (" + (its ? "" : "'" + Profesor.CODIGO_SECCION + "',") + "'" + nombreEjer + "',?,'" + fecha + " " + cboHor.getSelectedItem().toString() + "', '" + Fecha.getAnio() + "-" + Fecha.getNumeroDeMes() + "-" + Fecha.getDia() + " " + Hora.getHoraActual() + "', '" + (its ? "si" : "no") + "','" + txtDes.getText().trim() + "', '" + Profesor.CODIGO + "')";
        //Creamos una cadena para después prepararla


        PreparedStatement stmt = Conexion.con.prepareStatement(sql);
        FileInputStream fis = new FileInputStream(a);
        //Lo convertimos en un Stream
        stmt.setBinaryStream(1, fis, (int) a.length());
        //Asignamos el Stream al Statement
        stmt.execute();
        txtNomEje.setText("");
        cboSecSub.setSelectedIndex(0);

        cboHor.setSelectedIndex(0);
        if (its) {
            Historial.addHistorial("Ha subido un ejercicio para sus secciones: [nombre=" + nombreEjer + ", descripcion=" + txtDes.getText().trim() + "]");
        } else {
            Historial.addHistorial("Ha subido un ejercicio para la sección " + seccion.getNumero() + ": [nombre=" + nombreEjer + ", descripcion=" + txtDes.getText().trim() + "]");
        }
        txtDes.setText("");
        MensajeHilo.setMensaje(lblMenSubEjer, Idioma.palabras.get(K.EJER_ENVIADO_CON_EXITO), Color.blue, 5);

    }

    private void descargarEjercicioDeAlumno(String cod_eje, File archivo) {
        try {
            String sql = "SELECT eje_alu FROM ejercicio_alumno where cod_eje = " + cod_eje + ";";
            Conexion.sentencia = Conexion.con.createStatement();
            Conexion.rs = Conexion.sentencia.executeQuery(sql);
            Blob ar = null;
            while (Conexion.rs.next()) {
                ar = Conexion.rs.getBlob("eje_alu");
                System.out.println("OK");
            }
            try (InputStream is = ar.getBinaryStream(); OutputStream out = new FileOutputStream(archivo)) {
                byte[] buf = new byte[1024];
                int len;
                while ((len = is.read(buf)) > 0) {
                    out.write(buf, 0, len);
                }
            }

//            InputStream is = ar.getBinaryStream();
//            System.out.println("paso");
//            OutputStream out = new FileOutputStream(archivo);
//            byte[] buf = new byte[1024];
//            int len;
//            while ((len = is.read(buf)) > 0) {
//                out.write(buf, 0, len);
//            }
//            out.close();
//            is.close();
        } catch (SQLException | IOException ex) {
            Logger.getLogger(JedicProfesor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void descargarEjercicioProfesor(Ejercicio e, File archivo) {
        try {
            String sql = "SELECT eje_pro FROM ejercicio_profesor where cod_eje = " + e.getCodigo() + ";";
            Conexion.sentencia = Conexion.con.createStatement();
            Conexion.rs = Conexion.sentencia.executeQuery(sql);
            Blob ar = null;
            while (Conexion.rs.next()) {
                ar = Conexion.rs.getBlob("eje_pro");
            }
            try (InputStream is = ar.getBinaryStream(); OutputStream out = new FileOutputStream(archivo)) {
                byte[] buf = new byte[1024];
                int len;
                while ((len = is.read(buf)) > 0) {
                    out.write(buf, 0, len);
                }
            }

            /*
             * InputStream is = ar.getBinaryStream(); OutputStream out = new
             * FileOutputStream(archivo); byte[] buf = new byte[1024]; int len;
             * while ((len = is.read(buf)) > 0) { out.write(buf, 0, len); }
             * out.close(); is.close();
             */
        } catch (SQLException | IOException ex) {
            Logger.getLogger(JedicProfesor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void cargarIdiomaEnComponentes() {
        List<String> p = Idioma.palabras;
        //formulario inicio sesion
//        jLabel10.setText(p.get(K.BIENVENIDO));
//        jLabel7.setText(p.get(K.INGRESA_LA_INFORMACION_REQ));
//        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(p.get(K.INFORMACION_PROFESOR)));
        jLabel13.setText(p.get(K.USUARIO));
        jLabel15.setText(p.get(K.CONTRASENA));
        jLabel26.setText("<html><u>"+p.get(K.RECUPERAR_CONTRASENA)+"</u></html>");
        btnInicioSesion.setText(p.get(K.INGRESAR));

        //formulario principal
        jLabel3.setText(p.get(K.FECHA));
        jMenu1.setText(p.get(K.AYUDA));
        jMenuItem1.setText(p.get(K.AYUDA_DE_CONTENIDOS));
//        jButton5.setText(p.get(K.NUEVO));
//        jButton6.setText(p.get(K.ABRIR));
//        jButton1.setText(p.get(K.CAMBIAR_CONTRASENA));
        jLabel12.setText(p.get(K.PROFESOR) + ": ");
        jLabel2.setText(p.get(K.SEDE) + ": ");
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(p.get(K.ENVIAR_EJERCICIO)));
        jLabel4.setText(p.get(K.NOMBRE));
        jLabel5.setText(p.get(K.SECCION));
        jButton7.setText(p.get(K.ENVIAR_EJERCICIO));
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(p.get(K.VISUALIZAR_EJERCICIOS)));
        jLabel6.setText(p.get(K.SECCION));
        jButton8.setText(p.get(K.ACTUALIZAR_LISTADO));
        jButton9.setText(p.get(K.REVISAR_EJERCICIO));
        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(p.get(K.REPORTES)));
        jLabel16.setText(p.get(K.FECHA_INICIO));
        jLabel17.setText(p.get(K.FECHA_FINAL));
//        jButton10.setText(p.get(K.CERRAR_SESION));
        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(p.get(K.ERRORE_DE_COMPILACION)));

        //formulario contraseña
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(p.get(K.INFORMACION)));
        jLabel21.setText(p.get(K.CONTRASENA_NUEVA));
        jLabel22.setText(p.get(K.REPETIR_CONTRASENA));
        btnCmbCon.setText(p.get(K.CAMBIAR_CONTRASENA));
        jLabel8.setText(p.get(K.ERRORES));

        //encabezados
        enc[0] = Idioma.palabras.get(K.CODIGO);
        enc[1] = Idioma.palabras.get(K.ALUMNO);
        enc[2] = Idioma.palabras.get(K.SECCION);
        enc[3] = Idioma.palabras.get(K.EJERCICIO);
        enc[4] = "Atrasado";

        //
        ch1.setText(p.get(K.ENVIAR_EJERCICIO));
        ch2.setText(p.get(K.REVISAR_EJERCICIO));
        ch3.setText(p.get(K.REPORTES));
        cargarMenuIdioma();
    }

    private void cargarMenuIdioma() {
        menuIdioma.setText(Idioma.palabras.get(K.IDIOMA));
        File ar = new File(Rutas.CARPETA_IDIOMAS);
        menuIdioma.removeAll();
        for (File f : ar.listFiles()) {
            if (!f.getName().contains("idioma") && !f.getName().contains("svn")) {
                try {
                    Tag root = DOM.procesarArchivoXMLDom(f);

                    final String ruta = f.getPath();


                    javax.swing.JCheckBoxMenuItem item = new javax.swing.JCheckBoxMenuItem(root.getValorDeAtributo("idioma"));
                    item.addActionListener(new ActionListener() {

                        @Override
                        public void actionPerformed(ActionEvent e) {
                            try {
                                Tag root = DOM.procesarArchivoXMLDom(new File(Rutas.CARPETA_IDIOMAS + Rutas.ARCHIVO_IDIOMA));
                                root.actualizarValorAtributo("ruta", ruta.replaceAll("\\\\", "/"));
                                DOM.crearArchivoXML(root, new File(Rutas.CARPETA_IDIOMAS + Rutas.ARCHIVO_IDIOMA));
                                Idioma.cargarConfiguracionDeIdioma();
                                cargarIdiomaEnComponentes();
                                cambiarTitulos(tabEje, enc);
                            } catch (TransformerConfigurationException ex) {
                            } catch (FileNotFoundException ex) {
                            } catch (TransformerException ex) {
                            } catch (ParserConfigurationException | SAXException | IOException ex) {
                            }
                        }
                    });
                    if (Idioma.idiomaSeleccionado.getPath().equalsIgnoreCase(ruta)) {
                        item.setSelected(true);
                    }
                    menuIdioma.add(item);

                } catch (ParserConfigurationException | SAXException | IOException ex) {
                }
            }
        }
    }

    private void cambiarTitulos(javax.swing.JTable tab, String[] titulos) {
        int row, col;
        row = tab.getRowCount();
        col = tab.getColumnCount();

//        System.out.println();
//        System.out.println("ROW: "+row);
//        System.out.println("COL: "+col);
//        System.out.println();

        Object[][] obj = new Object[row][col];

        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                obj[i][j] = tab.getValueAt(i, j);
            }
        }
        tab.setModel(new javax.swing.table.DefaultTableModel(new Object[row][col], titulos));

        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                tab.setValueAt(obj[i][j], i, j);
            }
        }
    }

    private void ponerTitulosEnTabla() {
        tabEje.setModel(new DefaultTableModel(enc, 0));
    }

    private void mostrarWidthHeigth(JDialog c) {
        System.out.println("W: " + c.getWidth());
        System.out.println("H: " + c.getHeight());
    }

    private List<Ejercicio> getEjerciciosDelProfesor() {
        List<Ejercicio> l = new ArrayList<>();
        try {
            Conexion.sentencia = Conexion.con.createStatement();
            String query = "select ejercicio_profesor.cod_eje, ejercicio_profesor.nom_eje, "
                    + "ejercicio_profesor.des_eje, ejercicio_profesor.fec_eje "
                    + "from ejercicio_profesor "
                    + "where ejercicio_profesor.cod_pro = " + Profesor.CODIGO + " order by ejercicio_profesor.fec_cre "
                    + "desc";
//            String query = "select ejercicio_profesor.cod_eje, ejercicio_profesor.nom_eje, "
//                         + "ejercicio_profesor.des_eje, ejercicio_profesor.fec_eje "+
//                           "from ejercicio_profesor, seccion, profesor "+
//                           "where seccion.cod_pro = profesor.cod_pro "+
//                           "and seccion.cod_sec = ejercicio_profesor.cod_sec "+
//                           "and profesor.cod_pro = "+Profesor.CODIGO;
            System.out.println(query);
            Conexion.rs = Conexion.sentencia.executeQuery(query);

            while (Conexion.rs.next()) {
                String nom, cod, des, fec, hor;

                nom = Conexion.rs.getString("nom_eje");
                cod = Conexion.rs.getString("cod_eje");
                des = Conexion.rs.getString("des_eje");
                fec = Conexion.rs.getString("fec_eje");
                hor = clases.utilidades.Util.getHora(fec);
                fec = clases.utilidades.Util.getFechaBonita(fec);

                l.add(new Ejercicio(nom, cod, des, fec, hor));
            }

            Conexion.sentencia.close();
        } catch (SQLException ex) {
            Logger.getLogger(JedicProfesor.class.getName()).log(Level.SEVERE, null, ex);
        }
        return l;
    }

    private void desplegarInformacionDeEjercicio(Ejercicio e) {
        try {

            Conexion.sentencia = Conexion.con.createStatement();
            String query = "select fec_eje, fec_cre, "
                    + "tod_sec, cod_sec "
                    + " from ejercicio_profesor "
                    + " where cod_eje = " + e.getCodigo();
//            String query = "select ejercicio_profesor.fec_eje, ejercicio_profesor.fec_cre, seccion.num_sec, ejercicio_profesor.tod_sec "+
//                           "from ejercicio_profesor, seccion "+
//                           "where ejercicio_profesor.cod_eje = "+e.getCodigo()+
//                           " and seccion.cod_sec = ejercicio_profesor.cod_sec";
//            System.out.println(query);
            Conexion.rs = Conexion.sentencia.executeQuery(query);

            if (Conexion.rs.next()) {
                int cantEjerAlu = getCantidadDeEjerciciosAlumno(e.getCodigo());
                contEjAlu.setText(String.valueOf(cantEjerAlu));
                jTextField2.setText(e.getNombreEjercicio());
                if (Conexion.rs.getString("tod_sec").equalsIgnoreCase("si")) {
                    txtSec.setText(Idioma.palabras.get(K.TODAS_LAS_SECCIONES));
                } else { //tengo que saber la seccion
                    String codSec = Conexion.rs.getString("cod_sec");
                    String numSec = getNumeroSeccion(codSec);
                    txtSec.setText(numSec);
                }

                String fecha = Conexion.rs.getString("fec_eje");

                txtFechaPlazo.setText(Util.getFechaBonita(fecha));
                int[] f = Util.getFecha(fecha);
                Calendar c = Calendar.getInstance();
                c.set(f[Util.ANO], f[Util.MES] - 1, f[Util.DIA]);
//                System.out.println(f[Util.ANO] +"-"+f[Util.MES]+"-"+ f[Util.DIA]);
                fecEjer.setSelectedDate(c);
                txtFechaCreacion.setText(Util.getFechaBonita(Conexion.rs.getString("fec_cre")));
                cboHor1.setSelectedItem(Util.getHora(fecha));
                txtDes1.setText(e.getDescripcion());
                this.txtDes1KeyReleased(null);
            }

            Conexion.sentencia.close();
        } catch (SQLException ex) {
            Logger.getLogger(JedicProfesor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

//    private void actualizarListadoTodasLasSecciones(Ejercicio e) {
//        int cant = 0;
//        try {
//            Conexion.sentencia = Conexion.con.createStatement();
//            Conexion.rs = Conexion.sentencia.executeQuery(
//                    "SELECT count(0) as cant "
//                    + "FROM seccion, alumno, ejercicio_alumno, profesor, ejercicio_profesor  "
//                    + "WHERE ejercicio_profesor.cod_eje = "+e.getCodigo()+" and ejercicio_profesor.cod_eje = "+e.getCodigo()+" and profesor.cod_pro = seccion.cod_pro and seccion.cod_sec = alumno.cod_sec "
//                    + "and alumno.cod_alu = ejercicio_alumno.cod_alu "
//                    + "and profesor.cod_pro = " + Profesor.CODIGO+" "
//                    + "and ejercicio_alumno.fec_eje < ejercicio_profesor.fec_eje");
//
//            if (Conexion.rs.next()) {
//                cant = Integer.parseInt(Conexion.rs.getString("cant"));
//            }
//            Conexion.sentencia.close();
//
//            tabEje.setModel(new javax.swing.table.DefaultTableModel(new Object[cant][enc.length], enc));
//        } catch (Exception ex) {
//        }
//        int in = 0;
//        for (int i = 0; i < cboSecBaj.getItemCount(); i++) {
//            try {
//
//                int seccion = Integer.parseInt(cboSecBaj.getItemAt(i).toString());
//                
//                Conexion.sentencia = Conexion.con.createStatement();
//                Conexion.rs = Conexion.sentencia.executeQuery(
//                        "SELECT ejercicio_alumno.cod_eje, alumno.nom_alu, seccion.num_sec,ejercicio_alumno.nom_eje, "
//                        + "ejercicio_profesor.fec_eje as 'fecha profe', ejercicio_alumno.fec_eje as 'fecha alu' "
//                        + "FROM seccion, alumno, ejercicio_alumno, profesor, ejercicio_profesor "
//                        + "WHERE ejercicio_profesor.cod_eje = "+e.getCodigo()+" and ejercicio_profesor.cod_eje = "+e.getCodigo()+" and profesor.cod_pro = seccion.cod_pro and seccion.cod_sec = alumno.cod_sec "
//                        + "and alumno.cod_alu = ejercicio_alumno.cod_alu "
//                        + "and profesor.cod_pro = " + Profesor.CODIGO + " and seccion.num_sec = " + seccion + " "
//                        + "and ejercicio_alumno.fec_eje < ejercicio_profesor.fec_eje");//solo muestra los ejercicios dentro de la fecha de entrega
//                while (Conexion.rs.next()) {
//                    for (int j = 1; j <= 4; j++) {
//                        tabEje.setValueAt(Conexion.rs.getString(j), in, (j - 1));
//                    }
//                    in++;
//                }
//                tabEje.setEnabled(true);
//                Conexion.sentencia.close();
//
//            } catch (NumberFormatException ex) {
//            } catch (SQLException ex) {
//                Logger.getLogger(JedicProfesor.class.getName()).log(Level.SEVERE, null, ex);
//            }
//        }
//    }
//
//    private void actualizarListadoDeEjercicios(Ejercicio e) {
//        String seccion = cboSecBaj.getSelectedItem().toString();
//        int cant = 0;
//        try {
//            Conexion.sentencia = Conexion.con.createStatement();
//            Conexion.rs = Conexion.sentencia.executeQuery(
//            "SELECT count(0) as cant "
//          + "FROM seccion, alumno, ejercicio_alumno, profesor, ejercicio_profesor "+
//            "WHERE profesor.cod_pro = seccion.cod_pro and seccion.cod_sec = alumno.cod_sec "
//          + "and alumno.cod_alu = ejercicio_alumno.cod_alu "+
//            "and profesor.cod_pro = "+Profesor.CODIGO+" and seccion.num_sec = "+seccion+" "
//          + "and ejercicio_alumno.fec_eje < ejercicio_profesor.fec_eje");
//
//            if(Conexion.rs.next()){
//                cant = Integer.parseInt(Conexion.rs.getString("cant"));
//            }
//            Conexion.sentencia.close();
//
//            tabEje.setModel(new javax.swing.table.DefaultTableModel(new Object[cant][enc.length], enc));
//
//            Conexion.sentencia = Conexion.con.createStatement();
//            Conexion.rs = Conexion.sentencia.executeQuery(
//            "SELECT ejercicio_alumno.cod_eje, alumno.nom_alu, seccion.num_sec, ejercicio_alumno.nom_eje "
//          + ", ejercicio_profesor.fec_eje as 'fecha profe', ejercicio_alumno.fec_eje as 'fecha alu' "
//          + "FROM seccion, alumno, ejercicio_alumno, profesor, ejercicio_profesor "+
//            "WHERE profesor.cod_pro = seccion.cod_pro and seccion.cod_sec = alumno.cod_sec "
//          + "and alumno.cod_alu = ejercicio_alumno.cod_alu "+
//            "and profesor.cod_pro = "+Profesor.CODIGO+" and seccion.num_sec = "+seccion+" "
//          + "and ejercicio_alumno.fec_eje < ejercicio_profesor.fec_eje");
//            int i=0;
//            while(Conexion.rs.next()){
//                for(int j=1;j<=enc.length;j++){
//                    tabEje.setValueAt(Conexion.rs.getString(j), i, (j-1));
//                }
//                i++;
//            }
//            tabEje.setEnabled(true);
//            Conexion.sentencia.close();
//        } catch (SQLException ex) {
//            Logger.getLogger(JedicProfesor.class.getName()).log(Level.SEVERE, null, ex);
//        }
//    }
    private void cambiarFondoMenus(Color c) {
        for (int i = 0; i < jMenuBar1.getMenuCount(); i++) {
            jMenuBar1.getMenu(i).setBackground(c);
        }
    }

    private Calendar getFechaAsCalendar(String f) {
        int FECHA = 0, HORA = 1;
        String[] fec = f.split(" ");
        int a = Integer.parseInt(fec[FECHA].substring(0, 4));
        int m = Integer.parseInt(fec[FECHA].substring(5, 7));
        int d = Integer.parseInt(fec[FECHA].substring(8, 10));

        int h = Integer.parseInt(fec[HORA].substring(0, 2));
        int mi = Integer.parseInt(fec[HORA].substring(3, 5));
        int s = Integer.parseInt(fec[HORA].substring(6, 8));
        Calendar c = Calendar.getInstance();
        c.set(a, m, d, h, mi, s);
//        System.out.println("setiado: "+a+" "+m+" "+d);

        return c;
    }

    private Atraso getAtraso(String fechaAlumno, String fechaProfesor) {
        Calendar falu = getFechaAsCalendar(fechaAlumno);
        Calendar fpro = getFechaAsCalendar(fechaProfesor);
        final long dif = falu.getTimeInMillis() - fpro.getTimeInMillis();
        final long h, m, s, d;
        d = dif / 1000 / 60 / 60 / 24;
        h = dif / 1000 / 60 / 60;
        m = dif / 1000 / 60;
        s = dif / 1000;

        return new Atraso() {

            @Override
            public String getAtraso() {
                if (dif > 0) {
                    if (d != 0) {
                        return d + " días de retraso";
                    } else if (h != 0) {
                        return h + " horas de retraso";
                    } else if (m != 0) {
                        return h + " minutos de retraso";
                    } else {
                        return s + " segundos de retraso";
                    }
                } else {
                    return "No está atrasado";
                }

            }
        };
    }

    private List<Seccion> getSecciones() {
        List<Seccion> s = new ArrayList<>();
        try {

            Conexion.sentencia = Conexion.con.createStatement();
            String q = "select cod_sec, num_sec from seccion where cod_pro = " + Profesor.CODIGO;
            Conexion.rs = Conexion.sentencia.executeQuery(q);
            while (Conexion.rs.next()) {
                s.add(new Seccion(Conexion.rs.getString("num_sec"), Conexion.rs.getString("cod_sec")));
            }
            Conexion.sentencia.close();

        } catch (SQLException ex) {
            Logger.getLogger(JedicProfesor.class.getName()).log(Level.SEVERE, null, ex);
        }
        return s;
    }

    private String getNumeroSeccion(String codSec) {
        for (Seccion s : secciones) {
            if (s.getCodigo().equalsIgnoreCase(codSec)) {
                return s.getNumero();
            }
        }
        return null;
    }

    private boolean actualizarEjercicio(Ejercicio eNuevo, Ejercicio eAntiguo) {
        try {
            Conexion.sentencia = Conexion.con.createStatement();
            String up = "update ejercicio_profesor "
                    + "set nom_eje = '" + eNuevo.getNombreEjercicio() + "', fec_eje = '" + eNuevo.getFechaPlazo() + " " + eNuevo.getHoraPlazo() + "', "
                    + "des_eje = '" + eNuevo.getDescripcion() + "' where cod_eje = '" + eNuevo.getCodigo() + "'";
            Conexion.sentencia.execute(up);
            Conexion.sentencia.close();
            Historial.addHistorial("Ha actualizado un ejercicio: " + eAntiguo + " por " + eNuevo);
//            e.setFechaPlazo(clases.utilidades.Util.getFechaBonita(e.getFechaPlazo()));
            return true;
        } catch (SQLException ex) {
            Logger.getLogger(JedicProfesor.class.getName()).log(Level.SEVERE, null, ex);
            return false;
        }
    }

    private int getCantidadDeEjerciciosAlumno(String codigo) {
        int res = -1;
        try {
            Conexion.sentenciaAux = Conexion.con.createStatement();
            String q = "select count(0) as 'cont' "
                    + "from ejercicio_alumno "
                    + "where eje_pro = " + codigo;
            Conexion.rsAux = Conexion.sentenciaAux.executeQuery(q);
            if (Conexion.rsAux.next()) {
                res = Conexion.rsAux.getInt("cont");
            }
            Conexion.sentenciaAux.close();

        } catch (SQLException ex) {
            Logger.getLogger(JedicProfesor.class.getName()).log(Level.SEVERE, null, ex);
        }
        return res;
    }

    private boolean eliminarEjercicio(Ejercicio e) {
        try {
            eliminarDependencias(e);
            Conexion.sentenciaAux = Conexion.con.createStatement();
            String q = "delete from ejercicio_profesor where cod_eje = " + e.getCodigo();
            Conexion.sentenciaAux.execute(q);
            Conexion.sentenciaAux.close();
            Historial.addHistorial("Ha eliminado un ejercicio: " + e);
            return true;
        } catch (SQLException ex) {
            Logger.getLogger(JedicProfesor.class.getName()).log(Level.SEVERE, null, ex);
            return false;
        }
    }

    private void eliminarDependencias(Ejercicio e) {
        try {
            Conexion.sentenciaAux = Conexion.con.createStatement();
            String q = "delete from ejercicio_alumno where eje_pro = " + e.getCodigo();
            Conexion.sentenciaAux.execute(q);
            Conexion.sentenciaAux.close();

        } catch (SQLException ex) {
            Logger.getLogger(JedicProfesor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private List<Alumno> getAlumnos(Seccion seccion) {
        List<Alumno> alumnos = new ArrayList();
        try {
            Conexion.sentencia = Conexion.con.createStatement();
            Conexion.rs = Conexion.sentencia.executeQuery("select alumno.cod_alu, alumno.nom_alu, "
                    + "alumno.ema_alu, seccion.cod_sec, seccion.num_sec "
                    + "from alumno, seccion, profesor "
                    + "where alumno.cod_sec = seccion.cod_sec and profesor.cod_pro = '" + Profesor.CODIGO + "' and seccion.cod_sec = '" + seccion.getCodigo() + "' ORDER BY `nom_alu` ASC");

            while (Conexion.rs.next()) {
                alumnos.add(new Alumno(Conexion.rs.getString("nom_alu"), Conexion.rs.getString("ema_alu"), Conexion.rs.getString("cod_alu"), Conexion.rs.getString("cod_sec"), Conexion.rs.getString("num_sec")));
//                System.out.println("add alumno");
            }
            Conexion.sentencia.close();
        } catch (SQLException ex) {
            Logger.getLogger(JedicProfesor.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            return alumnos;
        }
    }

    private Estadistica getEstaditica(Alumno al) {
        Estadistica est = null;
        Alumno alumno;
        try {
            Conexion.sentencia = Conexion.con.createStatement();
            Conexion.rs = Conexion.sentencia.executeQuery("select alumno.nom_alu, alumno.ema_alu, alumno.cod_alu, seccion.cod_sec, seccion.num_sec, tiempo_chat.pri_con, tiempo_chat.ult_con, tiempo_chat.dur_ult, tiempo_chat.dur_tot from alumno, seccion, tiempo_chat where alumno.cod_sec = seccion.cod_sec and tiempo_chat.cod_alu = alumno.cod_alu and alumno.cod_alu = '" + al.getCodigo() + "';");
            if (Conexion.rs.next()) {
                alumno = new Alumno(Conexion.rs.getString("nom_alu"), Conexion.rs.getString("ema_alu"), Conexion.rs.getString("cod_alu"), Conexion.rs.getString("cod_sec"), Conexion.rs.getString("num_sec"));
                est = new Estadistica(alumno, Conexion.rs.getTimestamp("pri_con"), Conexion.rs.getTimestamp("ult_con"), Conexion.rs.getFloat("dur_ult"), Conexion.rs.getFloat("dur_tot"));
            }
            Conexion.sentencia.close();

            if (est == null) {
                Conexion.sentencia = Conexion.con.createStatement();
                Conexion.rs = Conexion.sentencia.executeQuery("select alumno.nom_alu, alumno.ema_alu, alumno.cod_alu, seccion.cod_sec, seccion.num_sec from alumno, seccion where alumno.cod_sec = seccion.cod_sec and alumno.cod_alu = '" + al.getCodigo() + "';");
                if (Conexion.rs.next()) {
                    alumno = new Alumno(Conexion.rs.getString("nom_alu"), Conexion.rs.getString("ema_alu"), Conexion.rs.getString("cod_alu"), Conexion.rs.getString("cod_sec"), Conexion.rs.getString("num_sec"));
                    est = new Estadistica(alumno);
                }
                Conexion.sentencia.close();
            }
        } catch (SQLException ex) {
            Logger.getLogger(JedicProfesor.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            return est;
        }
    }

    private void mostrarEstadistica(Estadistica est) {
        jLabel40.setText(est.getAlumno().getNombre());
        jLabel46.setText(est.getAlumno().getEmail());
        jLabel42.setText(est.getAlumno().getSeccion().getNumero());
        if (est.isPoseeEstadistica()) {
            jLabel44.setText(est.getPrimeraConexionComoString());
            jLabel43.setText(est.getUltimaConexionComoString());
            jLabel41.setText(est.getDuracionUltimaConexion() + " min.");
            jLabel39.setText(est.getDuracionTotal() + "min.");
        } else {
            jLabel44.setText("---");
            jLabel43.setText("---");
            jLabel41.setText("---");
            jLabel39.setText("---");
        }
        Historial.addHistorial("Ha visto la estadística de " + est.getAlumno().getNombre() + " de la sección " + est.getAlumno().getSeccion().getNumero());
    }

    private void limpiarFormAlumnos() {
        cboSec.setSelectedItem(0);
        jLabel40.setText("");
        jLabel46.setText("");
        jLabel42.setText("");
        jLabel44.setText("");
        jLabel43.setText("");
        jLabel41.setText("");
        jLabel39.setText("");
        listaAlumnos.setModel(new DefaultListModel());
    }

    private void enviarMensajeAutomático(String codigoEjercicio) {
        String cAlu = null;
        int cod_pro = Profesor.CODIGO;
        try {
            Conexion.sentencia = Conexion.con.createStatement();
            Conexion.rs = Conexion.sentencia.executeQuery("select cod_alu from ejercicio_alumno where cod_eje = '" + codigoEjercicio + "'");
            if (Conexion.rs.next()) {
                cAlu = Conexion.rs.getString("cod_alu");
            }
            Conexion.sentencia.close();

            Conexion.sentencia = Conexion.con.createStatement();
            Conexion.sentencia.execute("insert into mensaje(cod_pro, asu_men, cod_alu, fec_men, men_men) values('" + cod_pro + "', 'Ejercicio Recibido','" + cAlu + "',NOW(),'El ejercicio ha sido recibido con éxito')");
            Conexion.sentencia.close();
        } catch (SQLException ex) {
            Logger.getLogger(JedicProfesor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void limpiarFormMensaje() {
//        jTextField1.setText("");
        jTextField3.setText("");
        areaMensaje.setText("");

    }

    private void limpiarFormMensajeSeccion() {
        jTextField5.setText("");
        cboSecMen.setSelectedIndex(0);
        areaMensaje1.setText("");
    }

    private boolean enviarMensaje(clases.modelo.MensajeInbox m) {
        try {
            Conexion.sentencia = Conexion.con.createStatement();
            if (m instanceof MensajeSeccion) {
                MensajeSeccion ms = (MensajeSeccion) m;
                Conexion.sentencia.execute("insert into mensaje_seccion(asu_men, cod_pro, cod_sec, fec_men, men_men) values( '" + m.getAsunto() + "', '" + m.getCod_pro() + "','" + ms.getSeccion().getCodigo() + "',NOW(),'" + m.getMensaje() + "')");
                Historial.addHistorial("Ha enviado un mensaje a la sección " + ms.getSeccion().getNumero() + ": [asunto=" + ms.getAsunto() + ", mensaje=" + ms.getMensaje() + "]");
            } else if (m instanceof MensajeAlumno) {
                MensajeAlumno ma = (MensajeAlumno) m;
                Conexion.sentencia.execute("insert into mensaje(asu_men, cod_pro, cod_alu, fec_men, men_men) values( '" + ma.getAsunto() + "', '" + ma.getCod_pro() + "','" + ma.getCodAlu() + "',NOW(),'" + ma.getMensaje() + "')");
                Historial.addHistorial("Ha enviado un mensaje a un alumno: [alumno=" + jTextField1.getText() + ", asunto=" + m.getAsunto() + ", mensaje=" + m.getMensaje() + "]");
            }

            Conexion.sentencia.close();
            return true;
        } catch (SQLException ex) {
            Logger.getLogger(JedicProfesor.class.getName()).log(Level.SEVERE, null, ex);
            return false;
        }
    }

    private void cerrarVentanas() {
        formContrasena.setVisible(false);
        formBarra.setVisible(false);
        JDSubirEjercicio.setVisible(false);
        JDVisualizarEjercicios.setVisible(false);
        JDReportes.setVisible(false);
        JDMisEjercicios.setVisible(false);
        formAlumnos.setVisible(false);
        formMensaje.setVisible(false);
        formMensajeSeccion.setVisible(false);
    }

    private void setEjerciciosEnTabla(List<EjercicioAlumno> ejerc) {
        int fila = 0;
        for (EjercicioAlumno e : ejerc) {
            tabEje.setValueAt(e.getCodigo(), fila, 0);
            tabEje.setValueAt(e.getAlumno(), fila, 1);
            tabEje.setValueAt(e.getSeccion(), fila, 2);
            tabEje.setValueAt(e.getEjercicio(), fila, 3);
            tabEje.setValueAt(e.getAtraso().getAtraso(), fila, 4);
            fila++;
        }
    }

    private Alumno getAlumno(String codigoEjercicio) {
        for (EjercicioAlumno e : ejerc) {
            if (e.getCodigo().equalsIgnoreCase(codigoEjercicio)) {
                return new Alumno(e.getAlumno(), e.getCodigoAlumno());
            }
        }
        return null;
    }
}
